
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CollectionShareTweet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CollectionShareTweet
 * 
 */
export type CollectionShareTweetModel = runtime.Types.Result.DefaultSelection<Prisma.$CollectionShareTweetPayload>

export type AggregateCollectionShareTweet = {
  _count: CollectionShareTweetCountAggregateOutputType | null
  _min: CollectionShareTweetMinAggregateOutputType | null
  _max: CollectionShareTweetMaxAggregateOutputType | null
}

export type CollectionShareTweetMinAggregateOutputType = {
  id: string | null
  collectionShareId: string | null
  tweetId: string | null
  tweetUserId: string | null
  createdAt: Date | null
}

export type CollectionShareTweetMaxAggregateOutputType = {
  id: string | null
  collectionShareId: string | null
  tweetId: string | null
  tweetUserId: string | null
  createdAt: Date | null
}

export type CollectionShareTweetCountAggregateOutputType = {
  id: number
  collectionShareId: number
  tweetId: number
  tweetUserId: number
  createdAt: number
  _all: number
}


export type CollectionShareTweetMinAggregateInputType = {
  id?: true
  collectionShareId?: true
  tweetId?: true
  tweetUserId?: true
  createdAt?: true
}

export type CollectionShareTweetMaxAggregateInputType = {
  id?: true
  collectionShareId?: true
  tweetId?: true
  tweetUserId?: true
  createdAt?: true
}

export type CollectionShareTweetCountAggregateInputType = {
  id?: true
  collectionShareId?: true
  tweetId?: true
  tweetUserId?: true
  createdAt?: true
  _all?: true
}

export type CollectionShareTweetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShareTweet to aggregate.
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareTweets to fetch.
   */
  orderBy?: Prisma.CollectionShareTweetOrderByWithRelationInput | Prisma.CollectionShareTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CollectionShareTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CollectionShareTweets
  **/
  _count?: true | CollectionShareTweetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CollectionShareTweetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CollectionShareTweetMaxAggregateInputType
}

export type GetCollectionShareTweetAggregateType<T extends CollectionShareTweetAggregateArgs> = {
      [P in keyof T & keyof AggregateCollectionShareTweet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCollectionShareTweet[P]>
    : Prisma.GetScalarType<T[P], AggregateCollectionShareTweet[P]>
}




export type CollectionShareTweetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CollectionShareTweetWhereInput
  orderBy?: Prisma.CollectionShareTweetOrderByWithAggregationInput | Prisma.CollectionShareTweetOrderByWithAggregationInput[]
  by: Prisma.CollectionShareTweetScalarFieldEnum[] | Prisma.CollectionShareTweetScalarFieldEnum
  having?: Prisma.CollectionShareTweetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CollectionShareTweetCountAggregateInputType | true
  _min?: CollectionShareTweetMinAggregateInputType
  _max?: CollectionShareTweetMaxAggregateInputType
}

export type CollectionShareTweetGroupByOutputType = {
  id: string
  collectionShareId: string
  tweetId: string
  tweetUserId: string
  createdAt: Date
  _count: CollectionShareTweetCountAggregateOutputType | null
  _min: CollectionShareTweetMinAggregateOutputType | null
  _max: CollectionShareTweetMaxAggregateOutputType | null
}

type GetCollectionShareTweetGroupByPayload<T extends CollectionShareTweetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CollectionShareTweetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CollectionShareTweetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CollectionShareTweetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CollectionShareTweetGroupByOutputType[P]>
      }
    >
  >



export type CollectionShareTweetWhereInput = {
  AND?: Prisma.CollectionShareTweetWhereInput | Prisma.CollectionShareTweetWhereInput[]
  OR?: Prisma.CollectionShareTweetWhereInput[]
  NOT?: Prisma.CollectionShareTweetWhereInput | Prisma.CollectionShareTweetWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  collectionShareId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  tweetId?: Prisma.StringFilter<"CollectionShareTweet"> | string
  tweetUserId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareTweet"> | Date | string
  collectionShare?: Prisma.XOR<Prisma.CollectionShareScalarRelationFilter, Prisma.CollectionShareWhereInput>
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
}

export type CollectionShareTweetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  tweetUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  collectionShare?: Prisma.CollectionShareOrderByWithRelationInput
  tweet?: Prisma.TweetOrderByWithRelationInput
}

export type CollectionShareTweetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  collectionShareId_tweetId_tweetUserId?: Prisma.CollectionShareTweetCollectionShareIdTweetIdTweetUserIdCompoundUniqueInput
  AND?: Prisma.CollectionShareTweetWhereInput | Prisma.CollectionShareTweetWhereInput[]
  OR?: Prisma.CollectionShareTweetWhereInput[]
  NOT?: Prisma.CollectionShareTweetWhereInput | Prisma.CollectionShareTweetWhereInput[]
  collectionShareId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  tweetId?: Prisma.StringFilter<"CollectionShareTweet"> | string
  tweetUserId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareTweet"> | Date | string
  collectionShare?: Prisma.XOR<Prisma.CollectionShareScalarRelationFilter, Prisma.CollectionShareWhereInput>
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
}, "id" | "collectionShareId_tweetId_tweetUserId">

export type CollectionShareTweetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  tweetUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.CollectionShareTweetCountOrderByAggregateInput
  _max?: Prisma.CollectionShareTweetMaxOrderByAggregateInput
  _min?: Prisma.CollectionShareTweetMinOrderByAggregateInput
}

export type CollectionShareTweetScalarWhereWithAggregatesInput = {
  AND?: Prisma.CollectionShareTweetScalarWhereWithAggregatesInput | Prisma.CollectionShareTweetScalarWhereWithAggregatesInput[]
  OR?: Prisma.CollectionShareTweetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CollectionShareTweetScalarWhereWithAggregatesInput | Prisma.CollectionShareTweetScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"CollectionShareTweet"> | string
  collectionShareId?: Prisma.UuidWithAggregatesFilter<"CollectionShareTweet"> | string
  tweetId?: Prisma.StringWithAggregatesFilter<"CollectionShareTweet"> | string
  tweetUserId?: Prisma.UuidWithAggregatesFilter<"CollectionShareTweet"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CollectionShareTweet"> | Date | string
}

export type CollectionShareTweetCreateInput = {
  id?: string
  createdAt?: Date | string
  collectionShare: Prisma.CollectionShareCreateNestedOneWithoutCollectionShareTweetsInput
  tweet: Prisma.TweetCreateNestedOneWithoutCollectionShareTweetsInput
}

export type CollectionShareTweetUncheckedCreateInput = {
  id?: string
  collectionShareId: string
  tweetId: string
  tweetUserId: string
  createdAt?: Date | string
}

export type CollectionShareTweetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  collectionShare?: Prisma.CollectionShareUpdateOneRequiredWithoutCollectionShareTweetsNestedInput
  tweet?: Prisma.TweetUpdateOneRequiredWithoutCollectionShareTweetsNestedInput
}

export type CollectionShareTweetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetCreateManyInput = {
  id?: string
  collectionShareId: string
  tweetId: string
  tweetUserId: string
  createdAt?: Date | string
}

export type CollectionShareTweetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetListRelationFilter = {
  every?: Prisma.CollectionShareTweetWhereInput
  some?: Prisma.CollectionShareTweetWhereInput
  none?: Prisma.CollectionShareTweetWhereInput
}

export type CollectionShareTweetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CollectionShareTweetCollectionShareIdTweetIdTweetUserIdCompoundUniqueInput = {
  collectionShareId: string
  tweetId: string
  tweetUserId: string
}

export type CollectionShareTweetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  tweetUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareTweetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  tweetUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareTweetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  tweetUserId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareTweetCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput> | Prisma.CollectionShareTweetCreateWithoutTweetInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput | Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyTweetInputEnvelope
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
}

export type CollectionShareTweetUncheckedCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput> | Prisma.CollectionShareTweetCreateWithoutTweetInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput | Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyTweetInputEnvelope
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
}

export type CollectionShareTweetUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput> | Prisma.CollectionShareTweetCreateWithoutTweetInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput | Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutTweetInput | Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyTweetInputEnvelope
  set?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  delete?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  update?: Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutTweetInput | Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.CollectionShareTweetUpdateManyWithWhereWithoutTweetInput | Prisma.CollectionShareTweetUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
}

export type CollectionShareTweetUncheckedUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput> | Prisma.CollectionShareTweetCreateWithoutTweetInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput | Prisma.CollectionShareTweetCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutTweetInput | Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyTweetInputEnvelope
  set?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  delete?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  update?: Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutTweetInput | Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.CollectionShareTweetUpdateManyWithWhereWithoutTweetInput | Prisma.CollectionShareTweetUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
}

export type CollectionShareTweetCreateNestedManyWithoutCollectionShareInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareTweetCreateWithoutCollectionShareInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyCollectionShareInputEnvelope
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
}

export type CollectionShareTweetUncheckedCreateNestedManyWithoutCollectionShareInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareTweetCreateWithoutCollectionShareInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyCollectionShareInputEnvelope
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
}

export type CollectionShareTweetUpdateManyWithoutCollectionShareNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareTweetCreateWithoutCollectionShareInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput[]
  upsert?: Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyCollectionShareInputEnvelope
  set?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  delete?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  update?: Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutCollectionShareInput[]
  updateMany?: Prisma.CollectionShareTweetUpdateManyWithWhereWithoutCollectionShareInput | Prisma.CollectionShareTweetUpdateManyWithWhereWithoutCollectionShareInput[]
  deleteMany?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
}

export type CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareTweetCreateWithoutCollectionShareInput[] | Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareTweetCreateOrConnectWithoutCollectionShareInput[]
  upsert?: Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareTweetUpsertWithWhereUniqueWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareTweetCreateManyCollectionShareInputEnvelope
  set?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  delete?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  connect?: Prisma.CollectionShareTweetWhereUniqueInput | Prisma.CollectionShareTweetWhereUniqueInput[]
  update?: Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareTweetUpdateWithWhereUniqueWithoutCollectionShareInput[]
  updateMany?: Prisma.CollectionShareTweetUpdateManyWithWhereWithoutCollectionShareInput | Prisma.CollectionShareTweetUpdateManyWithWhereWithoutCollectionShareInput[]
  deleteMany?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
}

export type CollectionShareTweetCreateWithoutTweetInput = {
  id?: string
  createdAt?: Date | string
  collectionShare: Prisma.CollectionShareCreateNestedOneWithoutCollectionShareTweetsInput
}

export type CollectionShareTweetUncheckedCreateWithoutTweetInput = {
  id?: string
  collectionShareId: string
  createdAt?: Date | string
}

export type CollectionShareTweetCreateOrConnectWithoutTweetInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput>
}

export type CollectionShareTweetCreateManyTweetInputEnvelope = {
  data: Prisma.CollectionShareTweetCreateManyTweetInput | Prisma.CollectionShareTweetCreateManyTweetInput[]
  skipDuplicates?: boolean
}

export type CollectionShareTweetUpsertWithWhereUniqueWithoutTweetInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  update: Prisma.XOR<Prisma.CollectionShareTweetUpdateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedUpdateWithoutTweetInput>
  create: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedCreateWithoutTweetInput>
}

export type CollectionShareTweetUpdateWithWhereUniqueWithoutTweetInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateWithoutTweetInput, Prisma.CollectionShareTweetUncheckedUpdateWithoutTweetInput>
}

export type CollectionShareTweetUpdateManyWithWhereWithoutTweetInput = {
  where: Prisma.CollectionShareTweetScalarWhereInput
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateManyMutationInput, Prisma.CollectionShareTweetUncheckedUpdateManyWithoutTweetInput>
}

export type CollectionShareTweetScalarWhereInput = {
  AND?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
  OR?: Prisma.CollectionShareTweetScalarWhereInput[]
  NOT?: Prisma.CollectionShareTweetScalarWhereInput | Prisma.CollectionShareTweetScalarWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  collectionShareId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  tweetId?: Prisma.StringFilter<"CollectionShareTweet"> | string
  tweetUserId?: Prisma.UuidFilter<"CollectionShareTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareTweet"> | Date | string
}

export type CollectionShareTweetCreateWithoutCollectionShareInput = {
  id?: string
  createdAt?: Date | string
  tweet: Prisma.TweetCreateNestedOneWithoutCollectionShareTweetsInput
}

export type CollectionShareTweetUncheckedCreateWithoutCollectionShareInput = {
  id?: string
  tweetId: string
  tweetUserId: string
  createdAt?: Date | string
}

export type CollectionShareTweetCreateOrConnectWithoutCollectionShareInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput>
}

export type CollectionShareTweetCreateManyCollectionShareInputEnvelope = {
  data: Prisma.CollectionShareTweetCreateManyCollectionShareInput | Prisma.CollectionShareTweetCreateManyCollectionShareInput[]
  skipDuplicates?: boolean
}

export type CollectionShareTweetUpsertWithWhereUniqueWithoutCollectionShareInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  update: Prisma.XOR<Prisma.CollectionShareTweetUpdateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedUpdateWithoutCollectionShareInput>
  create: Prisma.XOR<Prisma.CollectionShareTweetCreateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedCreateWithoutCollectionShareInput>
}

export type CollectionShareTweetUpdateWithWhereUniqueWithoutCollectionShareInput = {
  where: Prisma.CollectionShareTweetWhereUniqueInput
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateWithoutCollectionShareInput, Prisma.CollectionShareTweetUncheckedUpdateWithoutCollectionShareInput>
}

export type CollectionShareTweetUpdateManyWithWhereWithoutCollectionShareInput = {
  where: Prisma.CollectionShareTweetScalarWhereInput
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateManyMutationInput, Prisma.CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareInput>
}

export type CollectionShareTweetCreateManyTweetInput = {
  id?: string
  collectionShareId: string
  createdAt?: Date | string
}

export type CollectionShareTweetUpdateWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  collectionShare?: Prisma.CollectionShareUpdateOneRequiredWithoutCollectionShareTweetsNestedInput
}

export type CollectionShareTweetUncheckedUpdateWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetUncheckedUpdateManyWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetCreateManyCollectionShareInput = {
  id?: string
  tweetId: string
  tweetUserId: string
  createdAt?: Date | string
}

export type CollectionShareTweetUpdateWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweet?: Prisma.TweetUpdateOneRequiredWithoutCollectionShareTweetsNestedInput
}

export type CollectionShareTweetUncheckedUpdateWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetUserId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CollectionShareTweetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  tweetId?: boolean
  tweetUserId?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareTweet"]>

export type CollectionShareTweetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  tweetId?: boolean
  tweetUserId?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareTweet"]>

export type CollectionShareTweetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  tweetId?: boolean
  tweetUserId?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareTweet"]>

export type CollectionShareTweetSelectScalar = {
  id?: boolean
  collectionShareId?: boolean
  tweetId?: boolean
  tweetUserId?: boolean
  createdAt?: boolean
}

export type CollectionShareTweetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "collectionShareId" | "tweetId" | "tweetUserId" | "createdAt", ExtArgs["result"]["collectionShareTweet"]>
export type CollectionShareTweetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}
export type CollectionShareTweetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}
export type CollectionShareTweetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}

export type $CollectionShareTweetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CollectionShareTweet"
  objects: {
    collectionShare: Prisma.$CollectionSharePayload<ExtArgs>
    tweet: Prisma.$TweetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    collectionShareId: string
    tweetId: string
    tweetUserId: string
    createdAt: Date
  }, ExtArgs["result"]["collectionShareTweet"]>
  composites: {}
}

export type CollectionShareTweetGetPayload<S extends boolean | null | undefined | CollectionShareTweetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload, S>

export type CollectionShareTweetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CollectionShareTweetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: CollectionShareTweetCountAggregateInputType | true
  }

export interface CollectionShareTweetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionShareTweet'], meta: { name: 'CollectionShareTweet' } }
  /**
   * Find zero or one CollectionShareTweet that matches the filter.
   * @param {CollectionShareTweetFindUniqueArgs} args - Arguments to find a CollectionShareTweet
   * @example
   * // Get one CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CollectionShareTweetFindUniqueArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CollectionShareTweet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CollectionShareTweetFindUniqueOrThrowArgs} args - Arguments to find a CollectionShareTweet
   * @example
   * // Get one CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CollectionShareTweetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShareTweet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetFindFirstArgs} args - Arguments to find a CollectionShareTweet
   * @example
   * // Get one CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CollectionShareTweetFindFirstArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetFindFirstArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShareTweet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetFindFirstOrThrowArgs} args - Arguments to find a CollectionShareTweet
   * @example
   * // Get one CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CollectionShareTweetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CollectionShareTweets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CollectionShareTweets
   * const collectionShareTweets = await prisma.collectionShareTweet.findMany()
   * 
   * // Get first 10 CollectionShareTweets
   * const collectionShareTweets = await prisma.collectionShareTweet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const collectionShareTweetWithIdOnly = await prisma.collectionShareTweet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CollectionShareTweetFindManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CollectionShareTweet.
   * @param {CollectionShareTweetCreateArgs} args - Arguments to create a CollectionShareTweet.
   * @example
   * // Create one CollectionShareTweet
   * const CollectionShareTweet = await prisma.collectionShareTweet.create({
   *   data: {
   *     // ... data to create a CollectionShareTweet
   *   }
   * })
   * 
   */
  create<T extends CollectionShareTweetCreateArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetCreateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CollectionShareTweets.
   * @param {CollectionShareTweetCreateManyArgs} args - Arguments to create many CollectionShareTweets.
   * @example
   * // Create many CollectionShareTweets
   * const collectionShareTweet = await prisma.collectionShareTweet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CollectionShareTweetCreateManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CollectionShareTweets and returns the data saved in the database.
   * @param {CollectionShareTweetCreateManyAndReturnArgs} args - Arguments to create many CollectionShareTweets.
   * @example
   * // Create many CollectionShareTweets
   * const collectionShareTweet = await prisma.collectionShareTweet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CollectionShareTweets and only return the `id`
   * const collectionShareTweetWithIdOnly = await prisma.collectionShareTweet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CollectionShareTweetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CollectionShareTweet.
   * @param {CollectionShareTweetDeleteArgs} args - Arguments to delete one CollectionShareTweet.
   * @example
   * // Delete one CollectionShareTweet
   * const CollectionShareTweet = await prisma.collectionShareTweet.delete({
   *   where: {
   *     // ... filter to delete one CollectionShareTweet
   *   }
   * })
   * 
   */
  delete<T extends CollectionShareTweetDeleteArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetDeleteArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CollectionShareTweet.
   * @param {CollectionShareTweetUpdateArgs} args - Arguments to update one CollectionShareTweet.
   * @example
   * // Update one CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CollectionShareTweetUpdateArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetUpdateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CollectionShareTweets.
   * @param {CollectionShareTweetDeleteManyArgs} args - Arguments to filter CollectionShareTweets to delete.
   * @example
   * // Delete a few CollectionShareTweets
   * const { count } = await prisma.collectionShareTweet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CollectionShareTweetDeleteManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareTweetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShareTweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CollectionShareTweets
   * const collectionShareTweet = await prisma.collectionShareTweet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CollectionShareTweetUpdateManyArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShareTweets and returns the data updated in the database.
   * @param {CollectionShareTweetUpdateManyAndReturnArgs} args - Arguments to update many CollectionShareTweets.
   * @example
   * // Update many CollectionShareTweets
   * const collectionShareTweet = await prisma.collectionShareTweet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CollectionShareTweets and only return the `id`
   * const collectionShareTweetWithIdOnly = await prisma.collectionShareTweet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CollectionShareTweetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CollectionShareTweet.
   * @param {CollectionShareTweetUpsertArgs} args - Arguments to update or create a CollectionShareTweet.
   * @example
   * // Update or create a CollectionShareTweet
   * const collectionShareTweet = await prisma.collectionShareTweet.upsert({
   *   create: {
   *     // ... data to create a CollectionShareTweet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CollectionShareTweet we want to update
   *   }
   * })
   */
  upsert<T extends CollectionShareTweetUpsertArgs>(args: Prisma.SelectSubset<T, CollectionShareTweetUpsertArgs<ExtArgs>>): Prisma.Prisma__CollectionShareTweetClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CollectionShareTweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetCountArgs} args - Arguments to filter CollectionShareTweets to count.
   * @example
   * // Count the number of CollectionShareTweets
   * const count = await prisma.collectionShareTweet.count({
   *   where: {
   *     // ... the filter for the CollectionShareTweets we want to count
   *   }
   * })
  **/
  count<T extends CollectionShareTweetCountArgs>(
    args?: Prisma.Subset<T, CollectionShareTweetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CollectionShareTweetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CollectionShareTweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CollectionShareTweetAggregateArgs>(args: Prisma.Subset<T, CollectionShareTweetAggregateArgs>): Prisma.PrismaPromise<GetCollectionShareTweetAggregateType<T>>

  /**
   * Group by CollectionShareTweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareTweetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CollectionShareTweetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CollectionShareTweetGroupByArgs['orderBy'] }
      : { orderBy?: CollectionShareTweetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CollectionShareTweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionShareTweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CollectionShareTweet model
 */
readonly fields: CollectionShareTweetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CollectionShareTweet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CollectionShareTweetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  collectionShare<T extends Prisma.CollectionShareDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CollectionShareDefaultArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tweet<T extends Prisma.TweetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TweetDefaultArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CollectionShareTweet model
 */
export interface CollectionShareTweetFieldRefs {
  readonly id: Prisma.FieldRef<"CollectionShareTweet", 'String'>
  readonly collectionShareId: Prisma.FieldRef<"CollectionShareTweet", 'String'>
  readonly tweetId: Prisma.FieldRef<"CollectionShareTweet", 'String'>
  readonly tweetUserId: Prisma.FieldRef<"CollectionShareTweet", 'String'>
  readonly createdAt: Prisma.FieldRef<"CollectionShareTweet", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CollectionShareTweet findUnique
 */
export type CollectionShareTweetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareTweet to fetch.
   */
  where: Prisma.CollectionShareTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet findUniqueOrThrow
 */
export type CollectionShareTweetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareTweet to fetch.
   */
  where: Prisma.CollectionShareTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet findFirst
 */
export type CollectionShareTweetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareTweet to fetch.
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareTweets to fetch.
   */
  orderBy?: Prisma.CollectionShareTweetOrderByWithRelationInput | Prisma.CollectionShareTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShareTweets.
   */
  cursor?: Prisma.CollectionShareTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShareTweets.
   */
  distinct?: Prisma.CollectionShareTweetScalarFieldEnum | Prisma.CollectionShareTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet findFirstOrThrow
 */
export type CollectionShareTweetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareTweet to fetch.
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareTweets to fetch.
   */
  orderBy?: Prisma.CollectionShareTweetOrderByWithRelationInput | Prisma.CollectionShareTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShareTweets.
   */
  cursor?: Prisma.CollectionShareTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShareTweets.
   */
  distinct?: Prisma.CollectionShareTweetScalarFieldEnum | Prisma.CollectionShareTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet findMany
 */
export type CollectionShareTweetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareTweets to fetch.
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareTweets to fetch.
   */
  orderBy?: Prisma.CollectionShareTweetOrderByWithRelationInput | Prisma.CollectionShareTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CollectionShareTweets.
   */
  cursor?: Prisma.CollectionShareTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareTweets.
   */
  skip?: number
  distinct?: Prisma.CollectionShareTweetScalarFieldEnum | Prisma.CollectionShareTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet create
 */
export type CollectionShareTweetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * The data needed to create a CollectionShareTweet.
   */
  data: Prisma.XOR<Prisma.CollectionShareTweetCreateInput, Prisma.CollectionShareTweetUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet createMany
 */
export type CollectionShareTweetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CollectionShareTweets.
   */
  data: Prisma.CollectionShareTweetCreateManyInput | Prisma.CollectionShareTweetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CollectionShareTweet createManyAndReturn
 */
export type CollectionShareTweetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * The data used to create many CollectionShareTweets.
   */
  data: Prisma.CollectionShareTweetCreateManyInput | Prisma.CollectionShareTweetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShareTweet update
 */
export type CollectionShareTweetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * The data needed to update a CollectionShareTweet.
   */
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateInput, Prisma.CollectionShareTweetUncheckedUpdateInput>
  /**
   * Choose, which CollectionShareTweet to update.
   */
  where: Prisma.CollectionShareTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet updateMany
 */
export type CollectionShareTweetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CollectionShareTweets.
   */
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateManyMutationInput, Prisma.CollectionShareTweetUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShareTweets to update
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * Limit how many CollectionShareTweets to update.
   */
  limit?: number
}

/**
 * CollectionShareTweet updateManyAndReturn
 */
export type CollectionShareTweetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * The data used to update CollectionShareTweets.
   */
  data: Prisma.XOR<Prisma.CollectionShareTweetUpdateManyMutationInput, Prisma.CollectionShareTweetUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShareTweets to update
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * Limit how many CollectionShareTweets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShareTweet upsert
 */
export type CollectionShareTweetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * The filter to search for the CollectionShareTweet to update in case it exists.
   */
  where: Prisma.CollectionShareTweetWhereUniqueInput
  /**
   * In case the CollectionShareTweet found by the `where` argument doesn't exist, create a new CollectionShareTweet with this data.
   */
  create: Prisma.XOR<Prisma.CollectionShareTweetCreateInput, Prisma.CollectionShareTweetUncheckedCreateInput>
  /**
   * In case the CollectionShareTweet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CollectionShareTweetUpdateInput, Prisma.CollectionShareTweetUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet delete
 */
export type CollectionShareTweetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  /**
   * Filter which CollectionShareTweet to delete.
   */
  where: Prisma.CollectionShareTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareTweet deleteMany
 */
export type CollectionShareTweetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShareTweets to delete
   */
  where?: Prisma.CollectionShareTweetWhereInput
  /**
   * Limit how many CollectionShareTweets to delete.
   */
  limit?: number
}

/**
 * CollectionShareTweet without action
 */
export type CollectionShareTweetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
}
