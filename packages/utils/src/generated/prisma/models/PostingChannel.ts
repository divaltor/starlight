
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PostingChannel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PostingChannel
 * 
 */
export type PostingChannelModel = runtime.Types.Result.DefaultSelection<Prisma.$PostingChannelPayload>

export type AggregatePostingChannel = {
  _count: PostingChannelCountAggregateOutputType | null
  _avg: PostingChannelAvgAggregateOutputType | null
  _sum: PostingChannelSumAggregateOutputType | null
  _min: PostingChannelMinAggregateOutputType | null
  _max: PostingChannelMaxAggregateOutputType | null
}

export type PostingChannelAvgAggregateOutputType = {
  chatId: number | null
}

export type PostingChannelSumAggregateOutputType = {
  chatId: bigint | null
}

export type PostingChannelMinAggregateOutputType = {
  userId: string | null
  chatId: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostingChannelMaxAggregateOutputType = {
  userId: string | null
  chatId: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostingChannelCountAggregateOutputType = {
  userId: number
  chatId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PostingChannelAvgAggregateInputType = {
  chatId?: true
}

export type PostingChannelSumAggregateInputType = {
  chatId?: true
}

export type PostingChannelMinAggregateInputType = {
  userId?: true
  chatId?: true
  createdAt?: true
  updatedAt?: true
}

export type PostingChannelMaxAggregateInputType = {
  userId?: true
  chatId?: true
  createdAt?: true
  updatedAt?: true
}

export type PostingChannelCountAggregateInputType = {
  userId?: true
  chatId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PostingChannelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostingChannel to aggregate.
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostingChannels to fetch.
   */
  orderBy?: Prisma.PostingChannelOrderByWithRelationInput | Prisma.PostingChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostingChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostingChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostingChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PostingChannels
  **/
  _count?: true | PostingChannelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PostingChannelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PostingChannelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostingChannelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostingChannelMaxAggregateInputType
}

export type GetPostingChannelAggregateType<T extends PostingChannelAggregateArgs> = {
      [P in keyof T & keyof AggregatePostingChannel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePostingChannel[P]>
    : Prisma.GetScalarType<T[P], AggregatePostingChannel[P]>
}




export type PostingChannelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostingChannelWhereInput
  orderBy?: Prisma.PostingChannelOrderByWithAggregationInput | Prisma.PostingChannelOrderByWithAggregationInput[]
  by: Prisma.PostingChannelScalarFieldEnum[] | Prisma.PostingChannelScalarFieldEnum
  having?: Prisma.PostingChannelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostingChannelCountAggregateInputType | true
  _avg?: PostingChannelAvgAggregateInputType
  _sum?: PostingChannelSumAggregateInputType
  _min?: PostingChannelMinAggregateInputType
  _max?: PostingChannelMaxAggregateInputType
}

export type PostingChannelGroupByOutputType = {
  userId: string
  chatId: bigint
  createdAt: Date
  updatedAt: Date
  _count: PostingChannelCountAggregateOutputType | null
  _avg: PostingChannelAvgAggregateOutputType | null
  _sum: PostingChannelSumAggregateOutputType | null
  _min: PostingChannelMinAggregateOutputType | null
  _max: PostingChannelMaxAggregateOutputType | null
}

type GetPostingChannelGroupByPayload<T extends PostingChannelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostingChannelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostingChannelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostingChannelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostingChannelGroupByOutputType[P]>
      }
    >
  >



export type PostingChannelWhereInput = {
  AND?: Prisma.PostingChannelWhereInput | Prisma.PostingChannelWhereInput[]
  OR?: Prisma.PostingChannelWhereInput[]
  NOT?: Prisma.PostingChannelWhereInput | Prisma.PostingChannelWhereInput[]
  userId?: Prisma.UuidFilter<"PostingChannel"> | string
  chatId?: Prisma.BigIntFilter<"PostingChannel"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  scheduledSlots?: Prisma.ScheduledSlotListRelationFilter
}

export type PostingChannelOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  chat?: Prisma.ChatOrderByWithRelationInput
  scheduledSlots?: Prisma.ScheduledSlotOrderByRelationAggregateInput
}

export type PostingChannelWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  AND?: Prisma.PostingChannelWhereInput | Prisma.PostingChannelWhereInput[]
  OR?: Prisma.PostingChannelWhereInput[]
  NOT?: Prisma.PostingChannelWhereInput | Prisma.PostingChannelWhereInput[]
  chatId?: Prisma.BigIntFilter<"PostingChannel"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  scheduledSlots?: Prisma.ScheduledSlotListRelationFilter
}, "userId">

export type PostingChannelOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PostingChannelCountOrderByAggregateInput
  _avg?: Prisma.PostingChannelAvgOrderByAggregateInput
  _max?: Prisma.PostingChannelMaxOrderByAggregateInput
  _min?: Prisma.PostingChannelMinOrderByAggregateInput
  _sum?: Prisma.PostingChannelSumOrderByAggregateInput
}

export type PostingChannelScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostingChannelScalarWhereWithAggregatesInput | Prisma.PostingChannelScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostingChannelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostingChannelScalarWhereWithAggregatesInput | Prisma.PostingChannelScalarWhereWithAggregatesInput[]
  userId?: Prisma.UuidWithAggregatesFilter<"PostingChannel"> | string
  chatId?: Prisma.BigIntWithAggregatesFilter<"PostingChannel"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PostingChannel"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PostingChannel"> | Date | string
}

export type PostingChannelCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPostingChannelsInput
  chat: Prisma.ChatCreateNestedOneWithoutPostingChannelsInput
  scheduledSlots?: Prisma.ScheduledSlotCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelUncheckedCreateInput = {
  userId: string
  chatId: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPostingChannelsNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPostingChannelsNestedInput
  scheduledSlots?: Prisma.ScheduledSlotUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelCreateManyInput = {
  userId: string
  chatId: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostingChannelUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingChannelUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingChannelNullableScalarRelationFilter = {
  is?: Prisma.PostingChannelWhereInput | null
  isNot?: Prisma.PostingChannelWhereInput | null
}

export type PostingChannelListRelationFilter = {
  every?: Prisma.PostingChannelWhereInput
  some?: Prisma.PostingChannelWhereInput
  none?: Prisma.PostingChannelWhereInput
}

export type PostingChannelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostingChannelCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostingChannelAvgOrderByAggregateInput = {
  chatId?: Prisma.SortOrder
}

export type PostingChannelMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostingChannelMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostingChannelSumOrderByAggregateInput = {
  chatId?: Prisma.SortOrder
}

export type PostingChannelScalarRelationFilter = {
  is?: Prisma.PostingChannelWhereInput
  isNot?: Prisma.PostingChannelWhereInput
}

export type PostingChannelCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutUserInput
  connect?: Prisma.PostingChannelWhereUniqueInput
}

export type PostingChannelUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutUserInput
  connect?: Prisma.PostingChannelWhereUniqueInput
}

export type PostingChannelUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutUserInput
  upsert?: Prisma.PostingChannelUpsertWithoutUserInput
  disconnect?: Prisma.PostingChannelWhereInput | boolean
  delete?: Prisma.PostingChannelWhereInput | boolean
  connect?: Prisma.PostingChannelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PostingChannelUpdateToOneWithWhereWithoutUserInput, Prisma.PostingChannelUpdateWithoutUserInput>, Prisma.PostingChannelUncheckedUpdateWithoutUserInput>
}

export type PostingChannelUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutUserInput
  upsert?: Prisma.PostingChannelUpsertWithoutUserInput
  disconnect?: Prisma.PostingChannelWhereInput | boolean
  delete?: Prisma.PostingChannelWhereInput | boolean
  connect?: Prisma.PostingChannelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PostingChannelUpdateToOneWithWhereWithoutUserInput, Prisma.PostingChannelUpdateWithoutUserInput>, Prisma.PostingChannelUncheckedUpdateWithoutUserInput>
}

export type PostingChannelCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput> | Prisma.PostingChannelCreateWithoutChatInput[] | Prisma.PostingChannelUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutChatInput | Prisma.PostingChannelCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PostingChannelCreateManyChatInputEnvelope
  connect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
}

export type PostingChannelUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput> | Prisma.PostingChannelCreateWithoutChatInput[] | Prisma.PostingChannelUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutChatInput | Prisma.PostingChannelCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PostingChannelCreateManyChatInputEnvelope
  connect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
}

export type PostingChannelUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput> | Prisma.PostingChannelCreateWithoutChatInput[] | Prisma.PostingChannelUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutChatInput | Prisma.PostingChannelCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PostingChannelUpsertWithWhereUniqueWithoutChatInput | Prisma.PostingChannelUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PostingChannelCreateManyChatInputEnvelope
  set?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  disconnect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  delete?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  connect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  update?: Prisma.PostingChannelUpdateWithWhereUniqueWithoutChatInput | Prisma.PostingChannelUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PostingChannelUpdateManyWithWhereWithoutChatInput | Prisma.PostingChannelUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PostingChannelScalarWhereInput | Prisma.PostingChannelScalarWhereInput[]
}

export type PostingChannelUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput> | Prisma.PostingChannelCreateWithoutChatInput[] | Prisma.PostingChannelUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutChatInput | Prisma.PostingChannelCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PostingChannelUpsertWithWhereUniqueWithoutChatInput | Prisma.PostingChannelUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PostingChannelCreateManyChatInputEnvelope
  set?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  disconnect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  delete?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  connect?: Prisma.PostingChannelWhereUniqueInput | Prisma.PostingChannelWhereUniqueInput[]
  update?: Prisma.PostingChannelUpdateWithWhereUniqueWithoutChatInput | Prisma.PostingChannelUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PostingChannelUpdateManyWithWhereWithoutChatInput | Prisma.PostingChannelUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PostingChannelScalarWhereInput | Prisma.PostingChannelScalarWhereInput[]
}

export type PostingChannelCreateNestedOneWithoutScheduledSlotsInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedCreateWithoutScheduledSlotsInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutScheduledSlotsInput
  connect?: Prisma.PostingChannelWhereUniqueInput
}

export type PostingChannelUpdateOneRequiredWithoutScheduledSlotsNestedInput = {
  create?: Prisma.XOR<Prisma.PostingChannelCreateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedCreateWithoutScheduledSlotsInput>
  connectOrCreate?: Prisma.PostingChannelCreateOrConnectWithoutScheduledSlotsInput
  upsert?: Prisma.PostingChannelUpsertWithoutScheduledSlotsInput
  connect?: Prisma.PostingChannelWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PostingChannelUpdateToOneWithWhereWithoutScheduledSlotsInput, Prisma.PostingChannelUpdateWithoutScheduledSlotsInput>, Prisma.PostingChannelUncheckedUpdateWithoutScheduledSlotsInput>
}

export type PostingChannelCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  chat: Prisma.ChatCreateNestedOneWithoutPostingChannelsInput
  scheduledSlots?: Prisma.ScheduledSlotCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelUncheckedCreateWithoutUserInput = {
  chatId: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelCreateOrConnectWithoutUserInput = {
  where: Prisma.PostingChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
}

export type PostingChannelUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.PostingChannelUpdateWithoutUserInput, Prisma.PostingChannelUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutUserInput, Prisma.PostingChannelUncheckedCreateWithoutUserInput>
  where?: Prisma.PostingChannelWhereInput
}

export type PostingChannelUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.PostingChannelWhereInput
  data: Prisma.XOR<Prisma.PostingChannelUpdateWithoutUserInput, Prisma.PostingChannelUncheckedUpdateWithoutUserInput>
}

export type PostingChannelUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chat?: Prisma.ChatUpdateOneRequiredWithoutPostingChannelsNestedInput
  scheduledSlots?: Prisma.ScheduledSlotUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelUncheckedUpdateWithoutUserInput = {
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelCreateWithoutChatInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPostingChannelsInput
  scheduledSlots?: Prisma.ScheduledSlotCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelUncheckedCreateWithoutChatInput = {
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedCreateNestedManyWithoutPostingChannelInput
}

export type PostingChannelCreateOrConnectWithoutChatInput = {
  where: Prisma.PostingChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput>
}

export type PostingChannelCreateManyChatInputEnvelope = {
  data: Prisma.PostingChannelCreateManyChatInput | Prisma.PostingChannelCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type PostingChannelUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.PostingChannelWhereUniqueInput
  update: Prisma.XOR<Prisma.PostingChannelUpdateWithoutChatInput, Prisma.PostingChannelUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutChatInput, Prisma.PostingChannelUncheckedCreateWithoutChatInput>
}

export type PostingChannelUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.PostingChannelWhereUniqueInput
  data: Prisma.XOR<Prisma.PostingChannelUpdateWithoutChatInput, Prisma.PostingChannelUncheckedUpdateWithoutChatInput>
}

export type PostingChannelUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.PostingChannelScalarWhereInput
  data: Prisma.XOR<Prisma.PostingChannelUpdateManyMutationInput, Prisma.PostingChannelUncheckedUpdateManyWithoutChatInput>
}

export type PostingChannelScalarWhereInput = {
  AND?: Prisma.PostingChannelScalarWhereInput | Prisma.PostingChannelScalarWhereInput[]
  OR?: Prisma.PostingChannelScalarWhereInput[]
  NOT?: Prisma.PostingChannelScalarWhereInput | Prisma.PostingChannelScalarWhereInput[]
  userId?: Prisma.UuidFilter<"PostingChannel"> | string
  chatId?: Prisma.BigIntFilter<"PostingChannel"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostingChannel"> | Date | string
}

export type PostingChannelCreateWithoutScheduledSlotsInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPostingChannelsInput
  chat: Prisma.ChatCreateNestedOneWithoutPostingChannelsInput
}

export type PostingChannelUncheckedCreateWithoutScheduledSlotsInput = {
  userId: string
  chatId: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostingChannelCreateOrConnectWithoutScheduledSlotsInput = {
  where: Prisma.PostingChannelWhereUniqueInput
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedCreateWithoutScheduledSlotsInput>
}

export type PostingChannelUpsertWithoutScheduledSlotsInput = {
  update: Prisma.XOR<Prisma.PostingChannelUpdateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedUpdateWithoutScheduledSlotsInput>
  create: Prisma.XOR<Prisma.PostingChannelCreateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedCreateWithoutScheduledSlotsInput>
  where?: Prisma.PostingChannelWhereInput
}

export type PostingChannelUpdateToOneWithWhereWithoutScheduledSlotsInput = {
  where?: Prisma.PostingChannelWhereInput
  data: Prisma.XOR<Prisma.PostingChannelUpdateWithoutScheduledSlotsInput, Prisma.PostingChannelUncheckedUpdateWithoutScheduledSlotsInput>
}

export type PostingChannelUpdateWithoutScheduledSlotsInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPostingChannelsNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPostingChannelsNestedInput
}

export type PostingChannelUncheckedUpdateWithoutScheduledSlotsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostingChannelCreateManyChatInput = {
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostingChannelUpdateWithoutChatInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPostingChannelsNestedInput
  scheduledSlots?: Prisma.ScheduledSlotUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelUncheckedUpdateWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlots?: Prisma.ScheduledSlotUncheckedUpdateManyWithoutPostingChannelNestedInput
}

export type PostingChannelUncheckedUpdateManyWithoutChatInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PostingChannelCountOutputType
 */

export type PostingChannelCountOutputType = {
  scheduledSlots: number
}

export type PostingChannelCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlots?: boolean | PostingChannelCountOutputTypeCountScheduledSlotsArgs
}

/**
 * PostingChannelCountOutputType without action
 */
export type PostingChannelCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannelCountOutputType
   */
  select?: Prisma.PostingChannelCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PostingChannelCountOutputType without action
 */
export type PostingChannelCountOutputTypeCountScheduledSlotsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduledSlotWhereInput
}


export type PostingChannelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlots?: boolean | Prisma.PostingChannel$scheduledSlotsArgs<ExtArgs>
  _count?: boolean | Prisma.PostingChannelCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postingChannel"]>

export type PostingChannelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postingChannel"]>

export type PostingChannelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  chatId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postingChannel"]>

export type PostingChannelSelectScalar = {
  userId?: boolean
  chatId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PostingChannelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "chatId" | "createdAt" | "updatedAt", ExtArgs["result"]["postingChannel"]>
export type PostingChannelInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlots?: boolean | Prisma.PostingChannel$scheduledSlotsArgs<ExtArgs>
  _count?: boolean | Prisma.PostingChannelCountOutputTypeDefaultArgs<ExtArgs>
}
export type PostingChannelIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}
export type PostingChannelIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
}

export type $PostingChannelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PostingChannel"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    chat: Prisma.$ChatPayload<ExtArgs>
    scheduledSlots: Prisma.$ScheduledSlotPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    chatId: bigint
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["postingChannel"]>
  composites: {}
}

export type PostingChannelGetPayload<S extends boolean | null | undefined | PostingChannelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload, S>

export type PostingChannelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostingChannelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: PostingChannelCountAggregateInputType | true
  }

export interface PostingChannelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostingChannel'], meta: { name: 'PostingChannel' } }
  /**
   * Find zero or one PostingChannel that matches the filter.
   * @param {PostingChannelFindUniqueArgs} args - Arguments to find a PostingChannel
   * @example
   * // Get one PostingChannel
   * const postingChannel = await prisma.postingChannel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostingChannelFindUniqueArgs>(args: Prisma.SelectSubset<T, PostingChannelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PostingChannel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostingChannelFindUniqueOrThrowArgs} args - Arguments to find a PostingChannel
   * @example
   * // Get one PostingChannel
   * const postingChannel = await prisma.postingChannel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostingChannelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostingChannelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostingChannel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelFindFirstArgs} args - Arguments to find a PostingChannel
   * @example
   * // Get one PostingChannel
   * const postingChannel = await prisma.postingChannel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostingChannelFindFirstArgs>(args?: Prisma.SelectSubset<T, PostingChannelFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostingChannel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelFindFirstOrThrowArgs} args - Arguments to find a PostingChannel
   * @example
   * // Get one PostingChannel
   * const postingChannel = await prisma.postingChannel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostingChannelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostingChannelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PostingChannels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PostingChannels
   * const postingChannels = await prisma.postingChannel.findMany()
   * 
   * // Get first 10 PostingChannels
   * const postingChannels = await prisma.postingChannel.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const postingChannelWithUserIdOnly = await prisma.postingChannel.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends PostingChannelFindManyArgs>(args?: Prisma.SelectSubset<T, PostingChannelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PostingChannel.
   * @param {PostingChannelCreateArgs} args - Arguments to create a PostingChannel.
   * @example
   * // Create one PostingChannel
   * const PostingChannel = await prisma.postingChannel.create({
   *   data: {
   *     // ... data to create a PostingChannel
   *   }
   * })
   * 
   */
  create<T extends PostingChannelCreateArgs>(args: Prisma.SelectSubset<T, PostingChannelCreateArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PostingChannels.
   * @param {PostingChannelCreateManyArgs} args - Arguments to create many PostingChannels.
   * @example
   * // Create many PostingChannels
   * const postingChannel = await prisma.postingChannel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostingChannelCreateManyArgs>(args?: Prisma.SelectSubset<T, PostingChannelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PostingChannels and returns the data saved in the database.
   * @param {PostingChannelCreateManyAndReturnArgs} args - Arguments to create many PostingChannels.
   * @example
   * // Create many PostingChannels
   * const postingChannel = await prisma.postingChannel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PostingChannels and only return the `userId`
   * const postingChannelWithUserIdOnly = await prisma.postingChannel.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PostingChannelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PostingChannelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PostingChannel.
   * @param {PostingChannelDeleteArgs} args - Arguments to delete one PostingChannel.
   * @example
   * // Delete one PostingChannel
   * const PostingChannel = await prisma.postingChannel.delete({
   *   where: {
   *     // ... filter to delete one PostingChannel
   *   }
   * })
   * 
   */
  delete<T extends PostingChannelDeleteArgs>(args: Prisma.SelectSubset<T, PostingChannelDeleteArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PostingChannel.
   * @param {PostingChannelUpdateArgs} args - Arguments to update one PostingChannel.
   * @example
   * // Update one PostingChannel
   * const postingChannel = await prisma.postingChannel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostingChannelUpdateArgs>(args: Prisma.SelectSubset<T, PostingChannelUpdateArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PostingChannels.
   * @param {PostingChannelDeleteManyArgs} args - Arguments to filter PostingChannels to delete.
   * @example
   * // Delete a few PostingChannels
   * const { count } = await prisma.postingChannel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostingChannelDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostingChannelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostingChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PostingChannels
   * const postingChannel = await prisma.postingChannel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostingChannelUpdateManyArgs>(args: Prisma.SelectSubset<T, PostingChannelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostingChannels and returns the data updated in the database.
   * @param {PostingChannelUpdateManyAndReturnArgs} args - Arguments to update many PostingChannels.
   * @example
   * // Update many PostingChannels
   * const postingChannel = await prisma.postingChannel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PostingChannels and only return the `userId`
   * const postingChannelWithUserIdOnly = await prisma.postingChannel.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PostingChannelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PostingChannelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PostingChannel.
   * @param {PostingChannelUpsertArgs} args - Arguments to update or create a PostingChannel.
   * @example
   * // Update or create a PostingChannel
   * const postingChannel = await prisma.postingChannel.upsert({
   *   create: {
   *     // ... data to create a PostingChannel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PostingChannel we want to update
   *   }
   * })
   */
  upsert<T extends PostingChannelUpsertArgs>(args: Prisma.SelectSubset<T, PostingChannelUpsertArgs<ExtArgs>>): Prisma.Prisma__PostingChannelClient<runtime.Types.Result.GetResult<Prisma.$PostingChannelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PostingChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelCountArgs} args - Arguments to filter PostingChannels to count.
   * @example
   * // Count the number of PostingChannels
   * const count = await prisma.postingChannel.count({
   *   where: {
   *     // ... the filter for the PostingChannels we want to count
   *   }
   * })
  **/
  count<T extends PostingChannelCountArgs>(
    args?: Prisma.Subset<T, PostingChannelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostingChannelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PostingChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostingChannelAggregateArgs>(args: Prisma.Subset<T, PostingChannelAggregateArgs>): Prisma.PrismaPromise<GetPostingChannelAggregateType<T>>

  /**
   * Group by PostingChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostingChannelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostingChannelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostingChannelGroupByArgs['orderBy'] }
      : { orderBy?: PostingChannelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostingChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostingChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PostingChannel model
 */
readonly fields: PostingChannelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PostingChannel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostingChannelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  scheduledSlots<T extends Prisma.PostingChannel$scheduledSlotsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostingChannel$scheduledSlotsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PostingChannel model
 */
export interface PostingChannelFieldRefs {
  readonly userId: Prisma.FieldRef<"PostingChannel", 'String'>
  readonly chatId: Prisma.FieldRef<"PostingChannel", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"PostingChannel", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PostingChannel", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PostingChannel findUnique
 */
export type PostingChannelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter, which PostingChannel to fetch.
   */
  where: Prisma.PostingChannelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel findUniqueOrThrow
 */
export type PostingChannelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter, which PostingChannel to fetch.
   */
  where: Prisma.PostingChannelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel findFirst
 */
export type PostingChannelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter, which PostingChannel to fetch.
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostingChannels to fetch.
   */
  orderBy?: Prisma.PostingChannelOrderByWithRelationInput | Prisma.PostingChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostingChannels.
   */
  cursor?: Prisma.PostingChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostingChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostingChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostingChannels.
   */
  distinct?: Prisma.PostingChannelScalarFieldEnum | Prisma.PostingChannelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel findFirstOrThrow
 */
export type PostingChannelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter, which PostingChannel to fetch.
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostingChannels to fetch.
   */
  orderBy?: Prisma.PostingChannelOrderByWithRelationInput | Prisma.PostingChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostingChannels.
   */
  cursor?: Prisma.PostingChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostingChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostingChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostingChannels.
   */
  distinct?: Prisma.PostingChannelScalarFieldEnum | Prisma.PostingChannelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel findMany
 */
export type PostingChannelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter, which PostingChannels to fetch.
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostingChannels to fetch.
   */
  orderBy?: Prisma.PostingChannelOrderByWithRelationInput | Prisma.PostingChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PostingChannels.
   */
  cursor?: Prisma.PostingChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostingChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostingChannels.
   */
  skip?: number
  distinct?: Prisma.PostingChannelScalarFieldEnum | Prisma.PostingChannelScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel create
 */
export type PostingChannelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * The data needed to create a PostingChannel.
   */
  data: Prisma.XOR<Prisma.PostingChannelCreateInput, Prisma.PostingChannelUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel createMany
 */
export type PostingChannelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PostingChannels.
   */
  data: Prisma.PostingChannelCreateManyInput | Prisma.PostingChannelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PostingChannel createManyAndReturn
 */
export type PostingChannelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * The data used to create many PostingChannels.
   */
  data: Prisma.PostingChannelCreateManyInput | Prisma.PostingChannelCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PostingChannel update
 */
export type PostingChannelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * The data needed to update a PostingChannel.
   */
  data: Prisma.XOR<Prisma.PostingChannelUpdateInput, Prisma.PostingChannelUncheckedUpdateInput>
  /**
   * Choose, which PostingChannel to update.
   */
  where: Prisma.PostingChannelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel updateMany
 */
export type PostingChannelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PostingChannels.
   */
  data: Prisma.XOR<Prisma.PostingChannelUpdateManyMutationInput, Prisma.PostingChannelUncheckedUpdateManyInput>
  /**
   * Filter which PostingChannels to update
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * Limit how many PostingChannels to update.
   */
  limit?: number
}

/**
 * PostingChannel updateManyAndReturn
 */
export type PostingChannelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * The data used to update PostingChannels.
   */
  data: Prisma.XOR<Prisma.PostingChannelUpdateManyMutationInput, Prisma.PostingChannelUncheckedUpdateManyInput>
  /**
   * Filter which PostingChannels to update
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * Limit how many PostingChannels to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PostingChannel upsert
 */
export type PostingChannelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * The filter to search for the PostingChannel to update in case it exists.
   */
  where: Prisma.PostingChannelWhereUniqueInput
  /**
   * In case the PostingChannel found by the `where` argument doesn't exist, create a new PostingChannel with this data.
   */
  create: Prisma.XOR<Prisma.PostingChannelCreateInput, Prisma.PostingChannelUncheckedCreateInput>
  /**
   * In case the PostingChannel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostingChannelUpdateInput, Prisma.PostingChannelUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel delete
 */
export type PostingChannelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
  /**
   * Filter which PostingChannel to delete.
   */
  where: Prisma.PostingChannelWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PostingChannel deleteMany
 */
export type PostingChannelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostingChannels to delete
   */
  where?: Prisma.PostingChannelWhereInput
  /**
   * Limit how many PostingChannels to delete.
   */
  limit?: number
}

/**
 * PostingChannel.scheduledSlots
 */
export type PostingChannel$scheduledSlotsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlot
   */
  select?: Prisma.ScheduledSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlot
   */
  omit?: Prisma.ScheduledSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotInclude<ExtArgs> | null
  where?: Prisma.ScheduledSlotWhereInput
  orderBy?: Prisma.ScheduledSlotOrderByWithRelationInput | Prisma.ScheduledSlotOrderByWithRelationInput[]
  cursor?: Prisma.ScheduledSlotWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScheduledSlotScalarFieldEnum | Prisma.ScheduledSlotScalarFieldEnum[]
}

/**
 * PostingChannel without action
 */
export type PostingChannelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostingChannel
   */
  select?: Prisma.PostingChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostingChannel
   */
  omit?: Prisma.PostingChannelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostingChannelInclude<ExtArgs> | null
}
