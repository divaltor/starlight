
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CollectionShareAuthor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CollectionShareAuthor
 * 
 */
export type CollectionShareAuthorModel = runtime.Types.Result.DefaultSelection<Prisma.$CollectionShareAuthorPayload>

export type AggregateCollectionShareAuthor = {
  _count: CollectionShareAuthorCountAggregateOutputType | null
  _min: CollectionShareAuthorMinAggregateOutputType | null
  _max: CollectionShareAuthorMaxAggregateOutputType | null
}

export type CollectionShareAuthorMinAggregateOutputType = {
  id: string | null
  collectionShareId: string | null
  username: string | null
  createdAt: Date | null
}

export type CollectionShareAuthorMaxAggregateOutputType = {
  id: string | null
  collectionShareId: string | null
  username: string | null
  createdAt: Date | null
}

export type CollectionShareAuthorCountAggregateOutputType = {
  id: number
  collectionShareId: number
  username: number
  createdAt: number
  _all: number
}


export type CollectionShareAuthorMinAggregateInputType = {
  id?: true
  collectionShareId?: true
  username?: true
  createdAt?: true
}

export type CollectionShareAuthorMaxAggregateInputType = {
  id?: true
  collectionShareId?: true
  username?: true
  createdAt?: true
}

export type CollectionShareAuthorCountAggregateInputType = {
  id?: true
  collectionShareId?: true
  username?: true
  createdAt?: true
  _all?: true
}

export type CollectionShareAuthorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShareAuthor to aggregate.
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareAuthors to fetch.
   */
  orderBy?: Prisma.CollectionShareAuthorOrderByWithRelationInput | Prisma.CollectionShareAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CollectionShareAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CollectionShareAuthors
  **/
  _count?: true | CollectionShareAuthorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CollectionShareAuthorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CollectionShareAuthorMaxAggregateInputType
}

export type GetCollectionShareAuthorAggregateType<T extends CollectionShareAuthorAggregateArgs> = {
      [P in keyof T & keyof AggregateCollectionShareAuthor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCollectionShareAuthor[P]>
    : Prisma.GetScalarType<T[P], AggregateCollectionShareAuthor[P]>
}




export type CollectionShareAuthorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CollectionShareAuthorWhereInput
  orderBy?: Prisma.CollectionShareAuthorOrderByWithAggregationInput | Prisma.CollectionShareAuthorOrderByWithAggregationInput[]
  by: Prisma.CollectionShareAuthorScalarFieldEnum[] | Prisma.CollectionShareAuthorScalarFieldEnum
  having?: Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CollectionShareAuthorCountAggregateInputType | true
  _min?: CollectionShareAuthorMinAggregateInputType
  _max?: CollectionShareAuthorMaxAggregateInputType
}

export type CollectionShareAuthorGroupByOutputType = {
  id: string
  collectionShareId: string
  username: string
  createdAt: Date
  _count: CollectionShareAuthorCountAggregateOutputType | null
  _min: CollectionShareAuthorMinAggregateOutputType | null
  _max: CollectionShareAuthorMaxAggregateOutputType | null
}

type GetCollectionShareAuthorGroupByPayload<T extends CollectionShareAuthorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CollectionShareAuthorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CollectionShareAuthorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CollectionShareAuthorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CollectionShareAuthorGroupByOutputType[P]>
      }
    >
  >



export type CollectionShareAuthorWhereInput = {
  AND?: Prisma.CollectionShareAuthorWhereInput | Prisma.CollectionShareAuthorWhereInput[]
  OR?: Prisma.CollectionShareAuthorWhereInput[]
  NOT?: Prisma.CollectionShareAuthorWhereInput | Prisma.CollectionShareAuthorWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShareAuthor"> | string
  collectionShareId?: Prisma.UuidFilter<"CollectionShareAuthor"> | string
  username?: Prisma.StringFilter<"CollectionShareAuthor"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareAuthor"> | Date | string
  collectionShare?: Prisma.XOR<Prisma.CollectionShareScalarRelationFilter, Prisma.CollectionShareWhereInput>
}

export type CollectionShareAuthorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  collectionShare?: Prisma.CollectionShareOrderByWithRelationInput
}

export type CollectionShareAuthorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  collectionShareId_username?: Prisma.CollectionShareAuthorCollectionShareIdUsernameCompoundUniqueInput
  AND?: Prisma.CollectionShareAuthorWhereInput | Prisma.CollectionShareAuthorWhereInput[]
  OR?: Prisma.CollectionShareAuthorWhereInput[]
  NOT?: Prisma.CollectionShareAuthorWhereInput | Prisma.CollectionShareAuthorWhereInput[]
  collectionShareId?: Prisma.UuidFilter<"CollectionShareAuthor"> | string
  username?: Prisma.StringFilter<"CollectionShareAuthor"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareAuthor"> | Date | string
  collectionShare?: Prisma.XOR<Prisma.CollectionShareScalarRelationFilter, Prisma.CollectionShareWhereInput>
}, "id" | "collectionShareId_username">

export type CollectionShareAuthorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.CollectionShareAuthorCountOrderByAggregateInput
  _max?: Prisma.CollectionShareAuthorMaxOrderByAggregateInput
  _min?: Prisma.CollectionShareAuthorMinOrderByAggregateInput
}

export type CollectionShareAuthorScalarWhereWithAggregatesInput = {
  AND?: Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput | Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput[]
  OR?: Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput | Prisma.CollectionShareAuthorScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"CollectionShareAuthor"> | string
  collectionShareId?: Prisma.UuidWithAggregatesFilter<"CollectionShareAuthor"> | string
  username?: Prisma.StringWithAggregatesFilter<"CollectionShareAuthor"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CollectionShareAuthor"> | Date | string
}

export type CollectionShareAuthorCreateInput = {
  id?: string
  username: string
  createdAt?: Date | string
  collectionShare: Prisma.CollectionShareCreateNestedOneWithoutCollectionShareAuthorsInput
}

export type CollectionShareAuthorUncheckedCreateInput = {
  id?: string
  collectionShareId: string
  username: string
  createdAt?: Date | string
}

export type CollectionShareAuthorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  collectionShare?: Prisma.CollectionShareUpdateOneRequiredWithoutCollectionShareAuthorsNestedInput
}

export type CollectionShareAuthorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareAuthorCreateManyInput = {
  id?: string
  collectionShareId: string
  username: string
  createdAt?: Date | string
}

export type CollectionShareAuthorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareAuthorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  collectionShareId?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareAuthorListRelationFilter = {
  every?: Prisma.CollectionShareAuthorWhereInput
  some?: Prisma.CollectionShareAuthorWhereInput
  none?: Prisma.CollectionShareAuthorWhereInput
}

export type CollectionShareAuthorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CollectionShareAuthorCollectionShareIdUsernameCompoundUniqueInput = {
  collectionShareId: string
  username: string
}

export type CollectionShareAuthorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareAuthorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareAuthorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  collectionShareId?: Prisma.SortOrder
  username?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CollectionShareAuthorCreateNestedManyWithoutCollectionShareInput = {
  create?: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput[] | Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareAuthorCreateManyCollectionShareInputEnvelope
  connect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
}

export type CollectionShareAuthorUncheckedCreateNestedManyWithoutCollectionShareInput = {
  create?: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput[] | Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareAuthorCreateManyCollectionShareInputEnvelope
  connect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
}

export type CollectionShareAuthorUpdateManyWithoutCollectionShareNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput[] | Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput[]
  upsert?: Prisma.CollectionShareAuthorUpsertWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpsertWithWhereUniqueWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareAuthorCreateManyCollectionShareInputEnvelope
  set?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  delete?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  connect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  update?: Prisma.CollectionShareAuthorUpdateWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpdateWithWhereUniqueWithoutCollectionShareInput[]
  updateMany?: Prisma.CollectionShareAuthorUpdateManyWithWhereWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpdateManyWithWhereWithoutCollectionShareInput[]
  deleteMany?: Prisma.CollectionShareAuthorScalarWhereInput | Prisma.CollectionShareAuthorScalarWhereInput[]
}

export type CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput> | Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput[] | Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput[]
  connectOrCreate?: Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput | Prisma.CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput[]
  upsert?: Prisma.CollectionShareAuthorUpsertWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpsertWithWhereUniqueWithoutCollectionShareInput[]
  createMany?: Prisma.CollectionShareAuthorCreateManyCollectionShareInputEnvelope
  set?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  delete?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  connect?: Prisma.CollectionShareAuthorWhereUniqueInput | Prisma.CollectionShareAuthorWhereUniqueInput[]
  update?: Prisma.CollectionShareAuthorUpdateWithWhereUniqueWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpdateWithWhereUniqueWithoutCollectionShareInput[]
  updateMany?: Prisma.CollectionShareAuthorUpdateManyWithWhereWithoutCollectionShareInput | Prisma.CollectionShareAuthorUpdateManyWithWhereWithoutCollectionShareInput[]
  deleteMany?: Prisma.CollectionShareAuthorScalarWhereInput | Prisma.CollectionShareAuthorScalarWhereInput[]
}

export type CollectionShareAuthorCreateWithoutCollectionShareInput = {
  id?: string
  username: string
  createdAt?: Date | string
}

export type CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput = {
  id?: string
  username: string
  createdAt?: Date | string
}

export type CollectionShareAuthorCreateOrConnectWithoutCollectionShareInput = {
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput>
}

export type CollectionShareAuthorCreateManyCollectionShareInputEnvelope = {
  data: Prisma.CollectionShareAuthorCreateManyCollectionShareInput | Prisma.CollectionShareAuthorCreateManyCollectionShareInput[]
  skipDuplicates?: boolean
}

export type CollectionShareAuthorUpsertWithWhereUniqueWithoutCollectionShareInput = {
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  update: Prisma.XOR<Prisma.CollectionShareAuthorUpdateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedUpdateWithoutCollectionShareInput>
  create: Prisma.XOR<Prisma.CollectionShareAuthorCreateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedCreateWithoutCollectionShareInput>
}

export type CollectionShareAuthorUpdateWithWhereUniqueWithoutCollectionShareInput = {
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  data: Prisma.XOR<Prisma.CollectionShareAuthorUpdateWithoutCollectionShareInput, Prisma.CollectionShareAuthorUncheckedUpdateWithoutCollectionShareInput>
}

export type CollectionShareAuthorUpdateManyWithWhereWithoutCollectionShareInput = {
  where: Prisma.CollectionShareAuthorScalarWhereInput
  data: Prisma.XOR<Prisma.CollectionShareAuthorUpdateManyMutationInput, Prisma.CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareInput>
}

export type CollectionShareAuthorScalarWhereInput = {
  AND?: Prisma.CollectionShareAuthorScalarWhereInput | Prisma.CollectionShareAuthorScalarWhereInput[]
  OR?: Prisma.CollectionShareAuthorScalarWhereInput[]
  NOT?: Prisma.CollectionShareAuthorScalarWhereInput | Prisma.CollectionShareAuthorScalarWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShareAuthor"> | string
  collectionShareId?: Prisma.UuidFilter<"CollectionShareAuthor"> | string
  username?: Prisma.StringFilter<"CollectionShareAuthor"> | string
  createdAt?: Prisma.DateTimeFilter<"CollectionShareAuthor"> | Date | string
}

export type CollectionShareAuthorCreateManyCollectionShareInput = {
  id?: string
  username: string
  createdAt?: Date | string
}

export type CollectionShareAuthorUpdateWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareAuthorUncheckedUpdateWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CollectionShareAuthorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  username?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareAuthor"]>

export type CollectionShareAuthorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  username?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareAuthor"]>

export type CollectionShareAuthorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  collectionShareId?: boolean
  username?: boolean
  createdAt?: boolean
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShareAuthor"]>

export type CollectionShareAuthorSelectScalar = {
  id?: boolean
  collectionShareId?: boolean
  username?: boolean
  createdAt?: boolean
}

export type CollectionShareAuthorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "collectionShareId" | "username" | "createdAt", ExtArgs["result"]["collectionShareAuthor"]>
export type CollectionShareAuthorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}
export type CollectionShareAuthorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}
export type CollectionShareAuthorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShare?: boolean | Prisma.CollectionShareDefaultArgs<ExtArgs>
}

export type $CollectionShareAuthorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CollectionShareAuthor"
  objects: {
    collectionShare: Prisma.$CollectionSharePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    collectionShareId: string
    username: string
    createdAt: Date
  }, ExtArgs["result"]["collectionShareAuthor"]>
  composites: {}
}

export type CollectionShareAuthorGetPayload<S extends boolean | null | undefined | CollectionShareAuthorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload, S>

export type CollectionShareAuthorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CollectionShareAuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: CollectionShareAuthorCountAggregateInputType | true
  }

export interface CollectionShareAuthorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionShareAuthor'], meta: { name: 'CollectionShareAuthor' } }
  /**
   * Find zero or one CollectionShareAuthor that matches the filter.
   * @param {CollectionShareAuthorFindUniqueArgs} args - Arguments to find a CollectionShareAuthor
   * @example
   * // Get one CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CollectionShareAuthorFindUniqueArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CollectionShareAuthor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CollectionShareAuthorFindUniqueOrThrowArgs} args - Arguments to find a CollectionShareAuthor
   * @example
   * // Get one CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CollectionShareAuthorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShareAuthor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorFindFirstArgs} args - Arguments to find a CollectionShareAuthor
   * @example
   * // Get one CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CollectionShareAuthorFindFirstArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorFindFirstArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShareAuthor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorFindFirstOrThrowArgs} args - Arguments to find a CollectionShareAuthor
   * @example
   * // Get one CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CollectionShareAuthorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CollectionShareAuthors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CollectionShareAuthors
   * const collectionShareAuthors = await prisma.collectionShareAuthor.findMany()
   * 
   * // Get first 10 CollectionShareAuthors
   * const collectionShareAuthors = await prisma.collectionShareAuthor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const collectionShareAuthorWithIdOnly = await prisma.collectionShareAuthor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CollectionShareAuthorFindManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CollectionShareAuthor.
   * @param {CollectionShareAuthorCreateArgs} args - Arguments to create a CollectionShareAuthor.
   * @example
   * // Create one CollectionShareAuthor
   * const CollectionShareAuthor = await prisma.collectionShareAuthor.create({
   *   data: {
   *     // ... data to create a CollectionShareAuthor
   *   }
   * })
   * 
   */
  create<T extends CollectionShareAuthorCreateArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorCreateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CollectionShareAuthors.
   * @param {CollectionShareAuthorCreateManyArgs} args - Arguments to create many CollectionShareAuthors.
   * @example
   * // Create many CollectionShareAuthors
   * const collectionShareAuthor = await prisma.collectionShareAuthor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CollectionShareAuthorCreateManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CollectionShareAuthors and returns the data saved in the database.
   * @param {CollectionShareAuthorCreateManyAndReturnArgs} args - Arguments to create many CollectionShareAuthors.
   * @example
   * // Create many CollectionShareAuthors
   * const collectionShareAuthor = await prisma.collectionShareAuthor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CollectionShareAuthors and only return the `id`
   * const collectionShareAuthorWithIdOnly = await prisma.collectionShareAuthor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CollectionShareAuthorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CollectionShareAuthor.
   * @param {CollectionShareAuthorDeleteArgs} args - Arguments to delete one CollectionShareAuthor.
   * @example
   * // Delete one CollectionShareAuthor
   * const CollectionShareAuthor = await prisma.collectionShareAuthor.delete({
   *   where: {
   *     // ... filter to delete one CollectionShareAuthor
   *   }
   * })
   * 
   */
  delete<T extends CollectionShareAuthorDeleteArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorDeleteArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CollectionShareAuthor.
   * @param {CollectionShareAuthorUpdateArgs} args - Arguments to update one CollectionShareAuthor.
   * @example
   * // Update one CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CollectionShareAuthorUpdateArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorUpdateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CollectionShareAuthors.
   * @param {CollectionShareAuthorDeleteManyArgs} args - Arguments to filter CollectionShareAuthors to delete.
   * @example
   * // Delete a few CollectionShareAuthors
   * const { count } = await prisma.collectionShareAuthor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CollectionShareAuthorDeleteManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareAuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShareAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CollectionShareAuthors
   * const collectionShareAuthor = await prisma.collectionShareAuthor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CollectionShareAuthorUpdateManyArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShareAuthors and returns the data updated in the database.
   * @param {CollectionShareAuthorUpdateManyAndReturnArgs} args - Arguments to update many CollectionShareAuthors.
   * @example
   * // Update many CollectionShareAuthors
   * const collectionShareAuthor = await prisma.collectionShareAuthor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CollectionShareAuthors and only return the `id`
   * const collectionShareAuthorWithIdOnly = await prisma.collectionShareAuthor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CollectionShareAuthorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CollectionShareAuthor.
   * @param {CollectionShareAuthorUpsertArgs} args - Arguments to update or create a CollectionShareAuthor.
   * @example
   * // Update or create a CollectionShareAuthor
   * const collectionShareAuthor = await prisma.collectionShareAuthor.upsert({
   *   create: {
   *     // ... data to create a CollectionShareAuthor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CollectionShareAuthor we want to update
   *   }
   * })
   */
  upsert<T extends CollectionShareAuthorUpsertArgs>(args: Prisma.SelectSubset<T, CollectionShareAuthorUpsertArgs<ExtArgs>>): Prisma.Prisma__CollectionShareAuthorClient<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CollectionShareAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorCountArgs} args - Arguments to filter CollectionShareAuthors to count.
   * @example
   * // Count the number of CollectionShareAuthors
   * const count = await prisma.collectionShareAuthor.count({
   *   where: {
   *     // ... the filter for the CollectionShareAuthors we want to count
   *   }
   * })
  **/
  count<T extends CollectionShareAuthorCountArgs>(
    args?: Prisma.Subset<T, CollectionShareAuthorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CollectionShareAuthorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CollectionShareAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CollectionShareAuthorAggregateArgs>(args: Prisma.Subset<T, CollectionShareAuthorAggregateArgs>): Prisma.PrismaPromise<GetCollectionShareAuthorAggregateType<T>>

  /**
   * Group by CollectionShareAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAuthorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CollectionShareAuthorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CollectionShareAuthorGroupByArgs['orderBy'] }
      : { orderBy?: CollectionShareAuthorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CollectionShareAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionShareAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CollectionShareAuthor model
 */
readonly fields: CollectionShareAuthorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CollectionShareAuthor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CollectionShareAuthorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  collectionShare<T extends Prisma.CollectionShareDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CollectionShareDefaultArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CollectionShareAuthor model
 */
export interface CollectionShareAuthorFieldRefs {
  readonly id: Prisma.FieldRef<"CollectionShareAuthor", 'String'>
  readonly collectionShareId: Prisma.FieldRef<"CollectionShareAuthor", 'String'>
  readonly username: Prisma.FieldRef<"CollectionShareAuthor", 'String'>
  readonly createdAt: Prisma.FieldRef<"CollectionShareAuthor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CollectionShareAuthor findUnique
 */
export type CollectionShareAuthorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareAuthor to fetch.
   */
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor findUniqueOrThrow
 */
export type CollectionShareAuthorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareAuthor to fetch.
   */
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor findFirst
 */
export type CollectionShareAuthorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareAuthor to fetch.
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareAuthors to fetch.
   */
  orderBy?: Prisma.CollectionShareAuthorOrderByWithRelationInput | Prisma.CollectionShareAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShareAuthors.
   */
  cursor?: Prisma.CollectionShareAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShareAuthors.
   */
  distinct?: Prisma.CollectionShareAuthorScalarFieldEnum | Prisma.CollectionShareAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor findFirstOrThrow
 */
export type CollectionShareAuthorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareAuthor to fetch.
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareAuthors to fetch.
   */
  orderBy?: Prisma.CollectionShareAuthorOrderByWithRelationInput | Prisma.CollectionShareAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShareAuthors.
   */
  cursor?: Prisma.CollectionShareAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShareAuthors.
   */
  distinct?: Prisma.CollectionShareAuthorScalarFieldEnum | Prisma.CollectionShareAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor findMany
 */
export type CollectionShareAuthorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShareAuthors to fetch.
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShareAuthors to fetch.
   */
  orderBy?: Prisma.CollectionShareAuthorOrderByWithRelationInput | Prisma.CollectionShareAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CollectionShareAuthors.
   */
  cursor?: Prisma.CollectionShareAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShareAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShareAuthors.
   */
  skip?: number
  distinct?: Prisma.CollectionShareAuthorScalarFieldEnum | Prisma.CollectionShareAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor create
 */
export type CollectionShareAuthorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * The data needed to create a CollectionShareAuthor.
   */
  data: Prisma.XOR<Prisma.CollectionShareAuthorCreateInput, Prisma.CollectionShareAuthorUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor createMany
 */
export type CollectionShareAuthorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CollectionShareAuthors.
   */
  data: Prisma.CollectionShareAuthorCreateManyInput | Prisma.CollectionShareAuthorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CollectionShareAuthor createManyAndReturn
 */
export type CollectionShareAuthorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * The data used to create many CollectionShareAuthors.
   */
  data: Prisma.CollectionShareAuthorCreateManyInput | Prisma.CollectionShareAuthorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShareAuthor update
 */
export type CollectionShareAuthorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * The data needed to update a CollectionShareAuthor.
   */
  data: Prisma.XOR<Prisma.CollectionShareAuthorUpdateInput, Prisma.CollectionShareAuthorUncheckedUpdateInput>
  /**
   * Choose, which CollectionShareAuthor to update.
   */
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor updateMany
 */
export type CollectionShareAuthorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CollectionShareAuthors.
   */
  data: Prisma.XOR<Prisma.CollectionShareAuthorUpdateManyMutationInput, Prisma.CollectionShareAuthorUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShareAuthors to update
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * Limit how many CollectionShareAuthors to update.
   */
  limit?: number
}

/**
 * CollectionShareAuthor updateManyAndReturn
 */
export type CollectionShareAuthorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * The data used to update CollectionShareAuthors.
   */
  data: Prisma.XOR<Prisma.CollectionShareAuthorUpdateManyMutationInput, Prisma.CollectionShareAuthorUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShareAuthors to update
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * Limit how many CollectionShareAuthors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShareAuthor upsert
 */
export type CollectionShareAuthorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * The filter to search for the CollectionShareAuthor to update in case it exists.
   */
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  /**
   * In case the CollectionShareAuthor found by the `where` argument doesn't exist, create a new CollectionShareAuthor with this data.
   */
  create: Prisma.XOR<Prisma.CollectionShareAuthorCreateInput, Prisma.CollectionShareAuthorUncheckedCreateInput>
  /**
   * In case the CollectionShareAuthor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CollectionShareAuthorUpdateInput, Prisma.CollectionShareAuthorUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor delete
 */
export type CollectionShareAuthorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  /**
   * Filter which CollectionShareAuthor to delete.
   */
  where: Prisma.CollectionShareAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShareAuthor deleteMany
 */
export type CollectionShareAuthorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShareAuthors to delete
   */
  where?: Prisma.CollectionShareAuthorWhereInput
  /**
   * Limit how many CollectionShareAuthors to delete.
   */
  limit?: number
}

/**
 * CollectionShareAuthor without action
 */
export type CollectionShareAuthorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
}
