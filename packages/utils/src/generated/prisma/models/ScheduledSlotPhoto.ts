
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ScheduledSlotPhoto` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ScheduledSlotPhoto
 * 
 */
export type ScheduledSlotPhotoModel = runtime.Types.Result.DefaultSelection<Prisma.$ScheduledSlotPhotoPayload>

export type AggregateScheduledSlotPhoto = {
  _count: ScheduledSlotPhotoCountAggregateOutputType | null
  _min: ScheduledSlotPhotoMinAggregateOutputType | null
  _max: ScheduledSlotPhotoMaxAggregateOutputType | null
}

export type ScheduledSlotPhotoMinAggregateOutputType = {
  id: string | null
  scheduledSlotTweetId: string | null
  photoId: string | null
  userId: string | null
  createdAt: Date | null
}

export type ScheduledSlotPhotoMaxAggregateOutputType = {
  id: string | null
  scheduledSlotTweetId: string | null
  photoId: string | null
  userId: string | null
  createdAt: Date | null
}

export type ScheduledSlotPhotoCountAggregateOutputType = {
  id: number
  scheduledSlotTweetId: number
  photoId: number
  userId: number
  createdAt: number
  _all: number
}


export type ScheduledSlotPhotoMinAggregateInputType = {
  id?: true
  scheduledSlotTweetId?: true
  photoId?: true
  userId?: true
  createdAt?: true
}

export type ScheduledSlotPhotoMaxAggregateInputType = {
  id?: true
  scheduledSlotTweetId?: true
  photoId?: true
  userId?: true
  createdAt?: true
}

export type ScheduledSlotPhotoCountAggregateInputType = {
  id?: true
  scheduledSlotTweetId?: true
  photoId?: true
  userId?: true
  createdAt?: true
  _all?: true
}

export type ScheduledSlotPhotoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScheduledSlotPhoto to aggregate.
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotPhotos to fetch.
   */
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithRelationInput | Prisma.ScheduledSlotPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScheduledSlotPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ScheduledSlotPhotos
  **/
  _count?: true | ScheduledSlotPhotoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScheduledSlotPhotoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScheduledSlotPhotoMaxAggregateInputType
}

export type GetScheduledSlotPhotoAggregateType<T extends ScheduledSlotPhotoAggregateArgs> = {
      [P in keyof T & keyof AggregateScheduledSlotPhoto]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScheduledSlotPhoto[P]>
    : Prisma.GetScalarType<T[P], AggregateScheduledSlotPhoto[P]>
}




export type ScheduledSlotPhotoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduledSlotPhotoWhereInput
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithAggregationInput | Prisma.ScheduledSlotPhotoOrderByWithAggregationInput[]
  by: Prisma.ScheduledSlotPhotoScalarFieldEnum[] | Prisma.ScheduledSlotPhotoScalarFieldEnum
  having?: Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScheduledSlotPhotoCountAggregateInputType | true
  _min?: ScheduledSlotPhotoMinAggregateInputType
  _max?: ScheduledSlotPhotoMaxAggregateInputType
}

export type ScheduledSlotPhotoGroupByOutputType = {
  id: string
  scheduledSlotTweetId: string
  photoId: string
  userId: string
  createdAt: Date
  _count: ScheduledSlotPhotoCountAggregateOutputType | null
  _min: ScheduledSlotPhotoMinAggregateOutputType | null
  _max: ScheduledSlotPhotoMaxAggregateOutputType | null
}

type GetScheduledSlotPhotoGroupByPayload<T extends ScheduledSlotPhotoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScheduledSlotPhotoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScheduledSlotPhotoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScheduledSlotPhotoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScheduledSlotPhotoGroupByOutputType[P]>
      }
    >
  >



export type ScheduledSlotPhotoWhereInput = {
  AND?: Prisma.ScheduledSlotPhotoWhereInput | Prisma.ScheduledSlotPhotoWhereInput[]
  OR?: Prisma.ScheduledSlotPhotoWhereInput[]
  NOT?: Prisma.ScheduledSlotPhotoWhereInput | Prisma.ScheduledSlotPhotoWhereInput[]
  id?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  scheduledSlotTweetId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  photoId?: Prisma.StringFilter<"ScheduledSlotPhoto"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotPhoto"> | Date | string
  scheduledSlotTweet?: Prisma.XOR<Prisma.ScheduledSlotTweetScalarRelationFilter, Prisma.ScheduledSlotTweetWhereInput>
  photo?: Prisma.XOR<Prisma.PhotoScalarRelationFilter, Prisma.PhotoWhereInput>
}

export type ScheduledSlotPhotoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  scheduledSlotTweetId?: Prisma.SortOrder
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  scheduledSlotTweet?: Prisma.ScheduledSlotTweetOrderByWithRelationInput
  photo?: Prisma.PhotoOrderByWithRelationInput
}

export type ScheduledSlotPhotoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  scheduledSlotTweetId_photoId_userId?: Prisma.ScheduledSlotPhotoScheduledSlotTweetIdPhotoIdUserIdCompoundUniqueInput
  AND?: Prisma.ScheduledSlotPhotoWhereInput | Prisma.ScheduledSlotPhotoWhereInput[]
  OR?: Prisma.ScheduledSlotPhotoWhereInput[]
  NOT?: Prisma.ScheduledSlotPhotoWhereInput | Prisma.ScheduledSlotPhotoWhereInput[]
  scheduledSlotTweetId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  photoId?: Prisma.StringFilter<"ScheduledSlotPhoto"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotPhoto"> | Date | string
  scheduledSlotTweet?: Prisma.XOR<Prisma.ScheduledSlotTweetScalarRelationFilter, Prisma.ScheduledSlotTweetWhereInput>
  photo?: Prisma.XOR<Prisma.PhotoScalarRelationFilter, Prisma.PhotoWhereInput>
}, "id" | "scheduledSlotTweetId_photoId_userId">

export type ScheduledSlotPhotoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  scheduledSlotTweetId?: Prisma.SortOrder
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ScheduledSlotPhotoCountOrderByAggregateInput
  _max?: Prisma.ScheduledSlotPhotoMaxOrderByAggregateInput
  _min?: Prisma.ScheduledSlotPhotoMinOrderByAggregateInput
}

export type ScheduledSlotPhotoScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput | Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput | Prisma.ScheduledSlotPhotoScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotPhoto"> | string
  scheduledSlotTweetId?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotPhoto"> | string
  photoId?: Prisma.StringWithAggregatesFilter<"ScheduledSlotPhoto"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotPhoto"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ScheduledSlotPhoto"> | Date | string
}

export type ScheduledSlotPhotoCreateInput = {
  id?: string
  createdAt?: Date | string
  scheduledSlotTweet: Prisma.ScheduledSlotTweetCreateNestedOneWithoutScheduledSlotPhotosInput
  photo: Prisma.PhotoCreateNestedOneWithoutScheduledSlotPhotosInput
}

export type ScheduledSlotPhotoUncheckedCreateInput = {
  id?: string
  scheduledSlotTweetId: string
  photoId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlotTweet?: Prisma.ScheduledSlotTweetUpdateOneRequiredWithoutScheduledSlotPhotosNestedInput
  photo?: Prisma.PhotoUpdateOneRequiredWithoutScheduledSlotPhotosNestedInput
}

export type ScheduledSlotPhotoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotTweetId?: Prisma.StringFieldUpdateOperationsInput | string
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoCreateManyInput = {
  id?: string
  scheduledSlotTweetId: string
  photoId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotTweetId?: Prisma.StringFieldUpdateOperationsInput | string
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoListRelationFilter = {
  every?: Prisma.ScheduledSlotPhotoWhereInput
  some?: Prisma.ScheduledSlotPhotoWhereInput
  none?: Prisma.ScheduledSlotPhotoWhereInput
}

export type ScheduledSlotPhotoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScheduledSlotPhotoScheduledSlotTweetIdPhotoIdUserIdCompoundUniqueInput = {
  scheduledSlotTweetId: string
  photoId: string
  userId: string
}

export type ScheduledSlotPhotoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotTweetId?: Prisma.SortOrder
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotPhotoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotTweetId?: Prisma.SortOrder
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotPhotoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotTweetId?: Prisma.SortOrder
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotPhotoCreateNestedManyWithoutPhotoInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput> | Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyPhotoInputEnvelope
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
}

export type ScheduledSlotPhotoUncheckedCreateNestedManyWithoutPhotoInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput> | Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyPhotoInputEnvelope
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
}

export type ScheduledSlotPhotoUpdateManyWithoutPhotoNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput> | Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput[]
  upsert?: Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutPhotoInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyPhotoInputEnvelope
  set?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  update?: Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutPhotoInput[]
  updateMany?: Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutPhotoInput[]
  deleteMany?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
}

export type ScheduledSlotPhotoUncheckedUpdateManyWithoutPhotoNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput> | Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput[]
  upsert?: Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutPhotoInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyPhotoInputEnvelope
  set?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  update?: Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutPhotoInput[]
  updateMany?: Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutPhotoInput | Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutPhotoInput[]
  deleteMany?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
}

export type ScheduledSlotPhotoCreateNestedManyWithoutScheduledSlotTweetInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput> | Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInputEnvelope
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
}

export type ScheduledSlotPhotoUncheckedCreateNestedManyWithoutScheduledSlotTweetInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput> | Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInputEnvelope
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
}

export type ScheduledSlotPhotoUpdateManyWithoutScheduledSlotTweetNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput> | Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput[]
  upsert?: Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutScheduledSlotTweetInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInputEnvelope
  set?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  update?: Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutScheduledSlotTweetInput[]
  updateMany?: Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutScheduledSlotTweetInput[]
  deleteMany?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
}

export type ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput> | Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput[] | Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput[]
  upsert?: Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpsertWithWhereUniqueWithoutScheduledSlotTweetInput[]
  createMany?: Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInputEnvelope
  set?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotPhotoWhereUniqueInput | Prisma.ScheduledSlotPhotoWhereUniqueInput[]
  update?: Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpdateWithWhereUniqueWithoutScheduledSlotTweetInput[]
  updateMany?: Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoUpdateManyWithWhereWithoutScheduledSlotTweetInput[]
  deleteMany?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
}

export type ScheduledSlotPhotoCreateWithoutPhotoInput = {
  id?: string
  createdAt?: Date | string
  scheduledSlotTweet: Prisma.ScheduledSlotTweetCreateNestedOneWithoutScheduledSlotPhotosInput
}

export type ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput = {
  id?: string
  scheduledSlotTweetId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoCreateOrConnectWithoutPhotoInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput>
}

export type ScheduledSlotPhotoCreateManyPhotoInputEnvelope = {
  data: Prisma.ScheduledSlotPhotoCreateManyPhotoInput | Prisma.ScheduledSlotPhotoCreateManyPhotoInput[]
  skipDuplicates?: boolean
}

export type ScheduledSlotPhotoUpsertWithWhereUniqueWithoutPhotoInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedUpdateWithoutPhotoInput>
  create: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutPhotoInput>
}

export type ScheduledSlotPhotoUpdateWithWhereUniqueWithoutPhotoInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateWithoutPhotoInput, Prisma.ScheduledSlotPhotoUncheckedUpdateWithoutPhotoInput>
}

export type ScheduledSlotPhotoUpdateManyWithWhereWithoutPhotoInput = {
  where: Prisma.ScheduledSlotPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateManyMutationInput, Prisma.ScheduledSlotPhotoUncheckedUpdateManyWithoutPhotoInput>
}

export type ScheduledSlotPhotoScalarWhereInput = {
  AND?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
  OR?: Prisma.ScheduledSlotPhotoScalarWhereInput[]
  NOT?: Prisma.ScheduledSlotPhotoScalarWhereInput | Prisma.ScheduledSlotPhotoScalarWhereInput[]
  id?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  scheduledSlotTweetId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  photoId?: Prisma.StringFilter<"ScheduledSlotPhoto"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotPhoto"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotPhoto"> | Date | string
}

export type ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput = {
  id?: string
  createdAt?: Date | string
  photo: Prisma.PhotoCreateNestedOneWithoutScheduledSlotPhotosInput
}

export type ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput = {
  id?: string
  photoId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoCreateOrConnectWithoutScheduledSlotTweetInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput>
}

export type ScheduledSlotPhotoCreateManyScheduledSlotTweetInputEnvelope = {
  data: Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInput | Prisma.ScheduledSlotPhotoCreateManyScheduledSlotTweetInput[]
  skipDuplicates?: boolean
}

export type ScheduledSlotPhotoUpsertWithWhereUniqueWithoutScheduledSlotTweetInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedUpdateWithoutScheduledSlotTweetInput>
  create: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedCreateWithoutScheduledSlotTweetInput>
}

export type ScheduledSlotPhotoUpdateWithWhereUniqueWithoutScheduledSlotTweetInput = {
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateWithoutScheduledSlotTweetInput, Prisma.ScheduledSlotPhotoUncheckedUpdateWithoutScheduledSlotTweetInput>
}

export type ScheduledSlotPhotoUpdateManyWithWhereWithoutScheduledSlotTweetInput = {
  where: Prisma.ScheduledSlotPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateManyMutationInput, Prisma.ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetInput>
}

export type ScheduledSlotPhotoCreateManyPhotoInput = {
  id?: string
  scheduledSlotTweetId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoUpdateWithoutPhotoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlotTweet?: Prisma.ScheduledSlotTweetUpdateOneRequiredWithoutScheduledSlotPhotosNestedInput
}

export type ScheduledSlotPhotoUncheckedUpdateWithoutPhotoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotTweetId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoUncheckedUpdateManyWithoutPhotoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotTweetId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoCreateManyScheduledSlotTweetInput = {
  id?: string
  photoId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotPhotoUpdateWithoutScheduledSlotTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  photo?: Prisma.PhotoUpdateOneRequiredWithoutScheduledSlotPhotosNestedInput
}

export type ScheduledSlotPhotoUncheckedUpdateWithoutScheduledSlotTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ScheduledSlotPhotoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotTweetId?: boolean
  photoId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotPhoto"]>

export type ScheduledSlotPhotoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotTweetId?: boolean
  photoId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotPhoto"]>

export type ScheduledSlotPhotoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotTweetId?: boolean
  photoId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotPhoto"]>

export type ScheduledSlotPhotoSelectScalar = {
  id?: boolean
  scheduledSlotTweetId?: boolean
  photoId?: boolean
  userId?: boolean
  createdAt?: boolean
}

export type ScheduledSlotPhotoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "scheduledSlotTweetId" | "photoId" | "userId" | "createdAt", ExtArgs["result"]["scheduledSlotPhoto"]>
export type ScheduledSlotPhotoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}
export type ScheduledSlotPhotoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}
export type ScheduledSlotPhotoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlotTweet?: boolean | Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
}

export type $ScheduledSlotPhotoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ScheduledSlotPhoto"
  objects: {
    scheduledSlotTweet: Prisma.$ScheduledSlotTweetPayload<ExtArgs>
    photo: Prisma.$PhotoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    scheduledSlotTweetId: string
    photoId: string
    userId: string
    createdAt: Date
  }, ExtArgs["result"]["scheduledSlotPhoto"]>
  composites: {}
}

export type ScheduledSlotPhotoGetPayload<S extends boolean | null | undefined | ScheduledSlotPhotoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload, S>

export type ScheduledSlotPhotoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScheduledSlotPhotoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ScheduledSlotPhotoCountAggregateInputType | true
  }

export interface ScheduledSlotPhotoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledSlotPhoto'], meta: { name: 'ScheduledSlotPhoto' } }
  /**
   * Find zero or one ScheduledSlotPhoto that matches the filter.
   * @param {ScheduledSlotPhotoFindUniqueArgs} args - Arguments to find a ScheduledSlotPhoto
   * @example
   * // Get one ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduledSlotPhotoFindUniqueArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ScheduledSlotPhoto that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduledSlotPhotoFindUniqueOrThrowArgs} args - Arguments to find a ScheduledSlotPhoto
   * @example
   * // Get one ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduledSlotPhotoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScheduledSlotPhoto that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoFindFirstArgs} args - Arguments to find a ScheduledSlotPhoto
   * @example
   * // Get one ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduledSlotPhotoFindFirstArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScheduledSlotPhoto that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoFindFirstOrThrowArgs} args - Arguments to find a ScheduledSlotPhoto
   * @example
   * // Get one ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduledSlotPhotoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ScheduledSlotPhotos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ScheduledSlotPhotos
   * const scheduledSlotPhotos = await prisma.scheduledSlotPhoto.findMany()
   * 
   * // Get first 10 ScheduledSlotPhotos
   * const scheduledSlotPhotos = await prisma.scheduledSlotPhoto.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scheduledSlotPhotoWithIdOnly = await prisma.scheduledSlotPhoto.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScheduledSlotPhotoFindManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ScheduledSlotPhoto.
   * @param {ScheduledSlotPhotoCreateArgs} args - Arguments to create a ScheduledSlotPhoto.
   * @example
   * // Create one ScheduledSlotPhoto
   * const ScheduledSlotPhoto = await prisma.scheduledSlotPhoto.create({
   *   data: {
   *     // ... data to create a ScheduledSlotPhoto
   *   }
   * })
   * 
   */
  create<T extends ScheduledSlotPhotoCreateArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoCreateArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ScheduledSlotPhotos.
   * @param {ScheduledSlotPhotoCreateManyArgs} args - Arguments to create many ScheduledSlotPhotos.
   * @example
   * // Create many ScheduledSlotPhotos
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScheduledSlotPhotoCreateManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ScheduledSlotPhotos and returns the data saved in the database.
   * @param {ScheduledSlotPhotoCreateManyAndReturnArgs} args - Arguments to create many ScheduledSlotPhotos.
   * @example
   * // Create many ScheduledSlotPhotos
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ScheduledSlotPhotos and only return the `id`
   * const scheduledSlotPhotoWithIdOnly = await prisma.scheduledSlotPhoto.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScheduledSlotPhotoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ScheduledSlotPhoto.
   * @param {ScheduledSlotPhotoDeleteArgs} args - Arguments to delete one ScheduledSlotPhoto.
   * @example
   * // Delete one ScheduledSlotPhoto
   * const ScheduledSlotPhoto = await prisma.scheduledSlotPhoto.delete({
   *   where: {
   *     // ... filter to delete one ScheduledSlotPhoto
   *   }
   * })
   * 
   */
  delete<T extends ScheduledSlotPhotoDeleteArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoDeleteArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ScheduledSlotPhoto.
   * @param {ScheduledSlotPhotoUpdateArgs} args - Arguments to update one ScheduledSlotPhoto.
   * @example
   * // Update one ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScheduledSlotPhotoUpdateArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoUpdateArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ScheduledSlotPhotos.
   * @param {ScheduledSlotPhotoDeleteManyArgs} args - Arguments to filter ScheduledSlotPhotos to delete.
   * @example
   * // Delete a few ScheduledSlotPhotos
   * const { count } = await prisma.scheduledSlotPhoto.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScheduledSlotPhotoDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotPhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScheduledSlotPhotos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ScheduledSlotPhotos
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScheduledSlotPhotoUpdateManyArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScheduledSlotPhotos and returns the data updated in the database.
   * @param {ScheduledSlotPhotoUpdateManyAndReturnArgs} args - Arguments to update many ScheduledSlotPhotos.
   * @example
   * // Update many ScheduledSlotPhotos
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ScheduledSlotPhotos and only return the `id`
   * const scheduledSlotPhotoWithIdOnly = await prisma.scheduledSlotPhoto.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScheduledSlotPhotoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ScheduledSlotPhoto.
   * @param {ScheduledSlotPhotoUpsertArgs} args - Arguments to update or create a ScheduledSlotPhoto.
   * @example
   * // Update or create a ScheduledSlotPhoto
   * const scheduledSlotPhoto = await prisma.scheduledSlotPhoto.upsert({
   *   create: {
   *     // ... data to create a ScheduledSlotPhoto
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ScheduledSlotPhoto we want to update
   *   }
   * })
   */
  upsert<T extends ScheduledSlotPhotoUpsertArgs>(args: Prisma.SelectSubset<T, ScheduledSlotPhotoUpsertArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotPhotoClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ScheduledSlotPhotos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoCountArgs} args - Arguments to filter ScheduledSlotPhotos to count.
   * @example
   * // Count the number of ScheduledSlotPhotos
   * const count = await prisma.scheduledSlotPhoto.count({
   *   where: {
   *     // ... the filter for the ScheduledSlotPhotos we want to count
   *   }
   * })
  **/
  count<T extends ScheduledSlotPhotoCountArgs>(
    args?: Prisma.Subset<T, ScheduledSlotPhotoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScheduledSlotPhotoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ScheduledSlotPhoto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScheduledSlotPhotoAggregateArgs>(args: Prisma.Subset<T, ScheduledSlotPhotoAggregateArgs>): Prisma.PrismaPromise<GetScheduledSlotPhotoAggregateType<T>>

  /**
   * Group by ScheduledSlotPhoto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotPhotoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScheduledSlotPhotoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduledSlotPhotoGroupByArgs['orderBy'] }
      : { orderBy?: ScheduledSlotPhotoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScheduledSlotPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledSlotPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ScheduledSlotPhoto model
 */
readonly fields: ScheduledSlotPhotoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ScheduledSlotPhoto.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduledSlotPhotoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  scheduledSlotTweet<T extends Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ScheduledSlotTweetDefaultArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  photo<T extends Prisma.PhotoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PhotoDefaultArgs<ExtArgs>>): Prisma.Prisma__PhotoClient<runtime.Types.Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ScheduledSlotPhoto model
 */
export interface ScheduledSlotPhotoFieldRefs {
  readonly id: Prisma.FieldRef<"ScheduledSlotPhoto", 'String'>
  readonly scheduledSlotTweetId: Prisma.FieldRef<"ScheduledSlotPhoto", 'String'>
  readonly photoId: Prisma.FieldRef<"ScheduledSlotPhoto", 'String'>
  readonly userId: Prisma.FieldRef<"ScheduledSlotPhoto", 'String'>
  readonly createdAt: Prisma.FieldRef<"ScheduledSlotPhoto", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ScheduledSlotPhoto findUnique
 */
export type ScheduledSlotPhotoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotPhoto to fetch.
   */
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto findUniqueOrThrow
 */
export type ScheduledSlotPhotoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotPhoto to fetch.
   */
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto findFirst
 */
export type ScheduledSlotPhotoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotPhoto to fetch.
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotPhotos to fetch.
   */
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithRelationInput | Prisma.ScheduledSlotPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScheduledSlotPhotos.
   */
  cursor?: Prisma.ScheduledSlotPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScheduledSlotPhotos.
   */
  distinct?: Prisma.ScheduledSlotPhotoScalarFieldEnum | Prisma.ScheduledSlotPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto findFirstOrThrow
 */
export type ScheduledSlotPhotoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotPhoto to fetch.
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotPhotos to fetch.
   */
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithRelationInput | Prisma.ScheduledSlotPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScheduledSlotPhotos.
   */
  cursor?: Prisma.ScheduledSlotPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScheduledSlotPhotos.
   */
  distinct?: Prisma.ScheduledSlotPhotoScalarFieldEnum | Prisma.ScheduledSlotPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto findMany
 */
export type ScheduledSlotPhotoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotPhotos to fetch.
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotPhotos to fetch.
   */
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithRelationInput | Prisma.ScheduledSlotPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ScheduledSlotPhotos.
   */
  cursor?: Prisma.ScheduledSlotPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotPhotos.
   */
  skip?: number
  distinct?: Prisma.ScheduledSlotPhotoScalarFieldEnum | Prisma.ScheduledSlotPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto create
 */
export type ScheduledSlotPhotoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * The data needed to create a ScheduledSlotPhoto.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateInput, Prisma.ScheduledSlotPhotoUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto createMany
 */
export type ScheduledSlotPhotoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ScheduledSlotPhotos.
   */
  data: Prisma.ScheduledSlotPhotoCreateManyInput | Prisma.ScheduledSlotPhotoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ScheduledSlotPhoto createManyAndReturn
 */
export type ScheduledSlotPhotoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * The data used to create many ScheduledSlotPhotos.
   */
  data: Prisma.ScheduledSlotPhotoCreateManyInput | Prisma.ScheduledSlotPhotoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ScheduledSlotPhoto update
 */
export type ScheduledSlotPhotoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * The data needed to update a ScheduledSlotPhoto.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateInput, Prisma.ScheduledSlotPhotoUncheckedUpdateInput>
  /**
   * Choose, which ScheduledSlotPhoto to update.
   */
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto updateMany
 */
export type ScheduledSlotPhotoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ScheduledSlotPhotos.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateManyMutationInput, Prisma.ScheduledSlotPhotoUncheckedUpdateManyInput>
  /**
   * Filter which ScheduledSlotPhotos to update
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * Limit how many ScheduledSlotPhotos to update.
   */
  limit?: number
}

/**
 * ScheduledSlotPhoto updateManyAndReturn
 */
export type ScheduledSlotPhotoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * The data used to update ScheduledSlotPhotos.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateManyMutationInput, Prisma.ScheduledSlotPhotoUncheckedUpdateManyInput>
  /**
   * Filter which ScheduledSlotPhotos to update
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * Limit how many ScheduledSlotPhotos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ScheduledSlotPhoto upsert
 */
export type ScheduledSlotPhotoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * The filter to search for the ScheduledSlotPhoto to update in case it exists.
   */
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  /**
   * In case the ScheduledSlotPhoto found by the `where` argument doesn't exist, create a new ScheduledSlotPhoto with this data.
   */
  create: Prisma.XOR<Prisma.ScheduledSlotPhotoCreateInput, Prisma.ScheduledSlotPhotoUncheckedCreateInput>
  /**
   * In case the ScheduledSlotPhoto was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScheduledSlotPhotoUpdateInput, Prisma.ScheduledSlotPhotoUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto delete
 */
export type ScheduledSlotPhotoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  /**
   * Filter which ScheduledSlotPhoto to delete.
   */
  where: Prisma.ScheduledSlotPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotPhoto deleteMany
 */
export type ScheduledSlotPhotoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScheduledSlotPhotos to delete
   */
  where?: Prisma.ScheduledSlotPhotoWhereInput
  /**
   * Limit how many ScheduledSlotPhotos to delete.
   */
  limit?: number
}

/**
 * ScheduledSlotPhoto without action
 */
export type ScheduledSlotPhotoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
}
