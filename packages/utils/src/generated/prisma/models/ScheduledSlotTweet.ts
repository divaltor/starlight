
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ScheduledSlotTweet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ScheduledSlotTweet
 * 
 */
export type ScheduledSlotTweetModel = runtime.Types.Result.DefaultSelection<Prisma.$ScheduledSlotTweetPayload>

export type AggregateScheduledSlotTweet = {
  _count: ScheduledSlotTweetCountAggregateOutputType | null
  _min: ScheduledSlotTweetMinAggregateOutputType | null
  _max: ScheduledSlotTweetMaxAggregateOutputType | null
}

export type ScheduledSlotTweetMinAggregateOutputType = {
  id: string | null
  scheduledSlotId: string | null
  tweetId: string | null
  userId: string | null
  createdAt: Date | null
}

export type ScheduledSlotTweetMaxAggregateOutputType = {
  id: string | null
  scheduledSlotId: string | null
  tweetId: string | null
  userId: string | null
  createdAt: Date | null
}

export type ScheduledSlotTweetCountAggregateOutputType = {
  id: number
  scheduledSlotId: number
  tweetId: number
  userId: number
  createdAt: number
  _all: number
}


export type ScheduledSlotTweetMinAggregateInputType = {
  id?: true
  scheduledSlotId?: true
  tweetId?: true
  userId?: true
  createdAt?: true
}

export type ScheduledSlotTweetMaxAggregateInputType = {
  id?: true
  scheduledSlotId?: true
  tweetId?: true
  userId?: true
  createdAt?: true
}

export type ScheduledSlotTweetCountAggregateInputType = {
  id?: true
  scheduledSlotId?: true
  tweetId?: true
  userId?: true
  createdAt?: true
  _all?: true
}

export type ScheduledSlotTweetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScheduledSlotTweet to aggregate.
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotTweets to fetch.
   */
  orderBy?: Prisma.ScheduledSlotTweetOrderByWithRelationInput | Prisma.ScheduledSlotTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScheduledSlotTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ScheduledSlotTweets
  **/
  _count?: true | ScheduledSlotTweetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScheduledSlotTweetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScheduledSlotTweetMaxAggregateInputType
}

export type GetScheduledSlotTweetAggregateType<T extends ScheduledSlotTweetAggregateArgs> = {
      [P in keyof T & keyof AggregateScheduledSlotTweet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScheduledSlotTweet[P]>
    : Prisma.GetScalarType<T[P], AggregateScheduledSlotTweet[P]>
}




export type ScheduledSlotTweetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduledSlotTweetWhereInput
  orderBy?: Prisma.ScheduledSlotTweetOrderByWithAggregationInput | Prisma.ScheduledSlotTweetOrderByWithAggregationInput[]
  by: Prisma.ScheduledSlotTweetScalarFieldEnum[] | Prisma.ScheduledSlotTweetScalarFieldEnum
  having?: Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScheduledSlotTweetCountAggregateInputType | true
  _min?: ScheduledSlotTweetMinAggregateInputType
  _max?: ScheduledSlotTweetMaxAggregateInputType
}

export type ScheduledSlotTweetGroupByOutputType = {
  id: string
  scheduledSlotId: string
  tweetId: string
  userId: string
  createdAt: Date
  _count: ScheduledSlotTweetCountAggregateOutputType | null
  _min: ScheduledSlotTweetMinAggregateOutputType | null
  _max: ScheduledSlotTweetMaxAggregateOutputType | null
}

type GetScheduledSlotTweetGroupByPayload<T extends ScheduledSlotTweetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScheduledSlotTweetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScheduledSlotTweetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScheduledSlotTweetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScheduledSlotTweetGroupByOutputType[P]>
      }
    >
  >



export type ScheduledSlotTweetWhereInput = {
  AND?: Prisma.ScheduledSlotTweetWhereInput | Prisma.ScheduledSlotTweetWhereInput[]
  OR?: Prisma.ScheduledSlotTweetWhereInput[]
  NOT?: Prisma.ScheduledSlotTweetWhereInput | Prisma.ScheduledSlotTweetWhereInput[]
  id?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  scheduledSlotId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  tweetId?: Prisma.StringFilter<"ScheduledSlotTweet"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotTweet"> | Date | string
  scheduledSlot?: Prisma.XOR<Prisma.ScheduledSlotScalarRelationFilter, Prisma.ScheduledSlotWhereInput>
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoListRelationFilter
}

export type ScheduledSlotTweetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  scheduledSlot?: Prisma.ScheduledSlotOrderByWithRelationInput
  tweet?: Prisma.TweetOrderByWithRelationInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoOrderByRelationAggregateInput
}

export type ScheduledSlotTweetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  scheduledSlotId_tweetId_userId?: Prisma.ScheduledSlotTweetScheduledSlotIdTweetIdUserIdCompoundUniqueInput
  AND?: Prisma.ScheduledSlotTweetWhereInput | Prisma.ScheduledSlotTweetWhereInput[]
  OR?: Prisma.ScheduledSlotTweetWhereInput[]
  NOT?: Prisma.ScheduledSlotTweetWhereInput | Prisma.ScheduledSlotTweetWhereInput[]
  scheduledSlotId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  tweetId?: Prisma.StringFilter<"ScheduledSlotTweet"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotTweet"> | Date | string
  scheduledSlot?: Prisma.XOR<Prisma.ScheduledSlotScalarRelationFilter, Prisma.ScheduledSlotWhereInput>
  tweet?: Prisma.XOR<Prisma.TweetScalarRelationFilter, Prisma.TweetWhereInput>
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoListRelationFilter
}, "id" | "scheduledSlotId_tweetId_userId">

export type ScheduledSlotTweetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ScheduledSlotTweetCountOrderByAggregateInput
  _max?: Prisma.ScheduledSlotTweetMaxOrderByAggregateInput
  _min?: Prisma.ScheduledSlotTweetMinOrderByAggregateInput
}

export type ScheduledSlotTweetScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput | Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput | Prisma.ScheduledSlotTweetScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotTweet"> | string
  scheduledSlotId?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotTweet"> | string
  tweetId?: Prisma.StringWithAggregatesFilter<"ScheduledSlotTweet"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ScheduledSlotTweet"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ScheduledSlotTweet"> | Date | string
}

export type ScheduledSlotTweetCreateInput = {
  id?: string
  createdAt?: Date | string
  scheduledSlot: Prisma.ScheduledSlotCreateNestedOneWithoutScheduledSlotTweetsInput
  tweet: Prisma.TweetCreateNestedOneWithoutScheduledSlotTweetsInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetUncheckedCreateInput = {
  id?: string
  scheduledSlotId: string
  tweetId: string
  userId: string
  createdAt?: Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
  tweet?: Prisma.TweetUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetCreateManyInput = {
  id?: string
  scheduledSlotId: string
  tweetId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotTweetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotTweetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotTweetListRelationFilter = {
  every?: Prisma.ScheduledSlotTweetWhereInput
  some?: Prisma.ScheduledSlotTweetWhereInput
  none?: Prisma.ScheduledSlotTweetWhereInput
}

export type ScheduledSlotTweetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScheduledSlotTweetScheduledSlotIdTweetIdUserIdCompoundUniqueInput = {
  scheduledSlotId: string
  tweetId: string
  userId: string
}

export type ScheduledSlotTweetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotTweetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotTweetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  tweetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ScheduledSlotTweetScalarRelationFilter = {
  is?: Prisma.ScheduledSlotTweetWhereInput
  isNot?: Prisma.ScheduledSlotTweetWhereInput
}

export type ScheduledSlotTweetCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput> | Prisma.ScheduledSlotTweetCreateWithoutTweetInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyTweetInputEnvelope
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
}

export type ScheduledSlotTweetUncheckedCreateNestedManyWithoutTweetInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput> | Prisma.ScheduledSlotTweetCreateWithoutTweetInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyTweetInputEnvelope
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
}

export type ScheduledSlotTweetUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput> | Prisma.ScheduledSlotTweetCreateWithoutTweetInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutTweetInput | Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyTweetInputEnvelope
  set?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  update?: Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutTweetInput | Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutTweetInput | Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
}

export type ScheduledSlotTweetUncheckedUpdateManyWithoutTweetNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput> | Prisma.ScheduledSlotTweetCreateWithoutTweetInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutTweetInput[]
  upsert?: Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutTweetInput | Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutTweetInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyTweetInputEnvelope
  set?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  update?: Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutTweetInput | Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutTweetInput[]
  updateMany?: Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutTweetInput | Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutTweetInput[]
  deleteMany?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
}

export type ScheduledSlotTweetCreateNestedManyWithoutScheduledSlotInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput> | Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyScheduledSlotInputEnvelope
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
}

export type ScheduledSlotTweetUncheckedCreateNestedManyWithoutScheduledSlotInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput> | Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyScheduledSlotInputEnvelope
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
}

export type ScheduledSlotTweetUpdateManyWithoutScheduledSlotNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput> | Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput[]
  upsert?: Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutScheduledSlotInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyScheduledSlotInputEnvelope
  set?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  update?: Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutScheduledSlotInput[]
  updateMany?: Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutScheduledSlotInput[]
  deleteMany?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
}

export type ScheduledSlotTweetUncheckedUpdateManyWithoutScheduledSlotNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput> | Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput[] | Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput[]
  upsert?: Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpsertWithWhereUniqueWithoutScheduledSlotInput[]
  createMany?: Prisma.ScheduledSlotTweetCreateManyScheduledSlotInputEnvelope
  set?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  disconnect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  delete?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput | Prisma.ScheduledSlotTweetWhereUniqueInput[]
  update?: Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpdateWithWhereUniqueWithoutScheduledSlotInput[]
  updateMany?: Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutScheduledSlotInput | Prisma.ScheduledSlotTweetUpdateManyWithWhereWithoutScheduledSlotInput[]
  deleteMany?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
}

export type ScheduledSlotTweetCreateNestedOneWithoutScheduledSlotPhotosInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotPhotosInput>
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotPhotosInput
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput
}

export type ScheduledSlotTweetUpdateOneRequiredWithoutScheduledSlotPhotosNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotPhotosInput>
  connectOrCreate?: Prisma.ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotPhotosInput
  upsert?: Prisma.ScheduledSlotTweetUpsertWithoutScheduledSlotPhotosInput
  connect?: Prisma.ScheduledSlotTweetWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ScheduledSlotTweetUpdateToOneWithWhereWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUpdateWithoutScheduledSlotPhotosInput>, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotPhotosInput>
}

export type ScheduledSlotTweetCreateWithoutTweetInput = {
  id?: string
  createdAt?: Date | string
  scheduledSlot: Prisma.ScheduledSlotCreateNestedOneWithoutScheduledSlotTweetsInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetUncheckedCreateWithoutTweetInput = {
  id?: string
  scheduledSlotId: string
  createdAt?: Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetCreateOrConnectWithoutTweetInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput>
}

export type ScheduledSlotTweetCreateManyTweetInputEnvelope = {
  data: Prisma.ScheduledSlotTweetCreateManyTweetInput | Prisma.ScheduledSlotTweetCreateManyTweetInput[]
  skipDuplicates?: boolean
}

export type ScheduledSlotTweetUpsertWithWhereUniqueWithoutTweetInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  update: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutTweetInput>
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutTweetInput>
}

export type ScheduledSlotTweetUpdateWithWhereUniqueWithoutTweetInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutTweetInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutTweetInput>
}

export type ScheduledSlotTweetUpdateManyWithWhereWithoutTweetInput = {
  where: Prisma.ScheduledSlotTweetScalarWhereInput
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateManyMutationInput, Prisma.ScheduledSlotTweetUncheckedUpdateManyWithoutTweetInput>
}

export type ScheduledSlotTweetScalarWhereInput = {
  AND?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
  OR?: Prisma.ScheduledSlotTweetScalarWhereInput[]
  NOT?: Prisma.ScheduledSlotTweetScalarWhereInput | Prisma.ScheduledSlotTweetScalarWhereInput[]
  id?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  scheduledSlotId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  tweetId?: Prisma.StringFilter<"ScheduledSlotTweet"> | string
  userId?: Prisma.UuidFilter<"ScheduledSlotTweet"> | string
  createdAt?: Prisma.DateTimeFilter<"ScheduledSlotTweet"> | Date | string
}

export type ScheduledSlotTweetCreateWithoutScheduledSlotInput = {
  id?: string
  createdAt?: Date | string
  tweet: Prisma.TweetCreateNestedOneWithoutScheduledSlotTweetsInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput = {
  id?: string
  tweetId: string
  userId: string
  createdAt?: Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedCreateNestedManyWithoutScheduledSlotTweetInput
}

export type ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput>
}

export type ScheduledSlotTweetCreateManyScheduledSlotInputEnvelope = {
  data: Prisma.ScheduledSlotTweetCreateManyScheduledSlotInput | Prisma.ScheduledSlotTweetCreateManyScheduledSlotInput[]
  skipDuplicates?: boolean
}

export type ScheduledSlotTweetUpsertWithWhereUniqueWithoutScheduledSlotInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  update: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotInput>
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotInput>
}

export type ScheduledSlotTweetUpdateWithWhereUniqueWithoutScheduledSlotInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutScheduledSlotInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotInput>
}

export type ScheduledSlotTweetUpdateManyWithWhereWithoutScheduledSlotInput = {
  where: Prisma.ScheduledSlotTweetScalarWhereInput
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateManyMutationInput, Prisma.ScheduledSlotTweetUncheckedUpdateManyWithoutScheduledSlotInput>
}

export type ScheduledSlotTweetCreateWithoutScheduledSlotPhotosInput = {
  id?: string
  createdAt?: Date | string
  scheduledSlot: Prisma.ScheduledSlotCreateNestedOneWithoutScheduledSlotTweetsInput
  tweet: Prisma.TweetCreateNestedOneWithoutScheduledSlotTweetsInput
}

export type ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotPhotosInput = {
  id?: string
  scheduledSlotId: string
  tweetId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotTweetCreateOrConnectWithoutScheduledSlotPhotosInput = {
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotPhotosInput>
}

export type ScheduledSlotTweetUpsertWithoutScheduledSlotPhotosInput = {
  update: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotPhotosInput>
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedCreateWithoutScheduledSlotPhotosInput>
  where?: Prisma.ScheduledSlotTweetWhereInput
}

export type ScheduledSlotTweetUpdateToOneWithWhereWithoutScheduledSlotPhotosInput = {
  where?: Prisma.ScheduledSlotTweetWhereInput
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateWithoutScheduledSlotPhotosInput, Prisma.ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotPhotosInput>
}

export type ScheduledSlotTweetUpdateWithoutScheduledSlotPhotosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
  tweet?: Prisma.TweetUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotPhotosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotTweetCreateManyTweetInput = {
  id?: string
  scheduledSlotId: string
  createdAt?: Date | string
}

export type ScheduledSlotTweetUpdateWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateManyWithoutTweetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduledSlotTweetCreateManyScheduledSlotInput = {
  id?: string
  tweetId: string
  userId: string
  createdAt?: Date | string
}

export type ScheduledSlotTweetUpdateWithoutScheduledSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tweet?: Prisma.TweetUpdateOneRequiredWithoutScheduledSlotTweetsNestedInput
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateWithoutScheduledSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  scheduledSlotPhotos?: Prisma.ScheduledSlotPhotoUncheckedUpdateManyWithoutScheduledSlotTweetNestedInput
}

export type ScheduledSlotTweetUncheckedUpdateManyWithoutScheduledSlotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tweetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ScheduledSlotTweetCountOutputType
 */

export type ScheduledSlotTweetCountOutputType = {
  scheduledSlotPhotos: number
}

export type ScheduledSlotTweetCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlotPhotos?: boolean | ScheduledSlotTweetCountOutputTypeCountScheduledSlotPhotosArgs
}

/**
 * ScheduledSlotTweetCountOutputType without action
 */
export type ScheduledSlotTweetCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweetCountOutputType
   */
  select?: Prisma.ScheduledSlotTweetCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ScheduledSlotTweetCountOutputType without action
 */
export type ScheduledSlotTweetCountOutputTypeCountScheduledSlotPhotosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduledSlotPhotoWhereInput
}


export type ScheduledSlotTweetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotId?: boolean
  tweetId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  scheduledSlotPhotos?: boolean | Prisma.ScheduledSlotTweet$scheduledSlotPhotosArgs<ExtArgs>
  _count?: boolean | Prisma.ScheduledSlotTweetCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotTweet"]>

export type ScheduledSlotTweetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotId?: boolean
  tweetId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotTweet"]>

export type ScheduledSlotTweetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  scheduledSlotId?: boolean
  tweetId?: boolean
  userId?: boolean
  createdAt?: boolean
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scheduledSlotTweet"]>

export type ScheduledSlotTweetSelectScalar = {
  id?: boolean
  scheduledSlotId?: boolean
  tweetId?: boolean
  userId?: boolean
  createdAt?: boolean
}

export type ScheduledSlotTweetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "scheduledSlotId" | "tweetId" | "userId" | "createdAt", ExtArgs["result"]["scheduledSlotTweet"]>
export type ScheduledSlotTweetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
  scheduledSlotPhotos?: boolean | Prisma.ScheduledSlotTweet$scheduledSlotPhotosArgs<ExtArgs>
  _count?: boolean | Prisma.ScheduledSlotTweetCountOutputTypeDefaultArgs<ExtArgs>
}
export type ScheduledSlotTweetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}
export type ScheduledSlotTweetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  scheduledSlot?: boolean | Prisma.ScheduledSlotDefaultArgs<ExtArgs>
  tweet?: boolean | Prisma.TweetDefaultArgs<ExtArgs>
}

export type $ScheduledSlotTweetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ScheduledSlotTweet"
  objects: {
    scheduledSlot: Prisma.$ScheduledSlotPayload<ExtArgs>
    tweet: Prisma.$TweetPayload<ExtArgs>
    scheduledSlotPhotos: Prisma.$ScheduledSlotPhotoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    scheduledSlotId: string
    tweetId: string
    userId: string
    createdAt: Date
  }, ExtArgs["result"]["scheduledSlotTweet"]>
  composites: {}
}

export type ScheduledSlotTweetGetPayload<S extends boolean | null | undefined | ScheduledSlotTweetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload, S>

export type ScheduledSlotTweetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScheduledSlotTweetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ScheduledSlotTweetCountAggregateInputType | true
  }

export interface ScheduledSlotTweetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledSlotTweet'], meta: { name: 'ScheduledSlotTweet' } }
  /**
   * Find zero or one ScheduledSlotTweet that matches the filter.
   * @param {ScheduledSlotTweetFindUniqueArgs} args - Arguments to find a ScheduledSlotTweet
   * @example
   * // Get one ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduledSlotTweetFindUniqueArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ScheduledSlotTweet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduledSlotTweetFindUniqueOrThrowArgs} args - Arguments to find a ScheduledSlotTweet
   * @example
   * // Get one ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduledSlotTweetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScheduledSlotTweet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetFindFirstArgs} args - Arguments to find a ScheduledSlotTweet
   * @example
   * // Get one ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduledSlotTweetFindFirstArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ScheduledSlotTweet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetFindFirstOrThrowArgs} args - Arguments to find a ScheduledSlotTweet
   * @example
   * // Get one ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduledSlotTweetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ScheduledSlotTweets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ScheduledSlotTweets
   * const scheduledSlotTweets = await prisma.scheduledSlotTweet.findMany()
   * 
   * // Get first 10 ScheduledSlotTweets
   * const scheduledSlotTweets = await prisma.scheduledSlotTweet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scheduledSlotTweetWithIdOnly = await prisma.scheduledSlotTweet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScheduledSlotTweetFindManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ScheduledSlotTweet.
   * @param {ScheduledSlotTweetCreateArgs} args - Arguments to create a ScheduledSlotTweet.
   * @example
   * // Create one ScheduledSlotTweet
   * const ScheduledSlotTweet = await prisma.scheduledSlotTweet.create({
   *   data: {
   *     // ... data to create a ScheduledSlotTweet
   *   }
   * })
   * 
   */
  create<T extends ScheduledSlotTweetCreateArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetCreateArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ScheduledSlotTweets.
   * @param {ScheduledSlotTweetCreateManyArgs} args - Arguments to create many ScheduledSlotTweets.
   * @example
   * // Create many ScheduledSlotTweets
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScheduledSlotTweetCreateManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ScheduledSlotTweets and returns the data saved in the database.
   * @param {ScheduledSlotTweetCreateManyAndReturnArgs} args - Arguments to create many ScheduledSlotTweets.
   * @example
   * // Create many ScheduledSlotTweets
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ScheduledSlotTweets and only return the `id`
   * const scheduledSlotTweetWithIdOnly = await prisma.scheduledSlotTweet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScheduledSlotTweetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ScheduledSlotTweet.
   * @param {ScheduledSlotTweetDeleteArgs} args - Arguments to delete one ScheduledSlotTweet.
   * @example
   * // Delete one ScheduledSlotTweet
   * const ScheduledSlotTweet = await prisma.scheduledSlotTweet.delete({
   *   where: {
   *     // ... filter to delete one ScheduledSlotTweet
   *   }
   * })
   * 
   */
  delete<T extends ScheduledSlotTweetDeleteArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetDeleteArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ScheduledSlotTweet.
   * @param {ScheduledSlotTweetUpdateArgs} args - Arguments to update one ScheduledSlotTweet.
   * @example
   * // Update one ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScheduledSlotTweetUpdateArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetUpdateArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ScheduledSlotTweets.
   * @param {ScheduledSlotTweetDeleteManyArgs} args - Arguments to filter ScheduledSlotTweets to delete.
   * @example
   * // Delete a few ScheduledSlotTweets
   * const { count } = await prisma.scheduledSlotTweet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScheduledSlotTweetDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScheduledSlotTweetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScheduledSlotTweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ScheduledSlotTweets
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScheduledSlotTweetUpdateManyArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ScheduledSlotTweets and returns the data updated in the database.
   * @param {ScheduledSlotTweetUpdateManyAndReturnArgs} args - Arguments to update many ScheduledSlotTweets.
   * @example
   * // Update many ScheduledSlotTweets
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ScheduledSlotTweets and only return the `id`
   * const scheduledSlotTweetWithIdOnly = await prisma.scheduledSlotTweet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScheduledSlotTweetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ScheduledSlotTweet.
   * @param {ScheduledSlotTweetUpsertArgs} args - Arguments to update or create a ScheduledSlotTweet.
   * @example
   * // Update or create a ScheduledSlotTweet
   * const scheduledSlotTweet = await prisma.scheduledSlotTweet.upsert({
   *   create: {
   *     // ... data to create a ScheduledSlotTweet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ScheduledSlotTweet we want to update
   *   }
   * })
   */
  upsert<T extends ScheduledSlotTweetUpsertArgs>(args: Prisma.SelectSubset<T, ScheduledSlotTweetUpsertArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotTweetClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotTweetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ScheduledSlotTweets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetCountArgs} args - Arguments to filter ScheduledSlotTweets to count.
   * @example
   * // Count the number of ScheduledSlotTweets
   * const count = await prisma.scheduledSlotTweet.count({
   *   where: {
   *     // ... the filter for the ScheduledSlotTweets we want to count
   *   }
   * })
  **/
  count<T extends ScheduledSlotTweetCountArgs>(
    args?: Prisma.Subset<T, ScheduledSlotTweetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScheduledSlotTweetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ScheduledSlotTweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScheduledSlotTweetAggregateArgs>(args: Prisma.Subset<T, ScheduledSlotTweetAggregateArgs>): Prisma.PrismaPromise<GetScheduledSlotTweetAggregateType<T>>

  /**
   * Group by ScheduledSlotTweet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduledSlotTweetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScheduledSlotTweetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduledSlotTweetGroupByArgs['orderBy'] }
      : { orderBy?: ScheduledSlotTweetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScheduledSlotTweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledSlotTweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ScheduledSlotTweet model
 */
readonly fields: ScheduledSlotTweetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ScheduledSlotTweet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduledSlotTweetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  scheduledSlot<T extends Prisma.ScheduledSlotDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ScheduledSlotDefaultArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tweet<T extends Prisma.TweetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TweetDefaultArgs<ExtArgs>>): Prisma.Prisma__TweetClient<runtime.Types.Result.GetResult<Prisma.$TweetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  scheduledSlotPhotos<T extends Prisma.ScheduledSlotTweet$scheduledSlotPhotosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ScheduledSlotTweet$scheduledSlotPhotosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ScheduledSlotTweet model
 */
export interface ScheduledSlotTweetFieldRefs {
  readonly id: Prisma.FieldRef<"ScheduledSlotTweet", 'String'>
  readonly scheduledSlotId: Prisma.FieldRef<"ScheduledSlotTweet", 'String'>
  readonly tweetId: Prisma.FieldRef<"ScheduledSlotTweet", 'String'>
  readonly userId: Prisma.FieldRef<"ScheduledSlotTweet", 'String'>
  readonly createdAt: Prisma.FieldRef<"ScheduledSlotTweet", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ScheduledSlotTweet findUnique
 */
export type ScheduledSlotTweetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotTweet to fetch.
   */
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet findUniqueOrThrow
 */
export type ScheduledSlotTweetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotTweet to fetch.
   */
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet findFirst
 */
export type ScheduledSlotTweetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotTweet to fetch.
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotTweets to fetch.
   */
  orderBy?: Prisma.ScheduledSlotTweetOrderByWithRelationInput | Prisma.ScheduledSlotTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScheduledSlotTweets.
   */
  cursor?: Prisma.ScheduledSlotTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScheduledSlotTweets.
   */
  distinct?: Prisma.ScheduledSlotTweetScalarFieldEnum | Prisma.ScheduledSlotTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet findFirstOrThrow
 */
export type ScheduledSlotTweetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotTweet to fetch.
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotTweets to fetch.
   */
  orderBy?: Prisma.ScheduledSlotTweetOrderByWithRelationInput | Prisma.ScheduledSlotTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ScheduledSlotTweets.
   */
  cursor?: Prisma.ScheduledSlotTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotTweets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ScheduledSlotTweets.
   */
  distinct?: Prisma.ScheduledSlotTweetScalarFieldEnum | Prisma.ScheduledSlotTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet findMany
 */
export type ScheduledSlotTweetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter, which ScheduledSlotTweets to fetch.
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ScheduledSlotTweets to fetch.
   */
  orderBy?: Prisma.ScheduledSlotTweetOrderByWithRelationInput | Prisma.ScheduledSlotTweetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ScheduledSlotTweets.
   */
  cursor?: Prisma.ScheduledSlotTweetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ScheduledSlotTweets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ScheduledSlotTweets.
   */
  skip?: number
  distinct?: Prisma.ScheduledSlotTweetScalarFieldEnum | Prisma.ScheduledSlotTweetScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet create
 */
export type ScheduledSlotTweetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * The data needed to create a ScheduledSlotTweet.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotTweetCreateInput, Prisma.ScheduledSlotTweetUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet createMany
 */
export type ScheduledSlotTweetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ScheduledSlotTweets.
   */
  data: Prisma.ScheduledSlotTweetCreateManyInput | Prisma.ScheduledSlotTweetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ScheduledSlotTweet createManyAndReturn
 */
export type ScheduledSlotTweetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * The data used to create many ScheduledSlotTweets.
   */
  data: Prisma.ScheduledSlotTweetCreateManyInput | Prisma.ScheduledSlotTweetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ScheduledSlotTweet update
 */
export type ScheduledSlotTweetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * The data needed to update a ScheduledSlotTweet.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateInput, Prisma.ScheduledSlotTweetUncheckedUpdateInput>
  /**
   * Choose, which ScheduledSlotTweet to update.
   */
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet updateMany
 */
export type ScheduledSlotTweetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ScheduledSlotTweets.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateManyMutationInput, Prisma.ScheduledSlotTweetUncheckedUpdateManyInput>
  /**
   * Filter which ScheduledSlotTweets to update
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * Limit how many ScheduledSlotTweets to update.
   */
  limit?: number
}

/**
 * ScheduledSlotTweet updateManyAndReturn
 */
export type ScheduledSlotTweetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * The data used to update ScheduledSlotTweets.
   */
  data: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateManyMutationInput, Prisma.ScheduledSlotTweetUncheckedUpdateManyInput>
  /**
   * Filter which ScheduledSlotTweets to update
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * Limit how many ScheduledSlotTweets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ScheduledSlotTweet upsert
 */
export type ScheduledSlotTweetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * The filter to search for the ScheduledSlotTweet to update in case it exists.
   */
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  /**
   * In case the ScheduledSlotTweet found by the `where` argument doesn't exist, create a new ScheduledSlotTweet with this data.
   */
  create: Prisma.XOR<Prisma.ScheduledSlotTweetCreateInput, Prisma.ScheduledSlotTweetUncheckedCreateInput>
  /**
   * In case the ScheduledSlotTweet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScheduledSlotTweetUpdateInput, Prisma.ScheduledSlotTweetUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet delete
 */
export type ScheduledSlotTweetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
  /**
   * Filter which ScheduledSlotTweet to delete.
   */
  where: Prisma.ScheduledSlotTweetWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ScheduledSlotTweet deleteMany
 */
export type ScheduledSlotTweetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ScheduledSlotTweets to delete
   */
  where?: Prisma.ScheduledSlotTweetWhereInput
  /**
   * Limit how many ScheduledSlotTweets to delete.
   */
  limit?: number
}

/**
 * ScheduledSlotTweet.scheduledSlotPhotos
 */
export type ScheduledSlotTweet$scheduledSlotPhotosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotPhoto
   */
  select?: Prisma.ScheduledSlotPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotPhoto
   */
  omit?: Prisma.ScheduledSlotPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotPhotoInclude<ExtArgs> | null
  where?: Prisma.ScheduledSlotPhotoWhereInput
  orderBy?: Prisma.ScheduledSlotPhotoOrderByWithRelationInput | Prisma.ScheduledSlotPhotoOrderByWithRelationInput[]
  cursor?: Prisma.ScheduledSlotPhotoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScheduledSlotPhotoScalarFieldEnum | Prisma.ScheduledSlotPhotoScalarFieldEnum[]
}

/**
 * ScheduledSlotTweet without action
 */
export type ScheduledSlotTweetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlotTweet
   */
  select?: Prisma.ScheduledSlotTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlotTweet
   */
  omit?: Prisma.ScheduledSlotTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotTweetInclude<ExtArgs> | null
}
