
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CollectionShare` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CollectionShare
 * 
 */
export type CollectionShareModel = runtime.Types.Result.DefaultSelection<Prisma.$CollectionSharePayload>

export type AggregateCollectionShare = {
  _count: CollectionShareCountAggregateOutputType | null
  _min: CollectionShareMinAggregateOutputType | null
  _max: CollectionShareMaxAggregateOutputType | null
}

export type CollectionShareMinAggregateOutputType = {
  id: string | null
  slug: string | null
  userId: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  visibility: $Enums.CollectionShareVisibility | null
}

export type CollectionShareMaxAggregateOutputType = {
  id: string | null
  slug: string | null
  userId: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  visibility: $Enums.CollectionShareVisibility | null
}

export type CollectionShareCountAggregateOutputType = {
  id: number
  slug: number
  userId: number
  name: number
  createdAt: number
  updatedAt: number
  visibility: number
  _all: number
}


export type CollectionShareMinAggregateInputType = {
  id?: true
  slug?: true
  userId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  visibility?: true
}

export type CollectionShareMaxAggregateInputType = {
  id?: true
  slug?: true
  userId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  visibility?: true
}

export type CollectionShareCountAggregateInputType = {
  id?: true
  slug?: true
  userId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  visibility?: true
  _all?: true
}

export type CollectionShareAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShare to aggregate.
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShares to fetch.
   */
  orderBy?: Prisma.CollectionShareOrderByWithRelationInput | Prisma.CollectionShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CollectionShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CollectionShares
  **/
  _count?: true | CollectionShareCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CollectionShareMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CollectionShareMaxAggregateInputType
}

export type GetCollectionShareAggregateType<T extends CollectionShareAggregateArgs> = {
      [P in keyof T & keyof AggregateCollectionShare]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCollectionShare[P]>
    : Prisma.GetScalarType<T[P], AggregateCollectionShare[P]>
}




export type CollectionShareGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CollectionShareWhereInput
  orderBy?: Prisma.CollectionShareOrderByWithAggregationInput | Prisma.CollectionShareOrderByWithAggregationInput[]
  by: Prisma.CollectionShareScalarFieldEnum[] | Prisma.CollectionShareScalarFieldEnum
  having?: Prisma.CollectionShareScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CollectionShareCountAggregateInputType | true
  _min?: CollectionShareMinAggregateInputType
  _max?: CollectionShareMaxAggregateInputType
}

export type CollectionShareGroupByOutputType = {
  id: string
  slug: string
  userId: string
  name: string | null
  createdAt: Date
  updatedAt: Date
  visibility: $Enums.CollectionShareVisibility
  _count: CollectionShareCountAggregateOutputType | null
  _min: CollectionShareMinAggregateOutputType | null
  _max: CollectionShareMaxAggregateOutputType | null
}

type GetCollectionShareGroupByPayload<T extends CollectionShareGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CollectionShareGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CollectionShareGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CollectionShareGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CollectionShareGroupByOutputType[P]>
      }
    >
  >



export type CollectionShareWhereInput = {
  AND?: Prisma.CollectionShareWhereInput | Prisma.CollectionShareWhereInput[]
  OR?: Prisma.CollectionShareWhereInput[]
  NOT?: Prisma.CollectionShareWhereInput | Prisma.CollectionShareWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShare"> | string
  slug?: Prisma.StringFilter<"CollectionShare"> | string
  userId?: Prisma.UuidFilter<"CollectionShare"> | string
  name?: Prisma.StringNullableFilter<"CollectionShare"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFilter<"CollectionShare"> | $Enums.CollectionShareVisibility
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  collectionShareTweets?: Prisma.CollectionShareTweetListRelationFilter
  collectionShareAuthors?: Prisma.CollectionShareAuthorListRelationFilter
}

export type CollectionShareOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  collectionShareTweets?: Prisma.CollectionShareTweetOrderByRelationAggregateInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorOrderByRelationAggregateInput
}

export type CollectionShareWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.CollectionShareWhereInput | Prisma.CollectionShareWhereInput[]
  OR?: Prisma.CollectionShareWhereInput[]
  NOT?: Prisma.CollectionShareWhereInput | Prisma.CollectionShareWhereInput[]
  userId?: Prisma.UuidFilter<"CollectionShare"> | string
  name?: Prisma.StringNullableFilter<"CollectionShare"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFilter<"CollectionShare"> | $Enums.CollectionShareVisibility
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  collectionShareTweets?: Prisma.CollectionShareTweetListRelationFilter
  collectionShareAuthors?: Prisma.CollectionShareAuthorListRelationFilter
}, "id" | "slug">

export type CollectionShareOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
  _count?: Prisma.CollectionShareCountOrderByAggregateInput
  _max?: Prisma.CollectionShareMaxOrderByAggregateInput
  _min?: Prisma.CollectionShareMinOrderByAggregateInput
}

export type CollectionShareScalarWhereWithAggregatesInput = {
  AND?: Prisma.CollectionShareScalarWhereWithAggregatesInput | Prisma.CollectionShareScalarWhereWithAggregatesInput[]
  OR?: Prisma.CollectionShareScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CollectionShareScalarWhereWithAggregatesInput | Prisma.CollectionShareScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"CollectionShare"> | string
  slug?: Prisma.StringWithAggregatesFilter<"CollectionShare"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"CollectionShare"> | string
  name?: Prisma.StringNullableWithAggregatesFilter<"CollectionShare"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CollectionShare"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CollectionShare"> | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityWithAggregatesFilter<"CollectionShare"> | $Enums.CollectionShareVisibility
}

export type CollectionShareCreateInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  user: Prisma.UserCreateNestedOneWithoutCollectionSharesInput
  collectionShareTweets?: Prisma.CollectionShareTweetCreateNestedManyWithoutCollectionShareInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareUncheckedCreateInput = {
  id?: string
  slug: string
  userId: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedCreateNestedManyWithoutCollectionShareInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  user?: Prisma.UserUpdateOneRequiredWithoutCollectionSharesNestedInput
  collectionShareTweets?: Prisma.CollectionShareTweetUpdateManyWithoutCollectionShareNestedInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareNestedInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareCreateManyInput = {
  id?: string
  slug: string
  userId: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
}

export type CollectionShareUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
}

export type CollectionShareUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
}

export type CollectionShareListRelationFilter = {
  every?: Prisma.CollectionShareWhereInput
  some?: Prisma.CollectionShareWhereInput
  none?: Prisma.CollectionShareWhereInput
}

export type CollectionShareOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CollectionShareCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type CollectionShareMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type CollectionShareMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  visibility?: Prisma.SortOrder
}

export type CollectionShareScalarRelationFilter = {
  is?: Prisma.CollectionShareWhereInput
  isNot?: Prisma.CollectionShareWhereInput
}

export type CollectionShareCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput> | Prisma.CollectionShareCreateWithoutUserInput[] | Prisma.CollectionShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutUserInput | Prisma.CollectionShareCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CollectionShareCreateManyUserInputEnvelope
  connect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
}

export type CollectionShareUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput> | Prisma.CollectionShareCreateWithoutUserInput[] | Prisma.CollectionShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutUserInput | Prisma.CollectionShareCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CollectionShareCreateManyUserInputEnvelope
  connect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
}

export type CollectionShareUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput> | Prisma.CollectionShareCreateWithoutUserInput[] | Prisma.CollectionShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutUserInput | Prisma.CollectionShareCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CollectionShareUpsertWithWhereUniqueWithoutUserInput | Prisma.CollectionShareUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CollectionShareCreateManyUserInputEnvelope
  set?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  delete?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  connect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  update?: Prisma.CollectionShareUpdateWithWhereUniqueWithoutUserInput | Prisma.CollectionShareUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CollectionShareUpdateManyWithWhereWithoutUserInput | Prisma.CollectionShareUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CollectionShareScalarWhereInput | Prisma.CollectionShareScalarWhereInput[]
}

export type CollectionShareUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput> | Prisma.CollectionShareCreateWithoutUserInput[] | Prisma.CollectionShareUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutUserInput | Prisma.CollectionShareCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CollectionShareUpsertWithWhereUniqueWithoutUserInput | Prisma.CollectionShareUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CollectionShareCreateManyUserInputEnvelope
  set?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  disconnect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  delete?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  connect?: Prisma.CollectionShareWhereUniqueInput | Prisma.CollectionShareWhereUniqueInput[]
  update?: Prisma.CollectionShareUpdateWithWhereUniqueWithoutUserInput | Prisma.CollectionShareUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CollectionShareUpdateManyWithWhereWithoutUserInput | Prisma.CollectionShareUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CollectionShareScalarWhereInput | Prisma.CollectionShareScalarWhereInput[]
}

export type EnumCollectionShareVisibilityFieldUpdateOperationsInput = {
  set?: $Enums.CollectionShareVisibility
}

export type CollectionShareCreateNestedOneWithoutCollectionShareTweetsInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareTweetsInput>
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutCollectionShareTweetsInput
  connect?: Prisma.CollectionShareWhereUniqueInput
}

export type CollectionShareUpdateOneRequiredWithoutCollectionShareTweetsNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareTweetsInput>
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutCollectionShareTweetsInput
  upsert?: Prisma.CollectionShareUpsertWithoutCollectionShareTweetsInput
  connect?: Prisma.CollectionShareWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CollectionShareUpdateToOneWithWhereWithoutCollectionShareTweetsInput, Prisma.CollectionShareUpdateWithoutCollectionShareTweetsInput>, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareTweetsInput>
}

export type CollectionShareCreateNestedOneWithoutCollectionShareAuthorsInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareAuthorsInput>
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutCollectionShareAuthorsInput
  connect?: Prisma.CollectionShareWhereUniqueInput
}

export type CollectionShareUpdateOneRequiredWithoutCollectionShareAuthorsNestedInput = {
  create?: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareAuthorsInput>
  connectOrCreate?: Prisma.CollectionShareCreateOrConnectWithoutCollectionShareAuthorsInput
  upsert?: Prisma.CollectionShareUpsertWithoutCollectionShareAuthorsInput
  connect?: Prisma.CollectionShareWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CollectionShareUpdateToOneWithWhereWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUpdateWithoutCollectionShareAuthorsInput>, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareAuthorsInput>
}

export type CollectionShareCreateWithoutUserInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetCreateNestedManyWithoutCollectionShareInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareUncheckedCreateWithoutUserInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedCreateNestedManyWithoutCollectionShareInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareCreateOrConnectWithoutUserInput = {
  where: Prisma.CollectionShareWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput>
}

export type CollectionShareCreateManyUserInputEnvelope = {
  data: Prisma.CollectionShareCreateManyUserInput | Prisma.CollectionShareCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CollectionShareUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CollectionShareWhereUniqueInput
  update: Prisma.XOR<Prisma.CollectionShareUpdateWithoutUserInput, Prisma.CollectionShareUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutUserInput, Prisma.CollectionShareUncheckedCreateWithoutUserInput>
}

export type CollectionShareUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CollectionShareWhereUniqueInput
  data: Prisma.XOR<Prisma.CollectionShareUpdateWithoutUserInput, Prisma.CollectionShareUncheckedUpdateWithoutUserInput>
}

export type CollectionShareUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CollectionShareScalarWhereInput
  data: Prisma.XOR<Prisma.CollectionShareUpdateManyMutationInput, Prisma.CollectionShareUncheckedUpdateManyWithoutUserInput>
}

export type CollectionShareScalarWhereInput = {
  AND?: Prisma.CollectionShareScalarWhereInput | Prisma.CollectionShareScalarWhereInput[]
  OR?: Prisma.CollectionShareScalarWhereInput[]
  NOT?: Prisma.CollectionShareScalarWhereInput | Prisma.CollectionShareScalarWhereInput[]
  id?: Prisma.UuidFilter<"CollectionShare"> | string
  slug?: Prisma.StringFilter<"CollectionShare"> | string
  userId?: Prisma.UuidFilter<"CollectionShare"> | string
  name?: Prisma.StringNullableFilter<"CollectionShare"> | string | null
  createdAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CollectionShare"> | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFilter<"CollectionShare"> | $Enums.CollectionShareVisibility
}

export type CollectionShareCreateWithoutCollectionShareTweetsInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  user: Prisma.UserCreateNestedOneWithoutCollectionSharesInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareUncheckedCreateWithoutCollectionShareTweetsInput = {
  id?: string
  slug: string
  userId: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareCreateOrConnectWithoutCollectionShareTweetsInput = {
  where: Prisma.CollectionShareWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareTweetsInput>
}

export type CollectionShareUpsertWithoutCollectionShareTweetsInput = {
  update: Prisma.XOR<Prisma.CollectionShareUpdateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareTweetsInput>
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareTweetsInput>
  where?: Prisma.CollectionShareWhereInput
}

export type CollectionShareUpdateToOneWithWhereWithoutCollectionShareTweetsInput = {
  where?: Prisma.CollectionShareWhereInput
  data: Prisma.XOR<Prisma.CollectionShareUpdateWithoutCollectionShareTweetsInput, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareTweetsInput>
}

export type CollectionShareUpdateWithoutCollectionShareTweetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  user?: Prisma.UserUpdateOneRequiredWithoutCollectionSharesNestedInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareUncheckedUpdateWithoutCollectionShareTweetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareCreateWithoutCollectionShareAuthorsInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  user: Prisma.UserCreateNestedOneWithoutCollectionSharesInput
  collectionShareTweets?: Prisma.CollectionShareTweetCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareUncheckedCreateWithoutCollectionShareAuthorsInput = {
  id?: string
  slug: string
  userId: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedCreateNestedManyWithoutCollectionShareInput
}

export type CollectionShareCreateOrConnectWithoutCollectionShareAuthorsInput = {
  where: Prisma.CollectionShareWhereUniqueInput
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareAuthorsInput>
}

export type CollectionShareUpsertWithoutCollectionShareAuthorsInput = {
  update: Prisma.XOR<Prisma.CollectionShareUpdateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareAuthorsInput>
  create: Prisma.XOR<Prisma.CollectionShareCreateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedCreateWithoutCollectionShareAuthorsInput>
  where?: Prisma.CollectionShareWhereInput
}

export type CollectionShareUpdateToOneWithWhereWithoutCollectionShareAuthorsInput = {
  where?: Prisma.CollectionShareWhereInput
  data: Prisma.XOR<Prisma.CollectionShareUpdateWithoutCollectionShareAuthorsInput, Prisma.CollectionShareUncheckedUpdateWithoutCollectionShareAuthorsInput>
}

export type CollectionShareUpdateWithoutCollectionShareAuthorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  user?: Prisma.UserUpdateOneRequiredWithoutCollectionSharesNestedInput
  collectionShareTweets?: Prisma.CollectionShareTweetUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareUncheckedUpdateWithoutCollectionShareAuthorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareCreateManyUserInput = {
  id?: string
  slug: string
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  visibility?: $Enums.CollectionShareVisibility
}

export type CollectionShareUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUpdateManyWithoutCollectionShareNestedInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
  collectionShareTweets?: Prisma.CollectionShareTweetUncheckedUpdateManyWithoutCollectionShareNestedInput
  collectionShareAuthors?: Prisma.CollectionShareAuthorUncheckedUpdateManyWithoutCollectionShareNestedInput
}

export type CollectionShareUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  visibility?: Prisma.EnumCollectionShareVisibilityFieldUpdateOperationsInput | $Enums.CollectionShareVisibility
}


/**
 * Count Type CollectionShareCountOutputType
 */

export type CollectionShareCountOutputType = {
  collectionShareTweets: number
  collectionShareAuthors: number
}

export type CollectionShareCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  collectionShareTweets?: boolean | CollectionShareCountOutputTypeCountCollectionShareTweetsArgs
  collectionShareAuthors?: boolean | CollectionShareCountOutputTypeCountCollectionShareAuthorsArgs
}

/**
 * CollectionShareCountOutputType without action
 */
export type CollectionShareCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareCountOutputType
   */
  select?: Prisma.CollectionShareCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CollectionShareCountOutputType without action
 */
export type CollectionShareCountOutputTypeCountCollectionShareTweetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CollectionShareTweetWhereInput
}

/**
 * CollectionShareCountOutputType without action
 */
export type CollectionShareCountOutputTypeCountCollectionShareAuthorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CollectionShareAuthorWhereInput
}


export type CollectionShareSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  userId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  visibility?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  collectionShareTweets?: boolean | Prisma.CollectionShare$collectionShareTweetsArgs<ExtArgs>
  collectionShareAuthors?: boolean | Prisma.CollectionShare$collectionShareAuthorsArgs<ExtArgs>
  _count?: boolean | Prisma.CollectionShareCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShare"]>

export type CollectionShareSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  userId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  visibility?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShare"]>

export type CollectionShareSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slug?: boolean
  userId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  visibility?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["collectionShare"]>

export type CollectionShareSelectScalar = {
  id?: boolean
  slug?: boolean
  userId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  visibility?: boolean
}

export type CollectionShareOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "slug" | "userId" | "name" | "createdAt" | "updatedAt" | "visibility", ExtArgs["result"]["collectionShare"]>
export type CollectionShareInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  collectionShareTweets?: boolean | Prisma.CollectionShare$collectionShareTweetsArgs<ExtArgs>
  collectionShareAuthors?: boolean | Prisma.CollectionShare$collectionShareAuthorsArgs<ExtArgs>
  _count?: boolean | Prisma.CollectionShareCountOutputTypeDefaultArgs<ExtArgs>
}
export type CollectionShareIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CollectionShareIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CollectionSharePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CollectionShare"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    collectionShareTweets: Prisma.$CollectionShareTweetPayload<ExtArgs>[]
    collectionShareAuthors: Prisma.$CollectionShareAuthorPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    slug: string
    userId: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    visibility: $Enums.CollectionShareVisibility
  }, ExtArgs["result"]["collectionShare"]>
  composites: {}
}

export type CollectionShareGetPayload<S extends boolean | null | undefined | CollectionShareDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload, S>

export type CollectionShareCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CollectionShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: CollectionShareCountAggregateInputType | true
  }

export interface CollectionShareDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionShare'], meta: { name: 'CollectionShare' } }
  /**
   * Find zero or one CollectionShare that matches the filter.
   * @param {CollectionShareFindUniqueArgs} args - Arguments to find a CollectionShare
   * @example
   * // Get one CollectionShare
   * const collectionShare = await prisma.collectionShare.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CollectionShareFindUniqueArgs>(args: Prisma.SelectSubset<T, CollectionShareFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CollectionShare that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CollectionShareFindUniqueOrThrowArgs} args - Arguments to find a CollectionShare
   * @example
   * // Get one CollectionShare
   * const collectionShare = await prisma.collectionShare.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CollectionShareFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CollectionShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShare that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareFindFirstArgs} args - Arguments to find a CollectionShare
   * @example
   * // Get one CollectionShare
   * const collectionShare = await prisma.collectionShare.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CollectionShareFindFirstArgs>(args?: Prisma.SelectSubset<T, CollectionShareFindFirstArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CollectionShare that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareFindFirstOrThrowArgs} args - Arguments to find a CollectionShare
   * @example
   * // Get one CollectionShare
   * const collectionShare = await prisma.collectionShare.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CollectionShareFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CollectionShareFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CollectionShares that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CollectionShares
   * const collectionShares = await prisma.collectionShare.findMany()
   * 
   * // Get first 10 CollectionShares
   * const collectionShares = await prisma.collectionShare.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const collectionShareWithIdOnly = await prisma.collectionShare.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CollectionShareFindManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CollectionShare.
   * @param {CollectionShareCreateArgs} args - Arguments to create a CollectionShare.
   * @example
   * // Create one CollectionShare
   * const CollectionShare = await prisma.collectionShare.create({
   *   data: {
   *     // ... data to create a CollectionShare
   *   }
   * })
   * 
   */
  create<T extends CollectionShareCreateArgs>(args: Prisma.SelectSubset<T, CollectionShareCreateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CollectionShares.
   * @param {CollectionShareCreateManyArgs} args - Arguments to create many CollectionShares.
   * @example
   * // Create many CollectionShares
   * const collectionShare = await prisma.collectionShare.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CollectionShareCreateManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CollectionShares and returns the data saved in the database.
   * @param {CollectionShareCreateManyAndReturnArgs} args - Arguments to create many CollectionShares.
   * @example
   * // Create many CollectionShares
   * const collectionShare = await prisma.collectionShare.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CollectionShares and only return the `id`
   * const collectionShareWithIdOnly = await prisma.collectionShare.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CollectionShareCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CollectionShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CollectionShare.
   * @param {CollectionShareDeleteArgs} args - Arguments to delete one CollectionShare.
   * @example
   * // Delete one CollectionShare
   * const CollectionShare = await prisma.collectionShare.delete({
   *   where: {
   *     // ... filter to delete one CollectionShare
   *   }
   * })
   * 
   */
  delete<T extends CollectionShareDeleteArgs>(args: Prisma.SelectSubset<T, CollectionShareDeleteArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CollectionShare.
   * @param {CollectionShareUpdateArgs} args - Arguments to update one CollectionShare.
   * @example
   * // Update one CollectionShare
   * const collectionShare = await prisma.collectionShare.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CollectionShareUpdateArgs>(args: Prisma.SelectSubset<T, CollectionShareUpdateArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CollectionShares.
   * @param {CollectionShareDeleteManyArgs} args - Arguments to filter CollectionShares to delete.
   * @example
   * // Delete a few CollectionShares
   * const { count } = await prisma.collectionShare.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CollectionShareDeleteManyArgs>(args?: Prisma.SelectSubset<T, CollectionShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CollectionShares
   * const collectionShare = await prisma.collectionShare.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CollectionShareUpdateManyArgs>(args: Prisma.SelectSubset<T, CollectionShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CollectionShares and returns the data updated in the database.
   * @param {CollectionShareUpdateManyAndReturnArgs} args - Arguments to update many CollectionShares.
   * @example
   * // Update many CollectionShares
   * const collectionShare = await prisma.collectionShare.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CollectionShares and only return the `id`
   * const collectionShareWithIdOnly = await prisma.collectionShare.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CollectionShareUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CollectionShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CollectionShare.
   * @param {CollectionShareUpsertArgs} args - Arguments to update or create a CollectionShare.
   * @example
   * // Update or create a CollectionShare
   * const collectionShare = await prisma.collectionShare.upsert({
   *   create: {
   *     // ... data to create a CollectionShare
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CollectionShare we want to update
   *   }
   * })
   */
  upsert<T extends CollectionShareUpsertArgs>(args: Prisma.SelectSubset<T, CollectionShareUpsertArgs<ExtArgs>>): Prisma.Prisma__CollectionShareClient<runtime.Types.Result.GetResult<Prisma.$CollectionSharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CollectionShares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareCountArgs} args - Arguments to filter CollectionShares to count.
   * @example
   * // Count the number of CollectionShares
   * const count = await prisma.collectionShare.count({
   *   where: {
   *     // ... the filter for the CollectionShares we want to count
   *   }
   * })
  **/
  count<T extends CollectionShareCountArgs>(
    args?: Prisma.Subset<T, CollectionShareCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CollectionShareCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CollectionShare.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CollectionShareAggregateArgs>(args: Prisma.Subset<T, CollectionShareAggregateArgs>): Prisma.PrismaPromise<GetCollectionShareAggregateType<T>>

  /**
   * Group by CollectionShare.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CollectionShareGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CollectionShareGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CollectionShareGroupByArgs['orderBy'] }
      : { orderBy?: CollectionShareGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CollectionShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CollectionShare model
 */
readonly fields: CollectionShareFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CollectionShare.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CollectionShareClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  collectionShareTweets<T extends Prisma.CollectionShare$collectionShareTweetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CollectionShare$collectionShareTweetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareTweetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  collectionShareAuthors<T extends Prisma.CollectionShare$collectionShareAuthorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CollectionShare$collectionShareAuthorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CollectionShareAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CollectionShare model
 */
export interface CollectionShareFieldRefs {
  readonly id: Prisma.FieldRef<"CollectionShare", 'String'>
  readonly slug: Prisma.FieldRef<"CollectionShare", 'String'>
  readonly userId: Prisma.FieldRef<"CollectionShare", 'String'>
  readonly name: Prisma.FieldRef<"CollectionShare", 'String'>
  readonly createdAt: Prisma.FieldRef<"CollectionShare", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CollectionShare", 'DateTime'>
  readonly visibility: Prisma.FieldRef<"CollectionShare", 'CollectionShareVisibility'>
}
    

// Custom InputTypes
/**
 * CollectionShare findUnique
 */
export type CollectionShareFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShare to fetch.
   */
  where: Prisma.CollectionShareWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare findUniqueOrThrow
 */
export type CollectionShareFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShare to fetch.
   */
  where: Prisma.CollectionShareWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare findFirst
 */
export type CollectionShareFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShare to fetch.
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShares to fetch.
   */
  orderBy?: Prisma.CollectionShareOrderByWithRelationInput | Prisma.CollectionShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShares.
   */
  cursor?: Prisma.CollectionShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShares.
   */
  distinct?: Prisma.CollectionShareScalarFieldEnum | Prisma.CollectionShareScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare findFirstOrThrow
 */
export type CollectionShareFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShare to fetch.
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShares to fetch.
   */
  orderBy?: Prisma.CollectionShareOrderByWithRelationInput | Prisma.CollectionShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CollectionShares.
   */
  cursor?: Prisma.CollectionShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CollectionShares.
   */
  distinct?: Prisma.CollectionShareScalarFieldEnum | Prisma.CollectionShareScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare findMany
 */
export type CollectionShareFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter, which CollectionShares to fetch.
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CollectionShares to fetch.
   */
  orderBy?: Prisma.CollectionShareOrderByWithRelationInput | Prisma.CollectionShareOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CollectionShares.
   */
  cursor?: Prisma.CollectionShareWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CollectionShares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CollectionShares.
   */
  skip?: number
  distinct?: Prisma.CollectionShareScalarFieldEnum | Prisma.CollectionShareScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare create
 */
export type CollectionShareCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * The data needed to create a CollectionShare.
   */
  data: Prisma.XOR<Prisma.CollectionShareCreateInput, Prisma.CollectionShareUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare createMany
 */
export type CollectionShareCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CollectionShares.
   */
  data: Prisma.CollectionShareCreateManyInput | Prisma.CollectionShareCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CollectionShare createManyAndReturn
 */
export type CollectionShareCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * The data used to create many CollectionShares.
   */
  data: Prisma.CollectionShareCreateManyInput | Prisma.CollectionShareCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShare update
 */
export type CollectionShareUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * The data needed to update a CollectionShare.
   */
  data: Prisma.XOR<Prisma.CollectionShareUpdateInput, Prisma.CollectionShareUncheckedUpdateInput>
  /**
   * Choose, which CollectionShare to update.
   */
  where: Prisma.CollectionShareWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare updateMany
 */
export type CollectionShareUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CollectionShares.
   */
  data: Prisma.XOR<Prisma.CollectionShareUpdateManyMutationInput, Prisma.CollectionShareUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShares to update
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * Limit how many CollectionShares to update.
   */
  limit?: number
}

/**
 * CollectionShare updateManyAndReturn
 */
export type CollectionShareUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * The data used to update CollectionShares.
   */
  data: Prisma.XOR<Prisma.CollectionShareUpdateManyMutationInput, Prisma.CollectionShareUncheckedUpdateManyInput>
  /**
   * Filter which CollectionShares to update
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * Limit how many CollectionShares to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CollectionShare upsert
 */
export type CollectionShareUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * The filter to search for the CollectionShare to update in case it exists.
   */
  where: Prisma.CollectionShareWhereUniqueInput
  /**
   * In case the CollectionShare found by the `where` argument doesn't exist, create a new CollectionShare with this data.
   */
  create: Prisma.XOR<Prisma.CollectionShareCreateInput, Prisma.CollectionShareUncheckedCreateInput>
  /**
   * In case the CollectionShare was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CollectionShareUpdateInput, Prisma.CollectionShareUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare delete
 */
export type CollectionShareDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
  /**
   * Filter which CollectionShare to delete.
   */
  where: Prisma.CollectionShareWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * CollectionShare deleteMany
 */
export type CollectionShareDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CollectionShares to delete
   */
  where?: Prisma.CollectionShareWhereInput
  /**
   * Limit how many CollectionShares to delete.
   */
  limit?: number
}

/**
 * CollectionShare.collectionShareTweets
 */
export type CollectionShare$collectionShareTweetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareTweet
   */
  select?: Prisma.CollectionShareTweetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareTweet
   */
  omit?: Prisma.CollectionShareTweetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareTweetInclude<ExtArgs> | null
  where?: Prisma.CollectionShareTweetWhereInput
  orderBy?: Prisma.CollectionShareTweetOrderByWithRelationInput | Prisma.CollectionShareTweetOrderByWithRelationInput[]
  cursor?: Prisma.CollectionShareTweetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CollectionShareTweetScalarFieldEnum | Prisma.CollectionShareTweetScalarFieldEnum[]
}

/**
 * CollectionShare.collectionShareAuthors
 */
export type CollectionShare$collectionShareAuthorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShareAuthor
   */
  select?: Prisma.CollectionShareAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShareAuthor
   */
  omit?: Prisma.CollectionShareAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareAuthorInclude<ExtArgs> | null
  where?: Prisma.CollectionShareAuthorWhereInput
  orderBy?: Prisma.CollectionShareAuthorOrderByWithRelationInput | Prisma.CollectionShareAuthorOrderByWithRelationInput[]
  cursor?: Prisma.CollectionShareAuthorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CollectionShareAuthorScalarFieldEnum | Prisma.CollectionShareAuthorScalarFieldEnum[]
}

/**
 * CollectionShare without action
 */
export type CollectionShareDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CollectionShare
   */
  select?: Prisma.CollectionShareSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CollectionShare
   */
  omit?: Prisma.CollectionShareOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CollectionShareInclude<ExtArgs> | null
}
