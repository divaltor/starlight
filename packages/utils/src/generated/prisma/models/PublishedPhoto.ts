
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PublishedPhoto` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PublishedPhoto
 * 
 */
export type PublishedPhotoModel = runtime.Types.Result.DefaultSelection<Prisma.$PublishedPhotoPayload>

export type AggregatePublishedPhoto = {
  _count: PublishedPhotoCountAggregateOutputType | null
  _avg: PublishedPhotoAvgAggregateOutputType | null
  _sum: PublishedPhotoSumAggregateOutputType | null
  _min: PublishedPhotoMinAggregateOutputType | null
  _max: PublishedPhotoMaxAggregateOutputType | null
}

export type PublishedPhotoAvgAggregateOutputType = {
  chatId: number | null
  messageId: number | null
}

export type PublishedPhotoSumAggregateOutputType = {
  chatId: bigint | null
  messageId: bigint | null
}

export type PublishedPhotoMinAggregateOutputType = {
  photoId: string | null
  userId: string | null
  chatId: bigint | null
  scheduledSlotId: string | null
  mediaGroupId: string | null
  messageId: bigint | null
  telegramFileId: string | null
  telegramFileUniqueId: string | null
  publishedAt: Date | null
}

export type PublishedPhotoMaxAggregateOutputType = {
  photoId: string | null
  userId: string | null
  chatId: bigint | null
  scheduledSlotId: string | null
  mediaGroupId: string | null
  messageId: bigint | null
  telegramFileId: string | null
  telegramFileUniqueId: string | null
  publishedAt: Date | null
}

export type PublishedPhotoCountAggregateOutputType = {
  photoId: number
  userId: number
  chatId: number
  scheduledSlotId: number
  mediaGroupId: number
  messageId: number
  telegramFileId: number
  telegramFileUniqueId: number
  publishedAt: number
  _all: number
}


export type PublishedPhotoAvgAggregateInputType = {
  chatId?: true
  messageId?: true
}

export type PublishedPhotoSumAggregateInputType = {
  chatId?: true
  messageId?: true
}

export type PublishedPhotoMinAggregateInputType = {
  photoId?: true
  userId?: true
  chatId?: true
  scheduledSlotId?: true
  mediaGroupId?: true
  messageId?: true
  telegramFileId?: true
  telegramFileUniqueId?: true
  publishedAt?: true
}

export type PublishedPhotoMaxAggregateInputType = {
  photoId?: true
  userId?: true
  chatId?: true
  scheduledSlotId?: true
  mediaGroupId?: true
  messageId?: true
  telegramFileId?: true
  telegramFileUniqueId?: true
  publishedAt?: true
}

export type PublishedPhotoCountAggregateInputType = {
  photoId?: true
  userId?: true
  chatId?: true
  scheduledSlotId?: true
  mediaGroupId?: true
  messageId?: true
  telegramFileId?: true
  telegramFileUniqueId?: true
  publishedAt?: true
  _all?: true
}

export type PublishedPhotoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PublishedPhoto to aggregate.
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublishedPhotos to fetch.
   */
  orderBy?: Prisma.PublishedPhotoOrderByWithRelationInput | Prisma.PublishedPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PublishedPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublishedPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublishedPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PublishedPhotos
  **/
  _count?: true | PublishedPhotoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PublishedPhotoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PublishedPhotoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PublishedPhotoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PublishedPhotoMaxAggregateInputType
}

export type GetPublishedPhotoAggregateType<T extends PublishedPhotoAggregateArgs> = {
      [P in keyof T & keyof AggregatePublishedPhoto]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePublishedPhoto[P]>
    : Prisma.GetScalarType<T[P], AggregatePublishedPhoto[P]>
}




export type PublishedPhotoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PublishedPhotoWhereInput
  orderBy?: Prisma.PublishedPhotoOrderByWithAggregationInput | Prisma.PublishedPhotoOrderByWithAggregationInput[]
  by: Prisma.PublishedPhotoScalarFieldEnum[] | Prisma.PublishedPhotoScalarFieldEnum
  having?: Prisma.PublishedPhotoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PublishedPhotoCountAggregateInputType | true
  _avg?: PublishedPhotoAvgAggregateInputType
  _sum?: PublishedPhotoSumAggregateInputType
  _min?: PublishedPhotoMinAggregateInputType
  _max?: PublishedPhotoMaxAggregateInputType
}

export type PublishedPhotoGroupByOutputType = {
  photoId: string
  userId: string
  chatId: bigint
  scheduledSlotId: string | null
  mediaGroupId: string | null
  messageId: bigint
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt: Date
  _count: PublishedPhotoCountAggregateOutputType | null
  _avg: PublishedPhotoAvgAggregateOutputType | null
  _sum: PublishedPhotoSumAggregateOutputType | null
  _min: PublishedPhotoMinAggregateOutputType | null
  _max: PublishedPhotoMaxAggregateOutputType | null
}

type GetPublishedPhotoGroupByPayload<T extends PublishedPhotoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PublishedPhotoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PublishedPhotoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PublishedPhotoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PublishedPhotoGroupByOutputType[P]>
      }
    >
  >



export type PublishedPhotoWhereInput = {
  AND?: Prisma.PublishedPhotoWhereInput | Prisma.PublishedPhotoWhereInput[]
  OR?: Prisma.PublishedPhotoWhereInput[]
  NOT?: Prisma.PublishedPhotoWhereInput | Prisma.PublishedPhotoWhereInput[]
  photoId?: Prisma.StringFilter<"PublishedPhoto"> | string
  userId?: Prisma.UuidFilter<"PublishedPhoto"> | string
  chatId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  scheduledSlotId?: Prisma.UuidNullableFilter<"PublishedPhoto"> | string | null
  mediaGroupId?: Prisma.StringNullableFilter<"PublishedPhoto"> | string | null
  messageId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  telegramFileId?: Prisma.StringFilter<"PublishedPhoto"> | string
  telegramFileUniqueId?: Prisma.StringFilter<"PublishedPhoto"> | string
  publishedAt?: Prisma.DateTimeFilter<"PublishedPhoto"> | Date | string
  photo?: Prisma.XOR<Prisma.PhotoScalarRelationFilter, Prisma.PhotoWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  scheduledSlot?: Prisma.XOR<Prisma.ScheduledSlotNullableScalarRelationFilter, Prisma.ScheduledSlotWhereInput> | null
}

export type PublishedPhotoOrderByWithRelationInput = {
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrderInput | Prisma.SortOrder
  mediaGroupId?: Prisma.SortOrderInput | Prisma.SortOrder
  messageId?: Prisma.SortOrder
  telegramFileId?: Prisma.SortOrder
  telegramFileUniqueId?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  photo?: Prisma.PhotoOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  chat?: Prisma.ChatOrderByWithRelationInput
  scheduledSlot?: Prisma.ScheduledSlotOrderByWithRelationInput
}

export type PublishedPhotoWhereUniqueInput = Prisma.AtLeast<{
  photoId_userId_chatId?: Prisma.PublishedPhotoPhotoIdUserIdChatIdCompoundUniqueInput
  AND?: Prisma.PublishedPhotoWhereInput | Prisma.PublishedPhotoWhereInput[]
  OR?: Prisma.PublishedPhotoWhereInput[]
  NOT?: Prisma.PublishedPhotoWhereInput | Prisma.PublishedPhotoWhereInput[]
  photoId?: Prisma.StringFilter<"PublishedPhoto"> | string
  userId?: Prisma.UuidFilter<"PublishedPhoto"> | string
  chatId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  scheduledSlotId?: Prisma.UuidNullableFilter<"PublishedPhoto"> | string | null
  mediaGroupId?: Prisma.StringNullableFilter<"PublishedPhoto"> | string | null
  messageId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  telegramFileId?: Prisma.StringFilter<"PublishedPhoto"> | string
  telegramFileUniqueId?: Prisma.StringFilter<"PublishedPhoto"> | string
  publishedAt?: Prisma.DateTimeFilter<"PublishedPhoto"> | Date | string
  photo?: Prisma.XOR<Prisma.PhotoScalarRelationFilter, Prisma.PhotoWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chat?: Prisma.XOR<Prisma.ChatScalarRelationFilter, Prisma.ChatWhereInput>
  scheduledSlot?: Prisma.XOR<Prisma.ScheduledSlotNullableScalarRelationFilter, Prisma.ScheduledSlotWhereInput> | null
}, "photoId_userId_chatId">

export type PublishedPhotoOrderByWithAggregationInput = {
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrderInput | Prisma.SortOrder
  mediaGroupId?: Prisma.SortOrderInput | Prisma.SortOrder
  messageId?: Prisma.SortOrder
  telegramFileId?: Prisma.SortOrder
  telegramFileUniqueId?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  _count?: Prisma.PublishedPhotoCountOrderByAggregateInput
  _avg?: Prisma.PublishedPhotoAvgOrderByAggregateInput
  _max?: Prisma.PublishedPhotoMaxOrderByAggregateInput
  _min?: Prisma.PublishedPhotoMinOrderByAggregateInput
  _sum?: Prisma.PublishedPhotoSumOrderByAggregateInput
}

export type PublishedPhotoScalarWhereWithAggregatesInput = {
  AND?: Prisma.PublishedPhotoScalarWhereWithAggregatesInput | Prisma.PublishedPhotoScalarWhereWithAggregatesInput[]
  OR?: Prisma.PublishedPhotoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PublishedPhotoScalarWhereWithAggregatesInput | Prisma.PublishedPhotoScalarWhereWithAggregatesInput[]
  photoId?: Prisma.StringWithAggregatesFilter<"PublishedPhoto"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"PublishedPhoto"> | string
  chatId?: Prisma.BigIntWithAggregatesFilter<"PublishedPhoto"> | bigint | number
  scheduledSlotId?: Prisma.UuidNullableWithAggregatesFilter<"PublishedPhoto"> | string | null
  mediaGroupId?: Prisma.StringNullableWithAggregatesFilter<"PublishedPhoto"> | string | null
  messageId?: Prisma.BigIntWithAggregatesFilter<"PublishedPhoto"> | bigint | number
  telegramFileId?: Prisma.StringWithAggregatesFilter<"PublishedPhoto"> | string
  telegramFileUniqueId?: Prisma.StringWithAggregatesFilter<"PublishedPhoto"> | string
  publishedAt?: Prisma.DateTimeWithAggregatesFilter<"PublishedPhoto"> | Date | string
}

export type PublishedPhotoCreateInput = {
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
  photo: Prisma.PhotoCreateNestedOneWithoutPublishedPhotosInput
  user: Prisma.UserCreateNestedOneWithoutPublishedPhotosInput
  chat: Prisma.ChatCreateNestedOneWithoutPublishedPhotosInput
  scheduledSlot?: Prisma.ScheduledSlotCreateNestedOneWithoutPublishedPhotosInput
}

export type PublishedPhotoUncheckedCreateInput = {
  photoId: string
  userId: string
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  photo?: Prisma.PhotoUpdateOneRequiredWithoutPublishedPhotosNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutPublishedPhotosNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublishedPhotosNestedInput
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneWithoutPublishedPhotosNestedInput
}

export type PublishedPhotoUncheckedUpdateInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoCreateManyInput = {
  photoId: string
  userId: string
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateManyMutationInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoUncheckedUpdateManyInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoListRelationFilter = {
  every?: Prisma.PublishedPhotoWhereInput
  some?: Prisma.PublishedPhotoWhereInput
  none?: Prisma.PublishedPhotoWhereInput
}

export type PublishedPhotoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PublishedPhotoPhotoIdUserIdChatIdCompoundUniqueInput = {
  photoId: string
  userId: string
  chatId: bigint | number
}

export type PublishedPhotoCountOrderByAggregateInput = {
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  mediaGroupId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  telegramFileId?: Prisma.SortOrder
  telegramFileUniqueId?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
}

export type PublishedPhotoAvgOrderByAggregateInput = {
  chatId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
}

export type PublishedPhotoMaxOrderByAggregateInput = {
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  mediaGroupId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  telegramFileId?: Prisma.SortOrder
  telegramFileUniqueId?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
}

export type PublishedPhotoMinOrderByAggregateInput = {
  photoId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatId?: Prisma.SortOrder
  scheduledSlotId?: Prisma.SortOrder
  mediaGroupId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  telegramFileId?: Prisma.SortOrder
  telegramFileUniqueId?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
}

export type PublishedPhotoSumOrderByAggregateInput = {
  chatId?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
}

export type PublishedPhotoCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput> | Prisma.PublishedPhotoCreateWithoutUserInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutUserInput | Prisma.PublishedPhotoCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PublishedPhotoCreateManyUserInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput> | Prisma.PublishedPhotoCreateWithoutUserInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutUserInput | Prisma.PublishedPhotoCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PublishedPhotoCreateManyUserInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput> | Prisma.PublishedPhotoCreateWithoutUserInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutUserInput | Prisma.PublishedPhotoCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutUserInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PublishedPhotoCreateManyUserInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutUserInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutUserInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput> | Prisma.PublishedPhotoCreateWithoutUserInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutUserInput | Prisma.PublishedPhotoCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutUserInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PublishedPhotoCreateManyUserInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutUserInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutUserInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput> | Prisma.PublishedPhotoCreateWithoutChatInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutChatInput | Prisma.PublishedPhotoCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PublishedPhotoCreateManyChatInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUncheckedCreateNestedManyWithoutChatInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput> | Prisma.PublishedPhotoCreateWithoutChatInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutChatInput | Prisma.PublishedPhotoCreateOrConnectWithoutChatInput[]
  createMany?: Prisma.PublishedPhotoCreateManyChatInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput> | Prisma.PublishedPhotoCreateWithoutChatInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutChatInput | Prisma.PublishedPhotoCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutChatInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PublishedPhotoCreateManyChatInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutChatInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutChatInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoUncheckedUpdateManyWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput> | Prisma.PublishedPhotoCreateWithoutChatInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutChatInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutChatInput | Prisma.PublishedPhotoCreateOrConnectWithoutChatInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutChatInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutChatInput[]
  createMany?: Prisma.PublishedPhotoCreateManyChatInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutChatInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutChatInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutChatInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutChatInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoCreateNestedManyWithoutPhotoInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput> | Prisma.PublishedPhotoCreateWithoutPhotoInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput | Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput[]
  createMany?: Prisma.PublishedPhotoCreateManyPhotoInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUncheckedCreateNestedManyWithoutPhotoInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput> | Prisma.PublishedPhotoCreateWithoutPhotoInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput | Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput[]
  createMany?: Prisma.PublishedPhotoCreateManyPhotoInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUpdateManyWithoutPhotoNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput> | Prisma.PublishedPhotoCreateWithoutPhotoInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput | Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutPhotoInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutPhotoInput[]
  createMany?: Prisma.PublishedPhotoCreateManyPhotoInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutPhotoInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutPhotoInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutPhotoInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutPhotoInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoUncheckedUpdateManyWithoutPhotoNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput> | Prisma.PublishedPhotoCreateWithoutPhotoInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput | Prisma.PublishedPhotoCreateOrConnectWithoutPhotoInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutPhotoInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutPhotoInput[]
  createMany?: Prisma.PublishedPhotoCreateManyPhotoInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutPhotoInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutPhotoInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutPhotoInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutPhotoInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoCreateNestedManyWithoutScheduledSlotInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput> | Prisma.PublishedPhotoCreateWithoutScheduledSlotInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput | Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput[]
  createMany?: Prisma.PublishedPhotoCreateManyScheduledSlotInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUncheckedCreateNestedManyWithoutScheduledSlotInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput> | Prisma.PublishedPhotoCreateWithoutScheduledSlotInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput | Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput[]
  createMany?: Prisma.PublishedPhotoCreateManyScheduledSlotInputEnvelope
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
}

export type PublishedPhotoUpdateManyWithoutScheduledSlotNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput> | Prisma.PublishedPhotoCreateWithoutScheduledSlotInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput | Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutScheduledSlotInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutScheduledSlotInput[]
  createMany?: Prisma.PublishedPhotoCreateManyScheduledSlotInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutScheduledSlotInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutScheduledSlotInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutScheduledSlotInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutScheduledSlotInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoUncheckedUpdateManyWithoutScheduledSlotNestedInput = {
  create?: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput> | Prisma.PublishedPhotoCreateWithoutScheduledSlotInput[] | Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput[]
  connectOrCreate?: Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput | Prisma.PublishedPhotoCreateOrConnectWithoutScheduledSlotInput[]
  upsert?: Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutScheduledSlotInput | Prisma.PublishedPhotoUpsertWithWhereUniqueWithoutScheduledSlotInput[]
  createMany?: Prisma.PublishedPhotoCreateManyScheduledSlotInputEnvelope
  set?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  disconnect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  delete?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  connect?: Prisma.PublishedPhotoWhereUniqueInput | Prisma.PublishedPhotoWhereUniqueInput[]
  update?: Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutScheduledSlotInput | Prisma.PublishedPhotoUpdateWithWhereUniqueWithoutScheduledSlotInput[]
  updateMany?: Prisma.PublishedPhotoUpdateManyWithWhereWithoutScheduledSlotInput | Prisma.PublishedPhotoUpdateManyWithWhereWithoutScheduledSlotInput[]
  deleteMany?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
}

export type PublishedPhotoCreateWithoutUserInput = {
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
  photo: Prisma.PhotoCreateNestedOneWithoutPublishedPhotosInput
  chat: Prisma.ChatCreateNestedOneWithoutPublishedPhotosInput
  scheduledSlot?: Prisma.ScheduledSlotCreateNestedOneWithoutPublishedPhotosInput
}

export type PublishedPhotoUncheckedCreateWithoutUserInput = {
  photoId: string
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoCreateOrConnectWithoutUserInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput>
}

export type PublishedPhotoCreateManyUserInputEnvelope = {
  data: Prisma.PublishedPhotoCreateManyUserInput | Prisma.PublishedPhotoCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PublishedPhotoUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutUserInput, Prisma.PublishedPhotoUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutUserInput, Prisma.PublishedPhotoUncheckedCreateWithoutUserInput>
}

export type PublishedPhotoUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutUserInput, Prisma.PublishedPhotoUncheckedUpdateWithoutUserInput>
}

export type PublishedPhotoUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PublishedPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyWithoutUserInput>
}

export type PublishedPhotoScalarWhereInput = {
  AND?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
  OR?: Prisma.PublishedPhotoScalarWhereInput[]
  NOT?: Prisma.PublishedPhotoScalarWhereInput | Prisma.PublishedPhotoScalarWhereInput[]
  photoId?: Prisma.StringFilter<"PublishedPhoto"> | string
  userId?: Prisma.UuidFilter<"PublishedPhoto"> | string
  chatId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  scheduledSlotId?: Prisma.UuidNullableFilter<"PublishedPhoto"> | string | null
  mediaGroupId?: Prisma.StringNullableFilter<"PublishedPhoto"> | string | null
  messageId?: Prisma.BigIntFilter<"PublishedPhoto"> | bigint | number
  telegramFileId?: Prisma.StringFilter<"PublishedPhoto"> | string
  telegramFileUniqueId?: Prisma.StringFilter<"PublishedPhoto"> | string
  publishedAt?: Prisma.DateTimeFilter<"PublishedPhoto"> | Date | string
}

export type PublishedPhotoCreateWithoutChatInput = {
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
  photo: Prisma.PhotoCreateNestedOneWithoutPublishedPhotosInput
  user: Prisma.UserCreateNestedOneWithoutPublishedPhotosInput
  scheduledSlot?: Prisma.ScheduledSlotCreateNestedOneWithoutPublishedPhotosInput
}

export type PublishedPhotoUncheckedCreateWithoutChatInput = {
  photoId: string
  userId: string
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoCreateOrConnectWithoutChatInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput>
}

export type PublishedPhotoCreateManyChatInputEnvelope = {
  data: Prisma.PublishedPhotoCreateManyChatInput | Prisma.PublishedPhotoCreateManyChatInput[]
  skipDuplicates?: boolean
}

export type PublishedPhotoUpsertWithWhereUniqueWithoutChatInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutChatInput, Prisma.PublishedPhotoUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutChatInput, Prisma.PublishedPhotoUncheckedCreateWithoutChatInput>
}

export type PublishedPhotoUpdateWithWhereUniqueWithoutChatInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutChatInput, Prisma.PublishedPhotoUncheckedUpdateWithoutChatInput>
}

export type PublishedPhotoUpdateManyWithWhereWithoutChatInput = {
  where: Prisma.PublishedPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyWithoutChatInput>
}

export type PublishedPhotoCreateWithoutPhotoInput = {
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPublishedPhotosInput
  chat: Prisma.ChatCreateNestedOneWithoutPublishedPhotosInput
  scheduledSlot?: Prisma.ScheduledSlotCreateNestedOneWithoutPublishedPhotosInput
}

export type PublishedPhotoUncheckedCreateWithoutPhotoInput = {
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoCreateOrConnectWithoutPhotoInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput>
}

export type PublishedPhotoCreateManyPhotoInputEnvelope = {
  data: Prisma.PublishedPhotoCreateManyPhotoInput | Prisma.PublishedPhotoCreateManyPhotoInput[]
  skipDuplicates?: boolean
}

export type PublishedPhotoUpsertWithWhereUniqueWithoutPhotoInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedUpdateWithoutPhotoInput>
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedCreateWithoutPhotoInput>
}

export type PublishedPhotoUpdateWithWhereUniqueWithoutPhotoInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutPhotoInput, Prisma.PublishedPhotoUncheckedUpdateWithoutPhotoInput>
}

export type PublishedPhotoUpdateManyWithWhereWithoutPhotoInput = {
  where: Prisma.PublishedPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyWithoutPhotoInput>
}

export type PublishedPhotoCreateWithoutScheduledSlotInput = {
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
  photo: Prisma.PhotoCreateNestedOneWithoutPublishedPhotosInput
  user: Prisma.UserCreateNestedOneWithoutPublishedPhotosInput
  chat: Prisma.ChatCreateNestedOneWithoutPublishedPhotosInput
}

export type PublishedPhotoUncheckedCreateWithoutScheduledSlotInput = {
  photoId: string
  userId: string
  chatId: bigint | number
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoCreateOrConnectWithoutScheduledSlotInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput>
}

export type PublishedPhotoCreateManyScheduledSlotInputEnvelope = {
  data: Prisma.PublishedPhotoCreateManyScheduledSlotInput | Prisma.PublishedPhotoCreateManyScheduledSlotInput[]
  skipDuplicates?: boolean
}

export type PublishedPhotoUpsertWithWhereUniqueWithoutScheduledSlotInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  update: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedUpdateWithoutScheduledSlotInput>
  create: Prisma.XOR<Prisma.PublishedPhotoCreateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedCreateWithoutScheduledSlotInput>
}

export type PublishedPhotoUpdateWithWhereUniqueWithoutScheduledSlotInput = {
  where: Prisma.PublishedPhotoWhereUniqueInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateWithoutScheduledSlotInput, Prisma.PublishedPhotoUncheckedUpdateWithoutScheduledSlotInput>
}

export type PublishedPhotoUpdateManyWithWhereWithoutScheduledSlotInput = {
  where: Prisma.PublishedPhotoScalarWhereInput
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyWithoutScheduledSlotInput>
}

export type PublishedPhotoCreateManyUserInput = {
  photoId: string
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateWithoutUserInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  photo?: Prisma.PhotoUpdateOneRequiredWithoutPublishedPhotosNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublishedPhotosNestedInput
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneWithoutPublishedPhotosNestedInput
}

export type PublishedPhotoUncheckedUpdateWithoutUserInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoUncheckedUpdateManyWithoutUserInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoCreateManyChatInput = {
  photoId: string
  userId: string
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateWithoutChatInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  photo?: Prisma.PhotoUpdateOneRequiredWithoutPublishedPhotosNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutPublishedPhotosNestedInput
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneWithoutPublishedPhotosNestedInput
}

export type PublishedPhotoUncheckedUpdateWithoutChatInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoUncheckedUpdateManyWithoutChatInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoCreateManyPhotoInput = {
  chatId: bigint | number
  scheduledSlotId?: string | null
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateWithoutPhotoInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPublishedPhotosNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublishedPhotosNestedInput
  scheduledSlot?: Prisma.ScheduledSlotUpdateOneWithoutPublishedPhotosNestedInput
}

export type PublishedPhotoUncheckedUpdateWithoutPhotoInput = {
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoUncheckedUpdateManyWithoutPhotoInput = {
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  scheduledSlotId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoCreateManyScheduledSlotInput = {
  photoId: string
  userId: string
  chatId: bigint | number
  mediaGroupId?: string | null
  messageId: bigint | number
  telegramFileId: string
  telegramFileUniqueId: string
  publishedAt?: Date | string
}

export type PublishedPhotoUpdateWithoutScheduledSlotInput = {
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  photo?: Prisma.PhotoUpdateOneRequiredWithoutPublishedPhotosNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutPublishedPhotosNestedInput
  chat?: Prisma.ChatUpdateOneRequiredWithoutPublishedPhotosNestedInput
}

export type PublishedPhotoUncheckedUpdateWithoutScheduledSlotInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PublishedPhotoUncheckedUpdateManyWithoutScheduledSlotInput = {
  photoId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  chatId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mediaGroupId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  messageId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  telegramFileId?: Prisma.StringFieldUpdateOperationsInput | string
  telegramFileUniqueId?: Prisma.StringFieldUpdateOperationsInput | string
  publishedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PublishedPhotoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  photoId?: boolean
  userId?: boolean
  chatId?: boolean
  scheduledSlotId?: boolean
  mediaGroupId?: boolean
  messageId?: boolean
  telegramFileId?: boolean
  telegramFileUniqueId?: boolean
  publishedAt?: boolean
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}, ExtArgs["result"]["publishedPhoto"]>

export type PublishedPhotoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  photoId?: boolean
  userId?: boolean
  chatId?: boolean
  scheduledSlotId?: boolean
  mediaGroupId?: boolean
  messageId?: boolean
  telegramFileId?: boolean
  telegramFileUniqueId?: boolean
  publishedAt?: boolean
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}, ExtArgs["result"]["publishedPhoto"]>

export type PublishedPhotoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  photoId?: boolean
  userId?: boolean
  chatId?: boolean
  scheduledSlotId?: boolean
  mediaGroupId?: boolean
  messageId?: boolean
  telegramFileId?: boolean
  telegramFileUniqueId?: boolean
  publishedAt?: boolean
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}, ExtArgs["result"]["publishedPhoto"]>

export type PublishedPhotoSelectScalar = {
  photoId?: boolean
  userId?: boolean
  chatId?: boolean
  scheduledSlotId?: boolean
  mediaGroupId?: boolean
  messageId?: boolean
  telegramFileId?: boolean
  telegramFileUniqueId?: boolean
  publishedAt?: boolean
}

export type PublishedPhotoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"photoId" | "userId" | "chatId" | "scheduledSlotId" | "mediaGroupId" | "messageId" | "telegramFileId" | "telegramFileUniqueId" | "publishedAt", ExtArgs["result"]["publishedPhoto"]>
export type PublishedPhotoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}
export type PublishedPhotoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}
export type PublishedPhotoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  photo?: boolean | Prisma.PhotoDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chat?: boolean | Prisma.ChatDefaultArgs<ExtArgs>
  scheduledSlot?: boolean | Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>
}

export type $PublishedPhotoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PublishedPhoto"
  objects: {
    photo: Prisma.$PhotoPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
    chat: Prisma.$ChatPayload<ExtArgs>
    scheduledSlot: Prisma.$ScheduledSlotPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    photoId: string
    userId: string
    chatId: bigint
    scheduledSlotId: string | null
    mediaGroupId: string | null
    messageId: bigint
    telegramFileId: string
    telegramFileUniqueId: string
    publishedAt: Date
  }, ExtArgs["result"]["publishedPhoto"]>
  composites: {}
}

export type PublishedPhotoGetPayload<S extends boolean | null | undefined | PublishedPhotoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload, S>

export type PublishedPhotoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PublishedPhotoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: PublishedPhotoCountAggregateInputType | true
  }

export interface PublishedPhotoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublishedPhoto'], meta: { name: 'PublishedPhoto' } }
  /**
   * Find zero or one PublishedPhoto that matches the filter.
   * @param {PublishedPhotoFindUniqueArgs} args - Arguments to find a PublishedPhoto
   * @example
   * // Get one PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PublishedPhotoFindUniqueArgs>(args: Prisma.SelectSubset<T, PublishedPhotoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PublishedPhoto that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PublishedPhotoFindUniqueOrThrowArgs} args - Arguments to find a PublishedPhoto
   * @example
   * // Get one PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PublishedPhotoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PublishedPhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PublishedPhoto that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoFindFirstArgs} args - Arguments to find a PublishedPhoto
   * @example
   * // Get one PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PublishedPhotoFindFirstArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoFindFirstArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PublishedPhoto that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoFindFirstOrThrowArgs} args - Arguments to find a PublishedPhoto
   * @example
   * // Get one PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PublishedPhotoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PublishedPhotos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PublishedPhotos
   * const publishedPhotos = await prisma.publishedPhoto.findMany()
   * 
   * // Get first 10 PublishedPhotos
   * const publishedPhotos = await prisma.publishedPhoto.findMany({ take: 10 })
   * 
   * // Only select the `photoId`
   * const publishedPhotoWithPhotoIdOnly = await prisma.publishedPhoto.findMany({ select: { photoId: true } })
   * 
   */
  findMany<T extends PublishedPhotoFindManyArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PublishedPhoto.
   * @param {PublishedPhotoCreateArgs} args - Arguments to create a PublishedPhoto.
   * @example
   * // Create one PublishedPhoto
   * const PublishedPhoto = await prisma.publishedPhoto.create({
   *   data: {
   *     // ... data to create a PublishedPhoto
   *   }
   * })
   * 
   */
  create<T extends PublishedPhotoCreateArgs>(args: Prisma.SelectSubset<T, PublishedPhotoCreateArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PublishedPhotos.
   * @param {PublishedPhotoCreateManyArgs} args - Arguments to create many PublishedPhotos.
   * @example
   * // Create many PublishedPhotos
   * const publishedPhoto = await prisma.publishedPhoto.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PublishedPhotoCreateManyArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PublishedPhotos and returns the data saved in the database.
   * @param {PublishedPhotoCreateManyAndReturnArgs} args - Arguments to create many PublishedPhotos.
   * @example
   * // Create many PublishedPhotos
   * const publishedPhoto = await prisma.publishedPhoto.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PublishedPhotos and only return the `photoId`
   * const publishedPhotoWithPhotoIdOnly = await prisma.publishedPhoto.createManyAndReturn({
   *   select: { photoId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PublishedPhotoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PublishedPhoto.
   * @param {PublishedPhotoDeleteArgs} args - Arguments to delete one PublishedPhoto.
   * @example
   * // Delete one PublishedPhoto
   * const PublishedPhoto = await prisma.publishedPhoto.delete({
   *   where: {
   *     // ... filter to delete one PublishedPhoto
   *   }
   * })
   * 
   */
  delete<T extends PublishedPhotoDeleteArgs>(args: Prisma.SelectSubset<T, PublishedPhotoDeleteArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PublishedPhoto.
   * @param {PublishedPhotoUpdateArgs} args - Arguments to update one PublishedPhoto.
   * @example
   * // Update one PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PublishedPhotoUpdateArgs>(args: Prisma.SelectSubset<T, PublishedPhotoUpdateArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PublishedPhotos.
   * @param {PublishedPhotoDeleteManyArgs} args - Arguments to filter PublishedPhotos to delete.
   * @example
   * // Delete a few PublishedPhotos
   * const { count } = await prisma.publishedPhoto.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PublishedPhotoDeleteManyArgs>(args?: Prisma.SelectSubset<T, PublishedPhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PublishedPhotos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PublishedPhotos
   * const publishedPhoto = await prisma.publishedPhoto.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PublishedPhotoUpdateManyArgs>(args: Prisma.SelectSubset<T, PublishedPhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PublishedPhotos and returns the data updated in the database.
   * @param {PublishedPhotoUpdateManyAndReturnArgs} args - Arguments to update many PublishedPhotos.
   * @example
   * // Update many PublishedPhotos
   * const publishedPhoto = await prisma.publishedPhoto.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PublishedPhotos and only return the `photoId`
   * const publishedPhotoWithPhotoIdOnly = await prisma.publishedPhoto.updateManyAndReturn({
   *   select: { photoId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PublishedPhotoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PublishedPhotoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PublishedPhoto.
   * @param {PublishedPhotoUpsertArgs} args - Arguments to update or create a PublishedPhoto.
   * @example
   * // Update or create a PublishedPhoto
   * const publishedPhoto = await prisma.publishedPhoto.upsert({
   *   create: {
   *     // ... data to create a PublishedPhoto
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PublishedPhoto we want to update
   *   }
   * })
   */
  upsert<T extends PublishedPhotoUpsertArgs>(args: Prisma.SelectSubset<T, PublishedPhotoUpsertArgs<ExtArgs>>): Prisma.Prisma__PublishedPhotoClient<runtime.Types.Result.GetResult<Prisma.$PublishedPhotoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PublishedPhotos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoCountArgs} args - Arguments to filter PublishedPhotos to count.
   * @example
   * // Count the number of PublishedPhotos
   * const count = await prisma.publishedPhoto.count({
   *   where: {
   *     // ... the filter for the PublishedPhotos we want to count
   *   }
   * })
  **/
  count<T extends PublishedPhotoCountArgs>(
    args?: Prisma.Subset<T, PublishedPhotoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PublishedPhotoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PublishedPhoto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PublishedPhotoAggregateArgs>(args: Prisma.Subset<T, PublishedPhotoAggregateArgs>): Prisma.PrismaPromise<GetPublishedPhotoAggregateType<T>>

  /**
   * Group by PublishedPhoto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PublishedPhotoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PublishedPhotoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PublishedPhotoGroupByArgs['orderBy'] }
      : { orderBy?: PublishedPhotoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PublishedPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublishedPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PublishedPhoto model
 */
readonly fields: PublishedPhotoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PublishedPhoto.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PublishedPhotoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  photo<T extends Prisma.PhotoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PhotoDefaultArgs<ExtArgs>>): Prisma.Prisma__PhotoClient<runtime.Types.Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chat<T extends Prisma.ChatDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatClient<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  scheduledSlot<T extends Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PublishedPhoto$scheduledSlotArgs<ExtArgs>>): Prisma.Prisma__ScheduledSlotClient<runtime.Types.Result.GetResult<Prisma.$ScheduledSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PublishedPhoto model
 */
export interface PublishedPhotoFieldRefs {
  readonly photoId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly userId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly chatId: Prisma.FieldRef<"PublishedPhoto", 'BigInt'>
  readonly scheduledSlotId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly mediaGroupId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly messageId: Prisma.FieldRef<"PublishedPhoto", 'BigInt'>
  readonly telegramFileId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly telegramFileUniqueId: Prisma.FieldRef<"PublishedPhoto", 'String'>
  readonly publishedAt: Prisma.FieldRef<"PublishedPhoto", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PublishedPhoto findUnique
 */
export type PublishedPhotoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter, which PublishedPhoto to fetch.
   */
  where: Prisma.PublishedPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto findUniqueOrThrow
 */
export type PublishedPhotoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter, which PublishedPhoto to fetch.
   */
  where: Prisma.PublishedPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto findFirst
 */
export type PublishedPhotoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter, which PublishedPhoto to fetch.
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublishedPhotos to fetch.
   */
  orderBy?: Prisma.PublishedPhotoOrderByWithRelationInput | Prisma.PublishedPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PublishedPhotos.
   */
  cursor?: Prisma.PublishedPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublishedPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublishedPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PublishedPhotos.
   */
  distinct?: Prisma.PublishedPhotoScalarFieldEnum | Prisma.PublishedPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto findFirstOrThrow
 */
export type PublishedPhotoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter, which PublishedPhoto to fetch.
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublishedPhotos to fetch.
   */
  orderBy?: Prisma.PublishedPhotoOrderByWithRelationInput | Prisma.PublishedPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PublishedPhotos.
   */
  cursor?: Prisma.PublishedPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublishedPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublishedPhotos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PublishedPhotos.
   */
  distinct?: Prisma.PublishedPhotoScalarFieldEnum | Prisma.PublishedPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto findMany
 */
export type PublishedPhotoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter, which PublishedPhotos to fetch.
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PublishedPhotos to fetch.
   */
  orderBy?: Prisma.PublishedPhotoOrderByWithRelationInput | Prisma.PublishedPhotoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PublishedPhotos.
   */
  cursor?: Prisma.PublishedPhotoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PublishedPhotos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PublishedPhotos.
   */
  skip?: number
  distinct?: Prisma.PublishedPhotoScalarFieldEnum | Prisma.PublishedPhotoScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto create
 */
export type PublishedPhotoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * The data needed to create a PublishedPhoto.
   */
  data: Prisma.XOR<Prisma.PublishedPhotoCreateInput, Prisma.PublishedPhotoUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto createMany
 */
export type PublishedPhotoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PublishedPhotos.
   */
  data: Prisma.PublishedPhotoCreateManyInput | Prisma.PublishedPhotoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PublishedPhoto createManyAndReturn
 */
export type PublishedPhotoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * The data used to create many PublishedPhotos.
   */
  data: Prisma.PublishedPhotoCreateManyInput | Prisma.PublishedPhotoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PublishedPhoto update
 */
export type PublishedPhotoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * The data needed to update a PublishedPhoto.
   */
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateInput, Prisma.PublishedPhotoUncheckedUpdateInput>
  /**
   * Choose, which PublishedPhoto to update.
   */
  where: Prisma.PublishedPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto updateMany
 */
export type PublishedPhotoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PublishedPhotos.
   */
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyInput>
  /**
   * Filter which PublishedPhotos to update
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * Limit how many PublishedPhotos to update.
   */
  limit?: number
}

/**
 * PublishedPhoto updateManyAndReturn
 */
export type PublishedPhotoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * The data used to update PublishedPhotos.
   */
  data: Prisma.XOR<Prisma.PublishedPhotoUpdateManyMutationInput, Prisma.PublishedPhotoUncheckedUpdateManyInput>
  /**
   * Filter which PublishedPhotos to update
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * Limit how many PublishedPhotos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PublishedPhoto upsert
 */
export type PublishedPhotoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * The filter to search for the PublishedPhoto to update in case it exists.
   */
  where: Prisma.PublishedPhotoWhereUniqueInput
  /**
   * In case the PublishedPhoto found by the `where` argument doesn't exist, create a new PublishedPhoto with this data.
   */
  create: Prisma.XOR<Prisma.PublishedPhotoCreateInput, Prisma.PublishedPhotoUncheckedCreateInput>
  /**
   * In case the PublishedPhoto was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PublishedPhotoUpdateInput, Prisma.PublishedPhotoUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto delete
 */
export type PublishedPhotoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
  /**
   * Filter which PublishedPhoto to delete.
   */
  where: Prisma.PublishedPhotoWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * PublishedPhoto deleteMany
 */
export type PublishedPhotoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PublishedPhotos to delete
   */
  where?: Prisma.PublishedPhotoWhereInput
  /**
   * Limit how many PublishedPhotos to delete.
   */
  limit?: number
}

/**
 * PublishedPhoto.scheduledSlot
 */
export type PublishedPhoto$scheduledSlotArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScheduledSlot
   */
  select?: Prisma.ScheduledSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ScheduledSlot
   */
  omit?: Prisma.ScheduledSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduledSlotInclude<ExtArgs> | null
  where?: Prisma.ScheduledSlotWhereInput
}

/**
 * PublishedPhoto without action
 */
export type PublishedPhotoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PublishedPhoto
   */
  select?: Prisma.PublishedPhotoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PublishedPhoto
   */
  omit?: Prisma.PublishedPhotoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PublishedPhotoInclude<ExtArgs> | null
}
