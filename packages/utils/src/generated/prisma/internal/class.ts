
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/Users/divaltor/dev/starlight/packages/utils/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "runtime": "bun",
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "postgresqlExtensions",
      "relationJoins"
    ],
    "sourceFilePath": "/Users/divaltor/dev/starlight/packages/utils/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgvector(map: \"vector\")]\n}\n\ngenerator client {\n  provider        = \"prisma-client\"\n  output          = \"../src/generated/prisma\"\n  engineType      = \"client\"\n  previewFeatures = [\"relationJoins\", \"postgresqlExtensions\"]\n  runtime         = \"bun\"\n}\n\ngenerator json {\n  provider = \"prisma-json-types-generator\"\n}\n\nmodel User {\n  id         String  @id @default(uuid(7)) @db.Uuid\n  telegramId BigInt  @unique @map(\"telegram_id\")\n  username   String? @unique\n  firstName  String  @map(\"first_name\")\n  lastName   String? @map(\"last_name\")\n  isActive   Boolean @default(true) @map(\"is_active\")\n  isBot      Boolean @default(false) @map(\"is_bot\")\n  isPublic   Boolean @default(false) @map(\"is_public\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  tweets           Tweet[]\n  photos           Photo[]\n  publishedPhotos  PublishedPhoto[]\n  scheduledSlots   ScheduledSlot[]\n  postingChannels  PostingChannel?\n  collectionShares CollectionShare[]\n\n  @@map(\"users\")\n}\n\nmodel Chat {\n  // Telegram ID\n  id       BigInt  @id\n  title    String?\n  username String?\n\n  photoThumbnail String? @map(\"photo_thumbnail\")\n  photoBig       String? @map(\"photo_big\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  publishedPhotos PublishedPhoto[]\n  postingChannels PostingChannel[]\n\n  @@map(\"chats\")\n}\n\nmodel PostingChannel {\n  userId String @unique @map(\"user_id\") @db.Uuid\n  chatId BigInt @map(\"chat_id\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)\n  chat           Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  scheduledSlots ScheduledSlot[]\n\n  @@index([userId])\n  @@index([chatId])\n  @@map(\"posting_channels\")\n}\n\nmodel Tweet {\n  id     String\n  userId String @map(\"user_id\") @db.Uuid\n\n  /// [TweetType]\n  tweetData Json @map(\"tweet_data\")\n\n  // Virtual columns, manually generated in SQL migration\n  tweetText String? @default(dbgenerated()) @map(\"tweet_text\") @db.Text\n  username  String? @default(dbgenerated()) @map(\"username\") @db.Text\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  photos                Photo[]\n  user                  User                   @relation(fields: [userId], references: [id], onDelete: Restrict)\n  scheduledSlotTweets   ScheduledSlotTweet[]\n  collectionShareTweets CollectionShareTweet[]\n\n  @@id(name: \"tweetId\", [id, userId])\n  @@index([userId, createdAt(sort: Desc)])\n  @@index([tweetText])\n  @@index([username])\n  @@map(\"tweets\")\n}\n\nmodel Photo {\n  // Twitter ID\n  id             String\n  tweetId        String  @map(\"tweet_id\")\n  userId         String  @map(\"user_id\") @db.Uuid\n  s3Path         String? @map(\"s3_path\")\n  originalUrl    String  @map(\"original_url\")\n  perceptualHash String? @map(\"perceptual_hash\")\n\n  /// [ClassificationType]\n  classification Json? @map(\"classification\")\n\n  imageVec Unsupported(\"vector(1024)\")? @map(\"image_vec\")\n  tagVec   Unsupported(\"vector(1024)\")? @map(\"tag_vec\")\n\n  height Int? @map(\"height\")\n  width  Int? @map(\"width\")\n\n  // Generated hash bucket columns for similarity search\n  hashBucket4  String? @default(dbgenerated()) @map(\"hash_bucket_4\")\n  hashBucket8  String? @default(dbgenerated()) @map(\"hash_bucket_8\")\n  hashBucket12 String? @default(dbgenerated()) @map(\"hash_bucket_12\")\n\n  createdAt DateTime  @default(now()) @map(\"created_at\")\n  updatedAt DateTime  @updatedAt @map(\"updated_at\")\n  deletedAt DateTime? @map(\"deleted_at\")\n\n  // Relations\n  tweet               Tweet                @relation(fields: [tweetId, userId], references: [id, userId], onDelete: Restrict)\n  user                User                 @relation(fields: [userId], references: [id], onDelete: Restrict)\n  publishedPhotos     PublishedPhoto[]\n  scheduledSlotPhotos ScheduledSlotPhoto[]\n\n  @@id(name: \"photoId\", [id, userId])\n  @@index([tweetId])\n  @@index([perceptualHash])\n  @@index([hashBucket4])\n  @@index([hashBucket8])\n  @@index([hashBucket12])\n  @@index([s3Path])\n  @@index([deletedAt])\n  @@index([createdAt(sort: Desc)])\n  @@map(\"photos\")\n}\n\nmodel PublishedPhoto {\n  photoId         String  @map(\"photo_id\")\n  userId          String  @map(\"user_id\") @db.Uuid\n  chatId          BigInt  @map(\"chat_id\")\n  scheduledSlotId String? @map(\"scheduled_slot_id\") @db.Uuid\n\n  mediaGroupId         String? @map(\"media_group_id\")\n  messageId            BigInt  @map(\"message_id\")\n  telegramFileId       String  @map(\"telegram_file_id\")\n  telegramFileUniqueId String  @map(\"telegram_file_unique_id\")\n\n  publishedAt DateTime @default(now()) @map(\"published_at\")\n\n  // Relations\n  photo         Photo          @relation(fields: [photoId, userId], references: [id, userId], onDelete: Restrict)\n  user          User           @relation(fields: [userId], references: [id], onDelete: Restrict)\n  chat          Chat           @relation(fields: [chatId], references: [id], onDelete: Restrict)\n  scheduledSlot ScheduledSlot? @relation(fields: [scheduledSlotId], references: [id], onDelete: SetNull)\n\n  @@id([photoId, userId, chatId])\n  @@index([messageId])\n  @@index([scheduledSlotId])\n  @@map(\"published_photos\")\n}\n\nmodel ScheduledSlot {\n  id           String              @id @default(uuid(7)) @db.Uuid\n  userId       String              @map(\"user_id\") @db.Uuid\n  chatId       BigInt              @map(\"chat_id\")\n  scheduledFor DateTime?           @map(\"scheduled_for\")\n  status       ScheduledSlotStatus @default(WAITING)\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  user                User                 @relation(fields: [userId], references: [id], onDelete: Restrict)\n  postingChannel      PostingChannel       @relation(fields: [userId], references: [userId], onDelete: Cascade, map: \"posting_channel\")\n  publishedPhotos     PublishedPhoto[]\n  scheduledSlotTweets ScheduledSlotTweet[]\n\n  @@index([userId])\n  @@index([chatId])\n  @@index([status])\n  @@index([createdAt(sort: Desc)])\n  @@map(\"scheduled_slots\")\n}\n\nenum ScheduledSlotStatus {\n  WAITING\n  PUBLISHED\n  PUBLISHING\n}\n\nmodel ScheduledSlotTweet {\n  id              String @id @default(uuid(7)) @db.Uuid\n  scheduledSlotId String @map(\"scheduled_slot_id\") @db.Uuid\n  tweetId         String @map(\"tweet_id\")\n  userId          String @map(\"user_id\") @db.Uuid\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  // Relations\n  scheduledSlot       ScheduledSlot        @relation(fields: [scheduledSlotId], references: [id], onDelete: Cascade)\n  tweet               Tweet                @relation(fields: [tweetId, userId], references: [id, userId], onDelete: Restrict)\n  scheduledSlotPhotos ScheduledSlotPhoto[]\n\n  @@unique([scheduledSlotId, tweetId, userId])\n  @@index([scheduledSlotId])\n  @@index([tweetId, userId])\n  @@map(\"scheduled_slot_tweets\")\n}\n\nmodel ScheduledSlotPhoto {\n  id                   String @id @default(uuid(7)) @db.Uuid\n  scheduledSlotTweetId String @map(\"scheduled_slot_tweet_id\") @db.Uuid\n  photoId              String @map(\"photo_id\")\n  userId               String @map(\"user_id\") @db.Uuid\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  // Relations\n  scheduledSlotTweet ScheduledSlotTweet @relation(fields: [scheduledSlotTweetId], references: [id], onDelete: Cascade)\n  photo              Photo              @relation(fields: [photoId, userId], references: [id, userId], onDelete: Restrict)\n\n  @@unique([scheduledSlotTweetId, photoId, userId])\n  @@index([scheduledSlotTweetId])\n  @@index([photoId, userId])\n  @@map(\"scheduled_slot_photos\")\n}\n\nenum CollectionShareVisibility {\n  PUBLIC\n  PRIVATE\n}\n\nmodel CollectionShare {\n  id     String  @id @default(uuid(7)) @db.Uuid\n  slug   String  @unique @map(\"slug\")\n  userId String  @map(\"user_id\") @db.Uuid\n  name   String? @map(\"name\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n  updatedAt DateTime @updatedAt @map(\"updated_at\")\n\n  visibility CollectionShareVisibility @default(PUBLIC)\n\n  // Relations\n  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  collectionShareTweets  CollectionShareTweet[]\n  collectionShareAuthors CollectionShareAuthor[]\n\n  @@index([slug])\n  @@index([userId])\n  @@map(\"collection_shares\")\n}\n\nmodel CollectionShareTweet {\n  id                String @id @default(uuid(7)) @db.Uuid\n  collectionShareId String @map(\"collection_share_id\") @db.Uuid\n  tweetId           String @map(\"tweet_id\")\n  tweetUserId       String @map(\"tweet_user_id\") @db.Uuid\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  // Relations\n  collectionShare CollectionShare @relation(fields: [collectionShareId], references: [id], onDelete: Cascade)\n  tweet           Tweet           @relation(fields: [tweetId, tweetUserId], references: [id, userId], onDelete: Restrict)\n\n  @@unique([collectionShareId, tweetId, tweetUserId])\n  @@index([collectionShareId])\n  @@index([tweetId, tweetUserId])\n  @@map(\"collection_share_tweets\")\n}\n\nmodel CollectionShareAuthor {\n  id                String @id @default(uuid(7)) @db.Uuid\n  collectionShareId String @map(\"collection_share_id\") @db.Uuid\n  username          String @map(\"username\")\n\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  // Relations\n  collectionShare CollectionShare @relation(fields: [collectionShareId], references: [id], onDelete: Cascade)\n\n  @@unique([collectionShareId, username])\n  @@index([collectionShareId])\n  @@map(\"collection_share_authors\")\n}\n",
  "inlineSchemaHash": "c2377fd2237d96eae5e3693394fb575c48711cfafce8dec56dc3751ce07b34dd",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"telegramId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"telegram_id\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"first_name\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"last_name\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"isBot\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_bot\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_public\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"tweets\",\"kind\":\"object\",\"type\":\"Tweet\",\"relationName\":\"TweetToUser\"},{\"name\":\"photos\",\"kind\":\"object\",\"type\":\"Photo\",\"relationName\":\"PhotoToUser\"},{\"name\":\"publishedPhotos\",\"kind\":\"object\",\"type\":\"PublishedPhoto\",\"relationName\":\"PublishedPhotoToUser\"},{\"name\":\"scheduledSlots\",\"kind\":\"object\",\"type\":\"ScheduledSlot\",\"relationName\":\"ScheduledSlotToUser\"},{\"name\":\"postingChannels\",\"kind\":\"object\",\"type\":\"PostingChannel\",\"relationName\":\"PostingChannelToUser\"},{\"name\":\"collectionShares\",\"kind\":\"object\",\"type\":\"CollectionShare\",\"relationName\":\"CollectionShareToUser\"}],\"dbName\":\"users\"},\"Chat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photoThumbnail\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"photo_thumbnail\"},{\"name\":\"photoBig\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"photo_big\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"publishedPhotos\",\"kind\":\"object\",\"type\":\"PublishedPhoto\",\"relationName\":\"ChatToPublishedPhoto\"},{\"name\":\"postingChannels\",\"kind\":\"object\",\"type\":\"PostingChannel\",\"relationName\":\"ChatToPostingChannel\"}],\"dbName\":\"chats\"},\"PostingChannel\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"chat_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostingChannelToUser\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToPostingChannel\"},{\"name\":\"scheduledSlots\",\"kind\":\"object\",\"type\":\"ScheduledSlot\",\"relationName\":\"PostingChannelToScheduledSlot\"}],\"dbName\":\"posting_channels\"},\"Tweet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"tweetData\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"tweet_data\"},{\"name\":\"tweetText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tweet_text\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"username\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"photos\",\"kind\":\"object\",\"type\":\"Photo\",\"relationName\":\"PhotoToTweet\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TweetToUser\"},{\"name\":\"scheduledSlotTweets\",\"kind\":\"object\",\"type\":\"ScheduledSlotTweet\",\"relationName\":\"ScheduledSlotTweetToTweet\"},{\"name\":\"collectionShareTweets\",\"kind\":\"object\",\"type\":\"CollectionShareTweet\",\"relationName\":\"CollectionShareTweetToTweet\"}],\"dbName\":\"tweets\"},\"Photo\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tweetId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tweet_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"s3Path\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"s3_path\"},{\"name\":\"originalUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"original_url\"},{\"name\":\"perceptualHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"perceptual_hash\"},{\"name\":\"classification\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"classification\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"height\"},{\"name\":\"width\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"width\"},{\"name\":\"hashBucket4\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"hash_bucket_4\"},{\"name\":\"hashBucket8\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"hash_bucket_8\"},{\"name\":\"hashBucket12\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"hash_bucket_12\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"deleted_at\"},{\"name\":\"tweet\",\"kind\":\"object\",\"type\":\"Tweet\",\"relationName\":\"PhotoToTweet\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PhotoToUser\"},{\"name\":\"publishedPhotos\",\"kind\":\"object\",\"type\":\"PublishedPhoto\",\"relationName\":\"PhotoToPublishedPhoto\"},{\"name\":\"scheduledSlotPhotos\",\"kind\":\"object\",\"type\":\"ScheduledSlotPhoto\",\"relationName\":\"PhotoToScheduledSlotPhoto\"}],\"dbName\":\"photos\"},\"PublishedPhoto\":{\"fields\":[{\"name\":\"photoId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"photo_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"chat_id\"},{\"name\":\"scheduledSlotId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"scheduled_slot_id\"},{\"name\":\"mediaGroupId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"media_group_id\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"message_id\"},{\"name\":\"telegramFileId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"telegram_file_id\"},{\"name\":\"telegramFileUniqueId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"telegram_file_unique_id\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"published_at\"},{\"name\":\"photo\",\"kind\":\"object\",\"type\":\"Photo\",\"relationName\":\"PhotoToPublishedPhoto\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PublishedPhotoToUser\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToPublishedPhoto\"},{\"name\":\"scheduledSlot\",\"kind\":\"object\",\"type\":\"ScheduledSlot\",\"relationName\":\"PublishedPhotoToScheduledSlot\"}],\"dbName\":\"published_photos\"},\"ScheduledSlot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"chat_id\"},{\"name\":\"scheduledFor\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"scheduled_for\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ScheduledSlotStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ScheduledSlotToUser\"},{\"name\":\"postingChannel\",\"kind\":\"object\",\"type\":\"PostingChannel\",\"relationName\":\"PostingChannelToScheduledSlot\"},{\"name\":\"publishedPhotos\",\"kind\":\"object\",\"type\":\"PublishedPhoto\",\"relationName\":\"PublishedPhotoToScheduledSlot\"},{\"name\":\"scheduledSlotTweets\",\"kind\":\"object\",\"type\":\"ScheduledSlotTweet\",\"relationName\":\"ScheduledSlotToScheduledSlotTweet\"}],\"dbName\":\"scheduled_slots\"},\"ScheduledSlotTweet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduledSlotId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"scheduled_slot_id\"},{\"name\":\"tweetId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tweet_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"scheduledSlot\",\"kind\":\"object\",\"type\":\"ScheduledSlot\",\"relationName\":\"ScheduledSlotToScheduledSlotTweet\"},{\"name\":\"tweet\",\"kind\":\"object\",\"type\":\"Tweet\",\"relationName\":\"ScheduledSlotTweetToTweet\"},{\"name\":\"scheduledSlotPhotos\",\"kind\":\"object\",\"type\":\"ScheduledSlotPhoto\",\"relationName\":\"ScheduledSlotPhotoToScheduledSlotTweet\"}],\"dbName\":\"scheduled_slot_tweets\"},\"ScheduledSlotPhoto\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduledSlotTweetId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"scheduled_slot_tweet_id\"},{\"name\":\"photoId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"photo_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"scheduledSlotTweet\",\"kind\":\"object\",\"type\":\"ScheduledSlotTweet\",\"relationName\":\"ScheduledSlotPhotoToScheduledSlotTweet\"},{\"name\":\"photo\",\"kind\":\"object\",\"type\":\"Photo\",\"relationName\":\"PhotoToScheduledSlotPhoto\"}],\"dbName\":\"scheduled_slot_photos\"},\"CollectionShare\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"slug\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"name\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"CollectionShareVisibility\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CollectionShareToUser\"},{\"name\":\"collectionShareTweets\",\"kind\":\"object\",\"type\":\"CollectionShareTweet\",\"relationName\":\"CollectionShareToCollectionShareTweet\"},{\"name\":\"collectionShareAuthors\",\"kind\":\"object\",\"type\":\"CollectionShareAuthor\",\"relationName\":\"CollectionShareToCollectionShareAuthor\"}],\"dbName\":\"collection_shares\"},\"CollectionShareTweet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"collectionShareId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"collection_share_id\"},{\"name\":\"tweetId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tweet_id\"},{\"name\":\"tweetUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"tweet_user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"collectionShare\",\"kind\":\"object\",\"type\":\"CollectionShare\",\"relationName\":\"CollectionShareToCollectionShareTweet\"},{\"name\":\"tweet\",\"kind\":\"object\",\"type\":\"Tweet\",\"relationName\":\"CollectionShareTweetToTweet\"}],\"dbName\":\"collection_share_tweets\"},\"CollectionShareAuthor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"collectionShareId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"collection_share_id\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"username\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"collectionShare\",\"kind\":\"object\",\"type\":\"CollectionShare\",\"relationName\":\"CollectionShareToCollectionShareAuthor\"}],\"dbName\":\"collection_share_authors\"}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.postingChannel`: Exposes CRUD operations for the **PostingChannel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostingChannels
    * const postingChannels = await prisma.postingChannel.findMany()
    * ```
    */
  get postingChannel(): Prisma.PostingChannelDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.tweet`: Exposes CRUD operations for the **Tweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweets
    * const tweets = await prisma.tweet.findMany()
    * ```
    */
  get tweet(): Prisma.TweetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.publishedPhoto`: Exposes CRUD operations for the **PublishedPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublishedPhotos
    * const publishedPhotos = await prisma.publishedPhoto.findMany()
    * ```
    */
  get publishedPhoto(): Prisma.PublishedPhotoDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.scheduledSlot`: Exposes CRUD operations for the **ScheduledSlot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledSlots
    * const scheduledSlots = await prisma.scheduledSlot.findMany()
    * ```
    */
  get scheduledSlot(): Prisma.ScheduledSlotDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.scheduledSlotTweet`: Exposes CRUD operations for the **ScheduledSlotTweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledSlotTweets
    * const scheduledSlotTweets = await prisma.scheduledSlotTweet.findMany()
    * ```
    */
  get scheduledSlotTweet(): Prisma.ScheduledSlotTweetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.scheduledSlotPhoto`: Exposes CRUD operations for the **ScheduledSlotPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledSlotPhotos
    * const scheduledSlotPhotos = await prisma.scheduledSlotPhoto.findMany()
    * ```
    */
  get scheduledSlotPhoto(): Prisma.ScheduledSlotPhotoDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.collectionShare`: Exposes CRUD operations for the **CollectionShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionShares
    * const collectionShares = await prisma.collectionShare.findMany()
    * ```
    */
  get collectionShare(): Prisma.CollectionShareDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.collectionShareTweet`: Exposes CRUD operations for the **CollectionShareTweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionShareTweets
    * const collectionShareTweets = await prisma.collectionShareTweet.findMany()
    * ```
    */
  get collectionShareTweet(): Prisma.CollectionShareTweetDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.collectionShareAuthor`: Exposes CRUD operations for the **CollectionShareAuthor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionShareAuthors
    * const collectionShareAuthors = await prisma.collectionShareAuthor.findMany()
    * ```
    */
  get collectionShareAuthor(): Prisma.CollectionShareAuthorDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
