
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models'
export type * from './prismaNamespace'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  User: 'User',
  Chat: 'Chat',
  PostingChannel: 'PostingChannel',
  Tweet: 'Tweet',
  Photo: 'Photo',
  PublishedPhoto: 'PublishedPhoto',
  ScheduledSlot: 'ScheduledSlot',
  ScheduledSlotTweet: 'ScheduledSlotTweet',
  ScheduledSlotPhoto: 'ScheduledSlotPhoto',
  CollectionShare: 'CollectionShare',
  CollectionShareTweet: 'CollectionShareTweet',
  CollectionShareAuthor: 'CollectionShareAuthor'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  isBot: 'isBot',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const RelationLoadStrategy = {
  query: 'query',
  join: 'join'
} as const

export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


export const ChatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  username: 'username',
  photoThumbnail: 'photoThumbnail',
  photoBig: 'photoBig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


export const PostingChannelScalarFieldEnum = {
  userId: 'userId',
  chatId: 'chatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PostingChannelScalarFieldEnum = (typeof PostingChannelScalarFieldEnum)[keyof typeof PostingChannelScalarFieldEnum]


export const TweetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tweetData: 'tweetData',
  tweetText: 'tweetText',
  username: 'username',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TweetScalarFieldEnum = (typeof TweetScalarFieldEnum)[keyof typeof TweetScalarFieldEnum]


export const PhotoScalarFieldEnum = {
  id: 'id',
  tweetId: 'tweetId',
  userId: 'userId',
  s3Path: 's3Path',
  originalUrl: 'originalUrl',
  perceptualHash: 'perceptualHash',
  classification: 'classification',
  height: 'height',
  width: 'width',
  hashBucket4: 'hashBucket4',
  hashBucket8: 'hashBucket8',
  hashBucket12: 'hashBucket12',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


export const PublishedPhotoScalarFieldEnum = {
  photoId: 'photoId',
  userId: 'userId',
  chatId: 'chatId',
  scheduledSlotId: 'scheduledSlotId',
  mediaGroupId: 'mediaGroupId',
  messageId: 'messageId',
  telegramFileId: 'telegramFileId',
  telegramFileUniqueId: 'telegramFileUniqueId',
  publishedAt: 'publishedAt'
} as const

export type PublishedPhotoScalarFieldEnum = (typeof PublishedPhotoScalarFieldEnum)[keyof typeof PublishedPhotoScalarFieldEnum]


export const ScheduledSlotScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  scheduledFor: 'scheduledFor',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ScheduledSlotScalarFieldEnum = (typeof ScheduledSlotScalarFieldEnum)[keyof typeof ScheduledSlotScalarFieldEnum]


export const ScheduledSlotTweetScalarFieldEnum = {
  id: 'id',
  scheduledSlotId: 'scheduledSlotId',
  tweetId: 'tweetId',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type ScheduledSlotTweetScalarFieldEnum = (typeof ScheduledSlotTweetScalarFieldEnum)[keyof typeof ScheduledSlotTweetScalarFieldEnum]


export const ScheduledSlotPhotoScalarFieldEnum = {
  id: 'id',
  scheduledSlotTweetId: 'scheduledSlotTweetId',
  photoId: 'photoId',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type ScheduledSlotPhotoScalarFieldEnum = (typeof ScheduledSlotPhotoScalarFieldEnum)[keyof typeof ScheduledSlotPhotoScalarFieldEnum]


export const CollectionShareScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  userId: 'userId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  visibility: 'visibility'
} as const

export type CollectionShareScalarFieldEnum = (typeof CollectionShareScalarFieldEnum)[keyof typeof CollectionShareScalarFieldEnum]


export const CollectionShareTweetScalarFieldEnum = {
  id: 'id',
  collectionShareId: 'collectionShareId',
  tweetId: 'tweetId',
  tweetUserId: 'tweetUserId',
  createdAt: 'createdAt'
} as const

export type CollectionShareTweetScalarFieldEnum = (typeof CollectionShareTweetScalarFieldEnum)[keyof typeof CollectionShareTweetScalarFieldEnum]


export const CollectionShareAuthorScalarFieldEnum = {
  id: 'id',
  collectionShareId: 'collectionShareId',
  username: 'username',
  createdAt: 'createdAt'
} as const

export type CollectionShareAuthorScalarFieldEnum = (typeof CollectionShareAuthorScalarFieldEnum)[keyof typeof CollectionShareAuthorScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]

