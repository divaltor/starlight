
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
export const prismaVersion: PrismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Chat: 'Chat',
  PostingChannel: 'PostingChannel',
  Tweet: 'Tweet',
  Photo: 'Photo',
  PublishedPhoto: 'PublishedPhoto',
  ScheduledSlot: 'ScheduledSlot',
  ScheduledSlotTweet: 'ScheduledSlotTweet',
  ScheduledSlotPhoto: 'ScheduledSlotPhoto',
  CollectionShare: 'CollectionShare',
  CollectionShareTweet: 'CollectionShareTweet',
  CollectionShareAuthor: 'CollectionShareAuthor'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "chat" | "postingChannel" | "tweet" | "photo" | "publishedPhoto" | "scheduledSlot" | "scheduledSlotTweet" | "scheduledSlotPhoto" | "collectionShare" | "collectionShareTweet" | "collectionShareAuthor"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Chat: {
      payload: Prisma.$ChatPayload<ExtArgs>
      fields: Prisma.ChatFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChatFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findFirst: {
          args: Prisma.ChatFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        findMany: {
          args: Prisma.ChatFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        create: {
          args: Prisma.ChatCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        createMany: {
          args: Prisma.ChatCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        delete: {
          args: Prisma.ChatDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        update: {
          args: Prisma.ChatUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        deleteMany: {
          args: Prisma.ChatDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChatUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChatUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[]
        }
        upsert: {
          args: Prisma.ChatUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>
        }
        aggregate: {
          args: Prisma.ChatAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat>
        }
        groupBy: {
          args: Prisma.ChatGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChatCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChatCountAggregateOutputType> | number
        }
      }
    }
    PostingChannel: {
      payload: Prisma.$PostingChannelPayload<ExtArgs>
      fields: Prisma.PostingChannelFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostingChannelFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostingChannelFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        findFirst: {
          args: Prisma.PostingChannelFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostingChannelFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        findMany: {
          args: Prisma.PostingChannelFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>[]
        }
        create: {
          args: Prisma.PostingChannelCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        createMany: {
          args: Prisma.PostingChannelCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostingChannelCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>[]
        }
        delete: {
          args: Prisma.PostingChannelDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        update: {
          args: Prisma.PostingChannelUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        deleteMany: {
          args: Prisma.PostingChannelDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostingChannelUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostingChannelUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>[]
        }
        upsert: {
          args: Prisma.PostingChannelUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostingChannelPayload>
        }
        aggregate: {
          args: Prisma.PostingChannelAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePostingChannel>
        }
        groupBy: {
          args: Prisma.PostingChannelGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostingChannelGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostingChannelCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostingChannelCountAggregateOutputType> | number
        }
      }
    }
    Tweet: {
      payload: Prisma.$TweetPayload<ExtArgs>
      fields: Prisma.TweetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TweetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TweetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        findFirst: {
          args: Prisma.TweetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TweetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        findMany: {
          args: Prisma.TweetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>[]
        }
        create: {
          args: Prisma.TweetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        createMany: {
          args: Prisma.TweetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TweetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>[]
        }
        delete: {
          args: Prisma.TweetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        update: {
          args: Prisma.TweetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        deleteMany: {
          args: Prisma.TweetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TweetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TweetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>[]
        }
        upsert: {
          args: Prisma.TweetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TweetPayload>
        }
        aggregate: {
          args: Prisma.TweetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTweet>
        }
        groupBy: {
          args: Prisma.TweetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TweetGroupByOutputType>[]
        }
        count: {
          args: Prisma.TweetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TweetCountAggregateOutputType> | number
        }
      }
    }
    Photo: {
      payload: Prisma.$PhotoPayload<ExtArgs>
      fields: Prisma.PhotoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PhotoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PhotoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        findFirst: {
          args: Prisma.PhotoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PhotoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        findMany: {
          args: Prisma.PhotoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>[]
        }
        create: {
          args: Prisma.PhotoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        createMany: {
          args: Prisma.PhotoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PhotoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>[]
        }
        delete: {
          args: Prisma.PhotoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        update: {
          args: Prisma.PhotoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        deleteMany: {
          args: Prisma.PhotoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PhotoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PhotoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>[]
        }
        upsert: {
          args: Prisma.PhotoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhotoPayload>
        }
        aggregate: {
          args: Prisma.PhotoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePhoto>
        }
        groupBy: {
          args: Prisma.PhotoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PhotoGroupByOutputType>[]
        }
        count: {
          args: Prisma.PhotoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PhotoCountAggregateOutputType> | number
        }
      }
    }
    PublishedPhoto: {
      payload: Prisma.$PublishedPhotoPayload<ExtArgs>
      fields: Prisma.PublishedPhotoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PublishedPhotoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PublishedPhotoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        findFirst: {
          args: Prisma.PublishedPhotoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PublishedPhotoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        findMany: {
          args: Prisma.PublishedPhotoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>[]
        }
        create: {
          args: Prisma.PublishedPhotoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        createMany: {
          args: Prisma.PublishedPhotoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PublishedPhotoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>[]
        }
        delete: {
          args: Prisma.PublishedPhotoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        update: {
          args: Prisma.PublishedPhotoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        deleteMany: {
          args: Prisma.PublishedPhotoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PublishedPhotoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PublishedPhotoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>[]
        }
        upsert: {
          args: Prisma.PublishedPhotoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PublishedPhotoPayload>
        }
        aggregate: {
          args: Prisma.PublishedPhotoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePublishedPhoto>
        }
        groupBy: {
          args: Prisma.PublishedPhotoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PublishedPhotoGroupByOutputType>[]
        }
        count: {
          args: Prisma.PublishedPhotoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PublishedPhotoCountAggregateOutputType> | number
        }
      }
    }
    ScheduledSlot: {
      payload: Prisma.$ScheduledSlotPayload<ExtArgs>
      fields: Prisma.ScheduledSlotFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScheduledSlotFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScheduledSlotFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        findFirst: {
          args: Prisma.ScheduledSlotFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScheduledSlotFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        findMany: {
          args: Prisma.ScheduledSlotFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>[]
        }
        create: {
          args: Prisma.ScheduledSlotCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        createMany: {
          args: Prisma.ScheduledSlotCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScheduledSlotCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>[]
        }
        delete: {
          args: Prisma.ScheduledSlotDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        update: {
          args: Prisma.ScheduledSlotUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        deleteMany: {
          args: Prisma.ScheduledSlotDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScheduledSlotUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScheduledSlotUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>[]
        }
        upsert: {
          args: Prisma.ScheduledSlotUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPayload>
        }
        aggregate: {
          args: Prisma.ScheduledSlotAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateScheduledSlot>
        }
        groupBy: {
          args: Prisma.ScheduledSlotGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScheduledSlotCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotCountAggregateOutputType> | number
        }
      }
    }
    ScheduledSlotTweet: {
      payload: Prisma.$ScheduledSlotTweetPayload<ExtArgs>
      fields: Prisma.ScheduledSlotTweetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScheduledSlotTweetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScheduledSlotTweetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        findFirst: {
          args: Prisma.ScheduledSlotTweetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScheduledSlotTweetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        findMany: {
          args: Prisma.ScheduledSlotTweetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>[]
        }
        create: {
          args: Prisma.ScheduledSlotTweetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        createMany: {
          args: Prisma.ScheduledSlotTweetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScheduledSlotTweetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>[]
        }
        delete: {
          args: Prisma.ScheduledSlotTweetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        update: {
          args: Prisma.ScheduledSlotTweetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        deleteMany: {
          args: Prisma.ScheduledSlotTweetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScheduledSlotTweetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScheduledSlotTweetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>[]
        }
        upsert: {
          args: Prisma.ScheduledSlotTweetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotTweetPayload>
        }
        aggregate: {
          args: Prisma.ScheduledSlotTweetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateScheduledSlotTweet>
        }
        groupBy: {
          args: Prisma.ScheduledSlotTweetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotTweetGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScheduledSlotTweetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotTweetCountAggregateOutputType> | number
        }
      }
    }
    ScheduledSlotPhoto: {
      payload: Prisma.$ScheduledSlotPhotoPayload<ExtArgs>
      fields: Prisma.ScheduledSlotPhotoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScheduledSlotPhotoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScheduledSlotPhotoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        findFirst: {
          args: Prisma.ScheduledSlotPhotoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScheduledSlotPhotoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        findMany: {
          args: Prisma.ScheduledSlotPhotoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>[]
        }
        create: {
          args: Prisma.ScheduledSlotPhotoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        createMany: {
          args: Prisma.ScheduledSlotPhotoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScheduledSlotPhotoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>[]
        }
        delete: {
          args: Prisma.ScheduledSlotPhotoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        update: {
          args: Prisma.ScheduledSlotPhotoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        deleteMany: {
          args: Prisma.ScheduledSlotPhotoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScheduledSlotPhotoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScheduledSlotPhotoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>[]
        }
        upsert: {
          args: Prisma.ScheduledSlotPhotoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScheduledSlotPhotoPayload>
        }
        aggregate: {
          args: Prisma.ScheduledSlotPhotoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateScheduledSlotPhoto>
        }
        groupBy: {
          args: Prisma.ScheduledSlotPhotoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotPhotoGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScheduledSlotPhotoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduledSlotPhotoCountAggregateOutputType> | number
        }
      }
    }
    CollectionShare: {
      payload: Prisma.$CollectionSharePayload<ExtArgs>
      fields: Prisma.CollectionShareFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CollectionShareFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CollectionShareFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        findFirst: {
          args: Prisma.CollectionShareFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CollectionShareFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        findMany: {
          args: Prisma.CollectionShareFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>[]
        }
        create: {
          args: Prisma.CollectionShareCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        createMany: {
          args: Prisma.CollectionShareCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CollectionShareCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>[]
        }
        delete: {
          args: Prisma.CollectionShareDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        update: {
          args: Prisma.CollectionShareUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        deleteMany: {
          args: Prisma.CollectionShareDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CollectionShareUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CollectionShareUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>[]
        }
        upsert: {
          args: Prisma.CollectionShareUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionSharePayload>
        }
        aggregate: {
          args: Prisma.CollectionShareAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCollectionShare>
        }
        groupBy: {
          args: Prisma.CollectionShareGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareGroupByOutputType>[]
        }
        count: {
          args: Prisma.CollectionShareCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareCountAggregateOutputType> | number
        }
      }
    }
    CollectionShareTweet: {
      payload: Prisma.$CollectionShareTweetPayload<ExtArgs>
      fields: Prisma.CollectionShareTweetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CollectionShareTweetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CollectionShareTweetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        findFirst: {
          args: Prisma.CollectionShareTweetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CollectionShareTweetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        findMany: {
          args: Prisma.CollectionShareTweetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>[]
        }
        create: {
          args: Prisma.CollectionShareTweetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        createMany: {
          args: Prisma.CollectionShareTweetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CollectionShareTweetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>[]
        }
        delete: {
          args: Prisma.CollectionShareTweetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        update: {
          args: Prisma.CollectionShareTweetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        deleteMany: {
          args: Prisma.CollectionShareTweetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CollectionShareTweetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CollectionShareTweetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>[]
        }
        upsert: {
          args: Prisma.CollectionShareTweetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareTweetPayload>
        }
        aggregate: {
          args: Prisma.CollectionShareTweetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCollectionShareTweet>
        }
        groupBy: {
          args: Prisma.CollectionShareTweetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareTweetGroupByOutputType>[]
        }
        count: {
          args: Prisma.CollectionShareTweetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareTweetCountAggregateOutputType> | number
        }
      }
    }
    CollectionShareAuthor: {
      payload: Prisma.$CollectionShareAuthorPayload<ExtArgs>
      fields: Prisma.CollectionShareAuthorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CollectionShareAuthorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CollectionShareAuthorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        findFirst: {
          args: Prisma.CollectionShareAuthorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CollectionShareAuthorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        findMany: {
          args: Prisma.CollectionShareAuthorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>[]
        }
        create: {
          args: Prisma.CollectionShareAuthorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        createMany: {
          args: Prisma.CollectionShareAuthorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CollectionShareAuthorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>[]
        }
        delete: {
          args: Prisma.CollectionShareAuthorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        update: {
          args: Prisma.CollectionShareAuthorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        deleteMany: {
          args: Prisma.CollectionShareAuthorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CollectionShareAuthorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CollectionShareAuthorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>[]
        }
        upsert: {
          args: Prisma.CollectionShareAuthorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CollectionShareAuthorPayload>
        }
        aggregate: {
          args: Prisma.CollectionShareAuthorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCollectionShareAuthor>
        }
        groupBy: {
          args: Prisma.CollectionShareAuthorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareAuthorGroupByOutputType>[]
        }
        count: {
          args: Prisma.CollectionShareAuthorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CollectionShareAuthorCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  isBot: 'isBot',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const RelationLoadStrategy = {
  query: 'query',
  join: 'join'
} as const

export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


export const ChatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  username: 'username',
  photoThumbnail: 'photoThumbnail',
  photoBig: 'photoBig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


export const PostingChannelScalarFieldEnum = {
  userId: 'userId',
  chatId: 'chatId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PostingChannelScalarFieldEnum = (typeof PostingChannelScalarFieldEnum)[keyof typeof PostingChannelScalarFieldEnum]


export const TweetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tweetData: 'tweetData',
  tweetText: 'tweetText',
  username: 'username',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TweetScalarFieldEnum = (typeof TweetScalarFieldEnum)[keyof typeof TweetScalarFieldEnum]


export const PhotoScalarFieldEnum = {
  id: 'id',
  tweetId: 'tweetId',
  userId: 'userId',
  s3Path: 's3Path',
  originalUrl: 'originalUrl',
  perceptualHash: 'perceptualHash',
  classification: 'classification',
  height: 'height',
  width: 'width',
  hashBucket4: 'hashBucket4',
  hashBucket8: 'hashBucket8',
  hashBucket12: 'hashBucket12',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


export const PublishedPhotoScalarFieldEnum = {
  photoId: 'photoId',
  userId: 'userId',
  chatId: 'chatId',
  scheduledSlotId: 'scheduledSlotId',
  mediaGroupId: 'mediaGroupId',
  messageId: 'messageId',
  telegramFileId: 'telegramFileId',
  telegramFileUniqueId: 'telegramFileUniqueId',
  publishedAt: 'publishedAt'
} as const

export type PublishedPhotoScalarFieldEnum = (typeof PublishedPhotoScalarFieldEnum)[keyof typeof PublishedPhotoScalarFieldEnum]


export const ScheduledSlotScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  scheduledFor: 'scheduledFor',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ScheduledSlotScalarFieldEnum = (typeof ScheduledSlotScalarFieldEnum)[keyof typeof ScheduledSlotScalarFieldEnum]


export const ScheduledSlotTweetScalarFieldEnum = {
  id: 'id',
  scheduledSlotId: 'scheduledSlotId',
  tweetId: 'tweetId',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type ScheduledSlotTweetScalarFieldEnum = (typeof ScheduledSlotTweetScalarFieldEnum)[keyof typeof ScheduledSlotTweetScalarFieldEnum]


export const ScheduledSlotPhotoScalarFieldEnum = {
  id: 'id',
  scheduledSlotTweetId: 'scheduledSlotTweetId',
  photoId: 'photoId',
  userId: 'userId',
  createdAt: 'createdAt'
} as const

export type ScheduledSlotPhotoScalarFieldEnum = (typeof ScheduledSlotPhotoScalarFieldEnum)[keyof typeof ScheduledSlotPhotoScalarFieldEnum]


export const CollectionShareScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  userId: 'userId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  visibility: 'visibility'
} as const

export type CollectionShareScalarFieldEnum = (typeof CollectionShareScalarFieldEnum)[keyof typeof CollectionShareScalarFieldEnum]


export const CollectionShareTweetScalarFieldEnum = {
  id: 'id',
  collectionShareId: 'collectionShareId',
  tweetId: 'tweetId',
  tweetUserId: 'tweetUserId',
  createdAt: 'createdAt'
} as const

export type CollectionShareTweetScalarFieldEnum = (typeof CollectionShareTweetScalarFieldEnum)[keyof typeof CollectionShareTweetScalarFieldEnum]


export const CollectionShareAuthorScalarFieldEnum = {
  id: 'id',
  collectionShareId: 'collectionShareId',
  username: 'username',
  createdAt: 'createdAt'
} as const

export type CollectionShareAuthorScalarFieldEnum = (typeof CollectionShareAuthorScalarFieldEnum)[keyof typeof CollectionShareAuthorScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


/**
 * Reference to a field of type 'BigInt[]'
 */
export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'ScheduledSlotStatus'
 */
export type EnumScheduledSlotStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScheduledSlotStatus'>
    


/**
 * Reference to a field of type 'ScheduledSlotStatus[]'
 */
export type ListEnumScheduledSlotStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScheduledSlotStatus[]'>
    


/**
 * Reference to a field of type 'CollectionShareVisibility'
 */
export type EnumCollectionShareVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CollectionShareVisibility'>
    


/**
 * Reference to a field of type 'CollectionShareVisibility[]'
 */
export type ListEnumCollectionShareVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CollectionShareVisibility[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  chat?: Prisma.ChatOmit
  postingChannel?: Prisma.PostingChannelOmit
  tweet?: Prisma.TweetOmit
  photo?: Prisma.PhotoOmit
  publishedPhoto?: Prisma.PublishedPhotoOmit
  scheduledSlot?: Prisma.ScheduledSlotOmit
  scheduledSlotTweet?: Prisma.ScheduledSlotTweetOmit
  scheduledSlotPhoto?: Prisma.ScheduledSlotPhotoOmit
  collectionShare?: Prisma.CollectionShareOmit
  collectionShareTweet?: Prisma.CollectionShareTweetOmit
  collectionShareAuthor?: Prisma.CollectionShareAuthorOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

