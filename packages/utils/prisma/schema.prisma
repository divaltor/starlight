datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [pgvector(map: "vector")]
}

generator client {
    provider        = "prisma-client"
    output          = "../src/generated/prisma"
    engineType      = "client"
    previewFeatures = ["relationJoins", "postgresqlExtensions"]
    runtime         = "bun"
}

generator json {
    provider = "prisma-json-types-generator"
}

model User {
    id         String  @id @default(uuid(7)) @db.Uuid
    telegramId BigInt  @unique @map("telegram_id")
    username   String? @unique
    firstName  String  @map("first_name")
    lastName   String? @map("last_name")
    isActive   Boolean @default(true) @map("is_active")
    isBot      Boolean @default(false) @map("is_bot")
    isPublic   Boolean @default(false) @map("is_public")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    tweets           Tweet[]
    photos           Photo[]
    publishedPhotos  PublishedPhoto[]
    scheduledSlots   ScheduledSlot[]
    postingChannels  PostingChannel?
    collectionShares CollectionShare[]

    @@map("users")
}

model Chat {
    // Telegram ID
    id       BigInt  @id
    title    String?
    username String?

    photoThumbnail String? @map("photo_thumbnail")
    photoBig       String? @map("photo_big")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    publishedPhotos PublishedPhoto[]
    postingChannels PostingChannel[]

    @@map("chats")
}

model PostingChannel {
    userId String @unique @map("user_id") @db.Uuid
    chatId BigInt @map("chat_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat           Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
    scheduledSlots ScheduledSlot[]

    @@index([userId])
    @@index([chatId])
    @@map("posting_channels")
}

model Tweet {
    id     String
    userId String @map("user_id") @db.Uuid

    /// [TweetType]
    tweetData Json @map("tweet_data")

    // Virtual columns, manually generated in SQL migration
    tweetText String? @default(dbgenerated()) @map("tweet_text") @db.Text
    username  String? @default(dbgenerated()) @map("username") @db.Text

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    photos                Photo[]
    user                  User                   @relation(fields: [userId], references: [id], onDelete: Restrict)
    scheduledSlotTweets   ScheduledSlotTweet[]
    collectionShareTweets CollectionShareTweet[]

    @@id(name: "tweetId", [id, userId])
    @@index([userId, createdAt(sort: Desc)])
    @@index([tweetText])
    @@index([username])
    @@map("tweets")
}

model Photo {
    // Twitter ID
    id             String
    tweetId        String  @map("tweet_id")
    userId         String  @map("user_id") @db.Uuid
    s3Path         String? @map("s3_path")
    originalUrl    String  @map("original_url")
    perceptualHash String? @map("perceptual_hash")

    /// [ClassificationType]
    classification Json? @map("classification")

    imageVec Unsupported("vector(1024)")? @map("image_vec")
    tagVec   Unsupported("vector(1024)")? @map("tag_vec")

    height Int? @map("height")
    width  Int? @map("width")

    // Generated hash bucket columns for similarity search
    hashBucket4  String? @default(dbgenerated()) @map("hash_bucket_4")
    hashBucket8  String? @default(dbgenerated()) @map("hash_bucket_8")
    hashBucket12 String? @default(dbgenerated()) @map("hash_bucket_12")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    tweet               Tweet                @relation(fields: [tweetId, userId], references: [id, userId], onDelete: Restrict)
    user                User                 @relation(fields: [userId], references: [id], onDelete: Restrict)
    publishedPhotos     PublishedPhoto[]
    scheduledSlotPhotos ScheduledSlotPhoto[]

    @@id(name: "photoId", [id, userId])
    @@index([tweetId])
    @@index([perceptualHash])
    @@index([hashBucket4])
    @@index([hashBucket8])
    @@index([hashBucket12])
    @@index([s3Path])
    @@index([deletedAt])
    @@index([createdAt(sort: Desc)])
    @@map("photos")
}

model PublishedPhoto {
    photoId         String  @map("photo_id")
    userId          String  @map("user_id") @db.Uuid
    chatId          BigInt  @map("chat_id")
    scheduledSlotId String? @map("scheduled_slot_id") @db.Uuid

    mediaGroupId         String? @map("media_group_id")
    messageId            BigInt  @map("message_id")
    telegramFileId       String  @map("telegram_file_id")
    telegramFileUniqueId String  @map("telegram_file_unique_id")

    publishedAt DateTime @default(now()) @map("published_at")

    // Relations
    photo         Photo          @relation(fields: [photoId, userId], references: [id, userId], onDelete: Restrict)
    user          User           @relation(fields: [userId], references: [id], onDelete: Restrict)
    chat          Chat           @relation(fields: [chatId], references: [id], onDelete: Restrict)
    scheduledSlot ScheduledSlot? @relation(fields: [scheduledSlotId], references: [id], onDelete: SetNull)

    @@id([photoId, userId, chatId])
    @@index([messageId])
    @@index([scheduledSlotId])
    @@map("published_photos")
}

model ScheduledSlot {
    id           String              @id @default(uuid(7)) @db.Uuid
    userId       String              @map("user_id") @db.Uuid
    chatId       BigInt              @map("chat_id")
    scheduledFor DateTime?           @map("scheduled_for")
    status       ScheduledSlotStatus @default(WAITING)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    user                User                 @relation(fields: [userId], references: [id], onDelete: Restrict)
    postingChannel      PostingChannel       @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "posting_channel")
    publishedPhotos     PublishedPhoto[]
    scheduledSlotTweets ScheduledSlotTweet[]

    @@index([userId])
    @@index([chatId])
    @@index([status])
    @@index([createdAt(sort: Desc)])
    @@map("scheduled_slots")
}

enum ScheduledSlotStatus {
    WAITING
    PUBLISHED
    PUBLISHING
}

model ScheduledSlotTweet {
    id              String @id @default(uuid(7)) @db.Uuid
    scheduledSlotId String @map("scheduled_slot_id") @db.Uuid
    tweetId         String @map("tweet_id")
    userId          String @map("user_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    scheduledSlot       ScheduledSlot        @relation(fields: [scheduledSlotId], references: [id], onDelete: Cascade)
    tweet               Tweet                @relation(fields: [tweetId, userId], references: [id, userId], onDelete: Restrict)
    scheduledSlotPhotos ScheduledSlotPhoto[]

    @@unique([scheduledSlotId, tweetId, userId])
    @@index([scheduledSlotId])
    @@index([tweetId, userId])
    @@map("scheduled_slot_tweets")
}

model ScheduledSlotPhoto {
    id                   String @id @default(uuid(7)) @db.Uuid
    scheduledSlotTweetId String @map("scheduled_slot_tweet_id") @db.Uuid
    photoId              String @map("photo_id")
    userId               String @map("user_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    scheduledSlotTweet ScheduledSlotTweet @relation(fields: [scheduledSlotTweetId], references: [id], onDelete: Cascade)
    photo              Photo              @relation(fields: [photoId, userId], references: [id, userId], onDelete: Restrict)

    @@unique([scheduledSlotTweetId, photoId, userId])
    @@index([scheduledSlotTweetId])
    @@index([photoId, userId])
    @@map("scheduled_slot_photos")
}

enum CollectionShareVisibility {
    PUBLIC
    PRIVATE
}

model CollectionShare {
    id     String  @id @default(uuid(7)) @db.Uuid
    slug   String  @unique @map("slug")
    userId String  @map("user_id") @db.Uuid
    name   String? @map("name")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    visibility CollectionShareVisibility @default(PUBLIC)

    // Relations
    user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    collectionShareTweets  CollectionShareTweet[]
    collectionShareAuthors CollectionShareAuthor[]

    @@index([slug])
    @@index([userId])
    @@map("collection_shares")
}

model CollectionShareTweet {
    id                String @id @default(uuid(7)) @db.Uuid
    collectionShareId String @map("collection_share_id") @db.Uuid
    tweetId           String @map("tweet_id")
    tweetUserId       String @map("tweet_user_id") @db.Uuid

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    collectionShare CollectionShare @relation(fields: [collectionShareId], references: [id], onDelete: Cascade)
    tweet           Tweet           @relation(fields: [tweetId, tweetUserId], references: [id, userId], onDelete: Restrict)

    @@unique([collectionShareId, tweetId, tweetUserId])
    @@index([collectionShareId])
    @@index([tweetId, tweetUserId])
    @@map("collection_share_tweets")
}

model CollectionShareAuthor {
    id                String @id @default(uuid(7)) @db.Uuid
    collectionShareId String @map("collection_share_id") @db.Uuid
    username          String @map("username")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    collectionShare CollectionShare @relation(fields: [collectionShareId], references: [id], onDelete: Cascade)

    @@unique([collectionShareId, username])
    @@index([collectionShareId])
    @@map("collection_share_authors")
}
