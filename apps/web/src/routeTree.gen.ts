/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as PublicationsRouteImport } from './routes/publications'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProfileSlugRouteImport } from './routes/profile/$slug'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicationsRoute = PublicationsRouteImport.update({
  id: '/publications',
  path: '/publications',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileSlugRoute = ProfileSlugRouteImport.update({
  id: '/profile/$slug',
  path: '/profile/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/profile/$slug': typeof ProfileSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/profile/$slug': typeof ProfileSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/profile/$slug': typeof ProfileSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/publications' | '/settings' | '/profile/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/publications' | '/settings' | '/profile/$slug'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/publications'
    | '/settings'
    | '/profile/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRoute
  PublicationsRoute: typeof PublicationsRoute
  SettingsRoute: typeof SettingsRoute
  ProfileSlugRoute: typeof ProfileSlugRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/publications': {
      id: '/publications'
      path: '/publications'
      fullPath: '/publications'
      preLoaderRoute: typeof PublicationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$slug': {
      id: '/profile/$slug'
      path: '/profile/$slug'
      fullPath: '/profile/$slug'
      preLoaderRoute: typeof ProfileSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRoute,
  PublicationsRoute: PublicationsRoute,
  SettingsRoute: SettingsRoute,
  ProfileSlugRoute: ProfileSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
