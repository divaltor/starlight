/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as PublicationsImport } from './routes/publications'
import { Route as AppImport } from './routes/app'
import { Route as ShareProfileSlugImport } from './routes/share/profile/$slug'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const PublicationsRoute = PublicationsImport.update({
  id: '/publications',
  path: '/publications',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const ShareProfileSlugRoute = ShareProfileSlugImport.update({
  id: '/share/profile/$slug',
  path: '/share/profile/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/publications': {
      id: '/publications'
      path: '/publications'
      fullPath: '/publications'
      preLoaderRoute: typeof PublicationsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/share/profile/$slug': {
      id: '/share/profile/$slug'
      path: '/share/profile/$slug'
      fullPath: '/share/profile/$slug'
      preLoaderRoute: typeof ShareProfileSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/share/profile/$slug': typeof ShareProfileSlugRoute
}

export interface FileRoutesByTo {
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/share/profile/$slug': typeof ShareProfileSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRoute
  '/publications': typeof PublicationsRoute
  '/settings': typeof SettingsRoute
  '/share/profile/$slug': typeof ShareProfileSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/app' | '/publications' | '/settings' | '/share/profile/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/app' | '/publications' | '/settings' | '/share/profile/$slug'
  id:
    | '__root__'
    | '/app'
    | '/publications'
    | '/settings'
    | '/share/profile/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRoute
  PublicationsRoute: typeof PublicationsRoute
  SettingsRoute: typeof SettingsRoute
  ShareProfileSlugRoute: typeof ShareProfileSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRoute,
  PublicationsRoute: PublicationsRoute,
  SettingsRoute: SettingsRoute,
  ShareProfileSlugRoute: ShareProfileSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/publications",
        "/settings",
        "/share/profile/$slug"
      ]
    },
    "/app": {
      "filePath": "app.tsx"
    },
    "/publications": {
      "filePath": "publications.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/share/profile/$slug": {
      "filePath": "share/profile/$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
